{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n\n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('Creating path between:', source, destination);\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths(true); // Force refresh\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n\n    return newValue;\n  };\n\n  // Fetch paths data with aggressive throttling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      console.log('Path request already in progress, skipping');\n      return livePaths;\n    }\n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check (was 20s)\n    if (!force && now - fetchTimers.current.paths < 60000) {\n      console.log(`Skipping fetchLivePaths - too soon (${Math.round((now - fetchTimers.current.paths) / 1000)}s)`);\n      return livePaths;\n    }\n    try {\n      var _response$data$data;\n      requestInProgress.current.paths = true;\n      setIsLoading(true);\n      console.log(`Fetching paths with intersection filter: ${intersectOnly}`);\n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      console.log(`Fetched ${((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0} paths`);\n      fetchTimers.current.paths = now;\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      return livePaths;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // Fetch all active users' locations with aggressive throttling\n  const fetchLiveUsers = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      console.log('User request already in progress, skipping');\n      return liveUsers;\n    }\n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check (was 20s)\n    if (!force && now - fetchTimers.current.users < 60000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users) / 1000)}s)`);\n      return liveUsers;\n    }\n    try {\n      requestInProgress.current.users = true;\n      setIsLoading(true);\n      console.log('Fetching live users...');\n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n\n      // Process and validate the data before setting state\n      const userData = response.data.data || [];\n      console.log(`Got ${userData.length} users from API`);\n\n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        const isValid = !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n        if (!isValid && u) {\n          console.warn(`Filtered out user with invalid coordinates:`, u.username, u.latitude, u.longitude);\n        }\n        return isValid;\n      });\n      console.log(`${validUsers.length} users have valid coordinates`);\n      setLiveUsers(validUsers);\n      setLastUpdated(new Date());\n      return validUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n      return liveUsers;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.users = false;\n    }\n  };\n\n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0\n      };\n\n      // First get users\n      const userData = await fetchLiveUsers(true);\n      console.log(\"Users refreshed:\", (userData === null || userData === void 0 ? void 0 : userData.length) || 0);\n\n      // Then get paths\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"Paths refreshed:\", (pathsData === null || pathsData === void 0 ? void 0 : pathsData.length) || 0);\n      setLastUpdated(new Date());\n      return {\n        users: userData,\n        paths: pathsData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup and much less frequent polling\n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n\n      // Do initial data load\n      const initialLoad = async () => {\n        try {\n          await fetchLiveUsers(true);\n          await fetchLivePaths(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      initialLoad();\n\n      // Set up polling with MUCH LONGER interval (2 minutes instead of 30 seconds)\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 120000); // Increased to 120 seconds (2 minutes) instead of 30 seconds\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      toggleIntersectionFilter,\n      getCurrentPosition,\n      forceRefreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"WeuR0A7IbyGH/kzw1Rz5wIQ8ADc=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","fetchTimers","users","paths","requestInProgress","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","status","warn","_error$response","_error$response$data","message","toggleIntersectionFilter","newValue","force","intersectOnly","current","now","Math","round","_response$data$data","get","length","fetchLiveUsers","userData","validUsers","filter","u","lat","parseFloat","lng","isValid","isNaN","abs","username","getCurrentPosition","navigator","geolocation","coords","catch","err","forceRefreshData","pathsData","initialLoad","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  \n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n  \n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log('Creating path between:', source, destination);\n      \n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Refresh paths after creating a new one\n      await fetchLivePaths(true); // Force refresh\n      setLastUpdated(new Date());\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n    \n    return newValue;\n  };\n\n  // Fetch paths data with aggressive throttling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      console.log('Path request already in progress, skipping');\n      return livePaths;\n    }\n    \n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check (was 20s)\n    if (!force && now - fetchTimers.current.paths < 60000) {\n      console.log(`Skipping fetchLivePaths - too soon (${Math.round((now - fetchTimers.current.paths)/1000)}s)`);\n      return livePaths;\n    }\n    \n    try {\n      requestInProgress.current.paths = true;\n      setIsLoading(true);\n      console.log(`Fetching paths with intersection filter: ${intersectOnly}`);\n      \n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      \n      console.log(`Fetched ${response.data.data?.length || 0} paths`);\n      fetchTimers.current.paths = now;\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      return livePaths;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // Fetch all active users' locations with aggressive throttling\n  const fetchLiveUsers = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      console.log('User request already in progress, skipping');\n      return liveUsers;\n    }\n    \n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check (was 20s)\n    if (!force && now - fetchTimers.current.users < 60000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users)/1000)}s)`);\n      return liveUsers;\n    }\n    \n    try {\n      requestInProgress.current.users = true;\n      setIsLoading(true);\n      console.log('Fetching live users...');\n      \n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n      \n      // Process and validate the data before setting state\n      const userData = response.data.data || [];\n      console.log(`Got ${userData.length} users from API`);\n      \n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        const isValid = !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n        \n        if (!isValid && u) {\n          console.warn(`Filtered out user with invalid coordinates:`, u.username, u.latitude, u.longitude);\n        }\n        \n        return isValid;\n      });\n      \n      console.log(`${validUsers.length} users have valid coordinates`);\n      setLiveUsers(validUsers);\n      setLastUpdated(new Date());\n      return validUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n      return liveUsers;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.users = false;\n    }\n  };\n  \n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0\n      };\n      \n      // First get users\n      const userData = await fetchLiveUsers(true);\n      console.log(\"Users refreshed:\", userData?.length || 0);\n      \n      // Then get paths\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"Paths refreshed:\", pathsData?.length || 0);\n      \n      setLastUpdated(new Date());\n      return { users: userData, paths: pathsData };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup and much less frequent polling\n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n      \n      // Do initial data load\n      const initialLoad = async () => {\n        try {\n          await fetchLiveUsers(true);\n          await fetchLivePaths(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      \n      initialLoad();\n      \n      // Set up polling with MUCH LONGER interval (2 minutes instead of 30 seconds)\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 120000); // Increased to 120 seconds (2 minutes) instead of 30 seconds\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        toggleIntersectionFilter,\n        getCurrentPosition,\n        forceRefreshData\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}