{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\n/**\n * LocationContext.jsx\n * Last updated: 2025-04-10 13:15:43\n * \n * Context provider for location-related features including:\n * - User locations (refreshed every 2 seconds)\n * - User paths (refreshed every 2 seconds)\n * - Users along the current user's path (refreshed every 2 seconds)\n */\n\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [usersAlongPath, setUsersAlongPath] = useState([]); // Users physically along current path\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius\n\n  // Cache to prevent redundant updates\n  const dataCache = useRef({\n    usersHash: null,\n    pathsHash: null,\n    usersAlongPathHash: null\n  });\n\n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0,\n    usersAlongPath: 0\n  });\n\n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false,\n    usersAlongPath: false\n  });\n\n  // Simple hash function to compare data changes\n  const hashData = data => {\n    if (!data) return 'empty';\n    return JSON.stringify(data).split('').reduce((a, b) => (a << 5) - a + b.charCodeAt(0) | 0, 0).toString();\n  };\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      console.log(`[2025-04-10 13:15:43] Updating location for user ${user.username || '[unknown]'}: ${latitude}, ${longitude}`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:15:43] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n\n      // Since our location changed, refresh users along path as they might have changed\n      fetchUsersAlongPath(true).catch(err => {\n        console.warn('Could not refresh users along path after location update:', err.message);\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log(`[2025-04-10 13:15:43] User ${user.username || '[unknown]'} creating path from [${source.lat}, ${source.lng}] to [${destination.lat}, ${destination.lng}]`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:15:43] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n\n      // Create the path\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths(true); // Force refresh\n\n      // Also fetch users along the new path since we have a new path\n      await fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Update proximity radius for user filtering\n  const updateProximityRadius = radius => {\n    console.log(`[2025-04-10 13:15:43] Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n\n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n\n    return newValue;\n  };\n\n  // Fetch paths data with smart throttling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      return livePaths;\n    }\n    const now = Date.now();\n    // Apply more lenient throttling for 2-second refresh (300ms minimum gap)\n    if (!force && now - fetchTimers.current.paths < 300) {\n      return livePaths;\n    }\n    try {\n      requestInProgress.current.paths = true;\n      fetchTimers.current.paths = now;\n\n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n\n      // This will only return the current user's path as per backend changes\n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      const pathsData = response.data.data || [];\n\n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(pathsData);\n      if (force || newDataHash !== dataCache.current.pathsHash) {\n        if (force || pathsData.length !== livePaths.length) {\n          console.log(`[2025-04-10 13:15:43] Fetched ${pathsData.length} paths`);\n        }\n        dataCache.current.pathsHash = newDataHash;\n        setLivePaths(pathsData);\n        setLastUpdated(new Date());\n      }\n      return pathsData;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      if (force) setError('Failed to fetch paths');\n      return livePaths;\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // Fetch users along the current user's path with smart throttling\n  const fetchUsersAlongPath = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      return usersAlongPath;\n    }\n    const now = Date.now();\n    // Apply more lenient throttling for 2-second refresh (300ms minimum gap)\n    if (!force && now - fetchTimers.current.usersAlongPath < 300) {\n      return usersAlongPath;\n    }\n    try {\n      requestInProgress.current.usersAlongPath = true;\n      fetchTimers.current.usersAlongPath = now;\n\n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n\n      // This endpoint only returns users physically along the current user's path\n      const response = await api.get(`/location/along-my-path?radius=${proximityRadius}`);\n      const usersData = response.data.data || [];\n\n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(usersData);\n      if (force || newDataHash !== dataCache.current.usersAlongPathHash) {\n        if (force || usersData.length !== usersAlongPath.length) {\n          console.log(`[2025-04-10 13:15:43] Found ${usersData.length} users physically along the current path`);\n        }\n        dataCache.current.usersAlongPathHash = newDataHash;\n        setUsersAlongPath(usersData);\n        setLastUpdated(new Date());\n      }\n      return usersData;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        if (force || usersAlongPath.length > 0) {\n          console.log('[2025-04-10 13:15:43] No path found for current user');\n          setUsersAlongPath([]);\n          dataCache.current.usersAlongPathHash = hashData([]);\n        }\n        return [];\n      } else {\n        console.error('Error fetching users along path:', error);\n        if (force) setError('Failed to fetch users along path');\n        return usersAlongPath;\n      }\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Fetch all active users' locations with smart throttling\n  const fetchLiveUsers = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      return liveUsers;\n    }\n    const now = Date.now();\n    // Apply more lenient throttling for 2-second refresh (300ms minimum gap)\n    if (!force && now - fetchTimers.current.users < 300) {\n      return liveUsers;\n    }\n    try {\n      requestInProgress.current.users = true;\n      fetchTimers.current.users = now;\n\n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      const response = await api.get('/location/live');\n      const userData = response.data.data || [];\n\n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        return !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      });\n\n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(validUsers);\n      if (force || newDataHash !== dataCache.current.usersHash) {\n        if (force || validUsers.length !== liveUsers.length) {\n          console.log(`[2025-04-10 13:15:43] Got ${validUsers.length} users with valid coordinates`);\n        }\n        dataCache.current.usersHash = newDataHash;\n        setLiveUsers(validUsers);\n        setLastUpdated(new Date());\n      }\n      return validUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      if (force) setError('Failed to fetch users');\n      return liveUsers;\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.users = false;\n    }\n  };\n\n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Fetch users along a specific path (useful for viewing other users' paths)\n  const fetchUsersAlongSpecificPath = async (pathId, radius = proximityRadius) => {\n    if (!pathId) return [];\n    try {\n      console.log(`[2025-04-10 13:15:43] Fetching users along specific path ${pathId} with radius ${radius}m`);\n\n      // This endpoint only returns users physically along the specified path\n      const response = await api.get(`/location/along-path?pathId=${pathId}&radius=${radius}`);\n      return response.data.data || [];\n    } catch (error) {\n      console.error(`Error fetching users along path ${pathId}:`, error);\n      throw error;\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"[2025-04-10 13:15:43] Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0,\n        usersAlongPath: 0\n      };\n\n      // Reset data hashes to force UI updates\n      dataCache.current = {\n        usersHash: null,\n        pathsHash: null,\n        usersAlongPathHash: null\n      };\n\n      // First get users\n      const userData = await fetchLiveUsers(true);\n      console.log(\"[2025-04-10 13:15:43] Users refreshed:\", (userData === null || userData === void 0 ? void 0 : userData.length) || 0);\n\n      // Then get paths\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"[2025-04-10 13:15:43] Paths refreshed:\", (pathsData === null || pathsData === void 0 ? void 0 : pathsData.length) || 0);\n\n      // Then get users along path\n      const usersAlongPathData = await fetchUsersAlongPath(true);\n      console.log(\"[2025-04-10 13:15:43] Users along path refreshed:\", (usersAlongPathData === null || usersAlongPathData === void 0 ? void 0 : usersAlongPathData.length) || 0);\n      setLastUpdated(new Date());\n      return {\n        users: userData,\n        paths: pathsData,\n        usersAlongPath: usersAlongPathData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup \n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n\n      // Do initial data load\n      const initialLoad = async () => {\n        console.log('[2025-04-10 13:15:43] Performing initial data load for user', user.username || '[unknown]');\n        if (!user.username) {\n          console.error('[2025-04-10 13:15:43] Missing username for API operation');\n          setError('Your profile information is incomplete. Please log out and log in again.');\n          return;\n        }\n        try {\n          await fetchLiveUsers(true);\n          await fetchLivePaths(true);\n          await fetchUsersAlongPath(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      initialLoad();\n\n      // Set up high-frequency polling (2 seconds)\n      const intervalId = setInterval(() => {\n        // These request won't show loading indicators or trigger error states unless there's a significant change\n        fetchLiveUsers().catch(err => {\n          if (err.message !== 'canceled') console.error('Failed to fetch users:', err);\n        });\n        fetchLivePaths().catch(err => {\n          if (err.message !== 'canceled') console.error('Failed to fetch paths:', err);\n        });\n        fetchUsersAlongPath().catch(err => {\n          if (err.message !== 'canceled' && !(err.response && err.response.status === 404)) {\n            console.error('Failed to fetch users along path:', err);\n          }\n        });\n      }, 2000); // 2 seconds refresh interval\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  // Effect to refetch users along path when radius changes\n  useEffect(() => {\n    if (user && fetchTimers.current.usersAlongPath > 0) {\n      // Only if not first load\n      console.log(`[2025-04-10 13:15:43] Proximity radius changed to ${proximityRadius}m, refreshing users along path`);\n      fetchUsersAlongPath(true).catch(err => console.error('Failed to fetch users along path after radius change:', err));\n    }\n  }, [proximityRadius, user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      usersAlongPath,\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      proximityRadius,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      fetchUsersAlongPath,\n      fetchUsersAlongSpecificPath,\n      // Added new function\n      toggleIntersectionFilter,\n      updateProximityRadius,\n      getCurrentPosition,\n      forceRefreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"eDRg71u4JmY/5mRkdPfT+kgb6cM=\");\n_c = LocationProvider;\nexport default LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","usersAlongPath","setUsersAlongPath","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","proximityRadius","setProximityRadius","dataCache","usersHash","pathsHash","usersAlongPathHash","fetchTimers","users","paths","requestInProgress","hashData","data","JSON","stringify","split","reduce","a","b","charCodeAt","toString","updateLocation","latitude","longitude","console","log","username","response","post","fetchUsersAlongPath","catch","err","warn","message","createPath","source","destination","lat","lng","fetchLivePaths","status","_error$response","_error$response$data","updateProximityRadius","radius","toggleIntersectionFilter","newValue","force","intersectOnly","current","now","get","pathsData","newDataHash","length","usersData","fetchLiveUsers","userData","validUsers","filter","u","parseFloat","isNaN","Math","abs","getCurrentPosition","navigator","geolocation","coords","fetchUsersAlongSpecificPath","pathId","forceRefreshData","usersAlongPathData","initialLoad","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["/**\n * LocationContext.jsx\n * Last updated: 2025-04-10 13:15:43\n * \n * Context provider for location-related features including:\n * - User locations (refreshed every 2 seconds)\n * - User paths (refreshed every 2 seconds)\n * - Users along the current user's path (refreshed every 2 seconds)\n */\n\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [usersAlongPath, setUsersAlongPath] = useState([]); // Users physically along current path\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius\n  \n  // Cache to prevent redundant updates\n  const dataCache = useRef({\n    usersHash: null,\n    pathsHash: null,\n    usersAlongPathHash: null\n  });\n  \n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0,\n    usersAlongPath: 0\n  });\n  \n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false,\n    usersAlongPath: false\n  });\n\n  // Simple hash function to compare data changes\n  const hashData = (data) => {\n    if (!data) return 'empty';\n    return JSON.stringify(data)\n      .split('')\n      .reduce((a, b) => (((a << 5) - a) + b.charCodeAt(0))|0, 0)\n      .toString();\n  };\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      console.log(`[2025-04-10 13:15:43] Updating location for user ${user.username || '[unknown]'}: ${latitude}, ${longitude}`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:15:43] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      \n      // Since our location changed, refresh users along path as they might have changed\n      fetchUsersAlongPath(true).catch(err => {\n        console.warn('Could not refresh users along path after location update:', err.message);\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log(`[2025-04-10 13:15:43] User ${user.username || '[unknown]'} creating path from [${source.lat}, ${source.lng}] to [${destination.lat}, ${destination.lng}]`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:15:43] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      \n      // Create the path\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Refresh paths after creating a new one\n      await fetchLivePaths(true); // Force refresh\n      \n      // Also fetch users along the new path since we have a new path\n      await fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Update proximity radius for user filtering\n  const updateProximityRadius = (radius) => {\n    console.log(`[2025-04-10 13:15:43] Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n    \n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n    \n    return newValue;\n  };\n\n  // Fetch paths data with smart throttling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      return livePaths;\n    }\n    \n    const now = Date.now();\n    // Apply more lenient throttling for 2-second refresh (300ms minimum gap)\n    if (!force && now - fetchTimers.current.paths < 300) {\n      return livePaths;\n    }\n    \n    try {\n      requestInProgress.current.paths = true;\n      fetchTimers.current.paths = now;\n      \n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      \n      // This will only return the current user's path as per backend changes\n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      const pathsData = response.data.data || [];\n      \n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(pathsData);\n      if (force || newDataHash !== dataCache.current.pathsHash) {\n        if (force || pathsData.length !== livePaths.length) {\n          console.log(`[2025-04-10 13:15:43] Fetched ${pathsData.length} paths`);\n        }\n        \n        dataCache.current.pathsHash = newDataHash;\n        setLivePaths(pathsData);\n        setLastUpdated(new Date());\n      }\n      \n      return pathsData;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      if (force) setError('Failed to fetch paths');\n      return livePaths;\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // Fetch users along the current user's path with smart throttling\n  const fetchUsersAlongPath = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      return usersAlongPath;\n    }\n    \n    const now = Date.now();\n    // Apply more lenient throttling for 2-second refresh (300ms minimum gap)\n    if (!force && now - fetchTimers.current.usersAlongPath < 300) {\n      return usersAlongPath;\n    }\n    \n    try {\n      requestInProgress.current.usersAlongPath = true;\n      fetchTimers.current.usersAlongPath = now;\n      \n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      \n      // This endpoint only returns users physically along the current user's path\n      const response = await api.get(`/location/along-my-path?radius=${proximityRadius}`);\n      const usersData = response.data.data || [];\n      \n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(usersData);\n      if (force || newDataHash !== dataCache.current.usersAlongPathHash) {\n        if (force || usersData.length !== usersAlongPath.length) {\n          console.log(`[2025-04-10 13:15:43] Found ${usersData.length} users physically along the current path`);\n        }\n        \n        dataCache.current.usersAlongPathHash = newDataHash;\n        setUsersAlongPath(usersData);\n        setLastUpdated(new Date());\n      }\n      \n      return usersData;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        if (force || usersAlongPath.length > 0) {\n          console.log('[2025-04-10 13:15:43] No path found for current user');\n          setUsersAlongPath([]);\n          dataCache.current.usersAlongPathHash = hashData([]);\n        }\n        return [];\n      } else {\n        console.error('Error fetching users along path:', error);\n        if (force) setError('Failed to fetch users along path');\n        return usersAlongPath;\n      }\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Fetch all active users' locations with smart throttling\n  const fetchLiveUsers = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      return liveUsers;\n    }\n    \n    const now = Date.now();\n    // Apply more lenient throttling for 2-second refresh (300ms minimum gap)\n    if (!force && now - fetchTimers.current.users < 300) {\n      return liveUsers;\n    }\n    \n    try {\n      requestInProgress.current.users = true;\n      fetchTimers.current.users = now;\n      \n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      \n      const response = await api.get('/location/live');\n      const userData = response.data.data || [];\n      \n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        return !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      });\n      \n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(validUsers);\n      if (force || newDataHash !== dataCache.current.usersHash) {\n        if (force || validUsers.length !== liveUsers.length) {\n          console.log(`[2025-04-10 13:15:43] Got ${validUsers.length} users with valid coordinates`);\n        }\n        \n        dataCache.current.usersHash = newDataHash;\n        setLiveUsers(validUsers);\n        setLastUpdated(new Date());\n      }\n      \n      return validUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      if (force) setError('Failed to fetch users');\n      return liveUsers;\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.users = false;\n    }\n  };\n  \n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Fetch users along a specific path (useful for viewing other users' paths)\n  const fetchUsersAlongSpecificPath = async (pathId, radius = proximityRadius) => {\n    if (!pathId) return [];\n    \n    try {\n      console.log(`[2025-04-10 13:15:43] Fetching users along specific path ${pathId} with radius ${radius}m`);\n      \n      // This endpoint only returns users physically along the specified path\n      const response = await api.get(`/location/along-path?pathId=${pathId}&radius=${radius}`);\n      return response.data.data || [];\n    } catch (error) {\n      console.error(`Error fetching users along path ${pathId}:`, error);\n      throw error;\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"[2025-04-10 13:15:43] Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0,\n        usersAlongPath: 0\n      };\n      \n      // Reset data hashes to force UI updates\n      dataCache.current = {\n        usersHash: null,\n        pathsHash: null,\n        usersAlongPathHash: null\n      };\n      \n      // First get users\n      const userData = await fetchLiveUsers(true);\n      console.log(\"[2025-04-10 13:15:43] Users refreshed:\", userData?.length || 0);\n      \n      // Then get paths\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"[2025-04-10 13:15:43] Paths refreshed:\", pathsData?.length || 0);\n      \n      // Then get users along path\n      const usersAlongPathData = await fetchUsersAlongPath(true);\n      console.log(\"[2025-04-10 13:15:43] Users along path refreshed:\", usersAlongPathData?.length || 0);\n      \n      setLastUpdated(new Date());\n      return { \n        users: userData, \n        paths: pathsData,\n        usersAlongPath: usersAlongPathData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup \n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n      \n      // Do initial data load\n      const initialLoad = async () => {\n        console.log('[2025-04-10 13:15:43] Performing initial data load for user', user.username || '[unknown]');\n        if (!user.username) {\n          console.error('[2025-04-10 13:15:43] Missing username for API operation');\n          setError('Your profile information is incomplete. Please log out and log in again.');\n          return;\n        }\n        try {\n          await fetchLiveUsers(true);\n          await fetchLivePaths(true);\n          await fetchUsersAlongPath(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      \n      initialLoad();\n      \n      // Set up high-frequency polling (2 seconds)\n      const intervalId = setInterval(() => {\n        // These request won't show loading indicators or trigger error states unless there's a significant change\n        fetchLiveUsers().catch(err => {\n          if (err.message !== 'canceled') console.error('Failed to fetch users:', err);\n        });\n        \n        fetchLivePaths().catch(err => {\n          if (err.message !== 'canceled') console.error('Failed to fetch paths:', err);\n        });\n        \n        fetchUsersAlongPath().catch(err => {\n          if (err.message !== 'canceled' && !(err.response && err.response.status === 404)) {\n            console.error('Failed to fetch users along path:', err);\n          }\n        });\n      }, 2000); // 2 seconds refresh interval\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  // Effect to refetch users along path when radius changes\n  useEffect(() => {\n    if (user && fetchTimers.current.usersAlongPath > 0) { // Only if not first load\n      console.log(`[2025-04-10 13:15:43] Proximity radius changed to ${proximityRadius}m, refreshing users along path`);\n      fetchUsersAlongPath(true).catch(err => console.error('Failed to fetch users along path after radius change:', err));\n    }\n  }, [proximityRadius, user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        usersAlongPath,\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        proximityRadius,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        fetchUsersAlongPath,\n        fetchUsersAlongSpecificPath,  // Added new function\n        toggleIntersectionFilter,\n        updateProximityRadius,\n        getCurrentPosition,\n        forceRefreshData\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n\nexport default LocationProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}