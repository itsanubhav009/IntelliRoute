{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [chatStatus, setChatStatus] = useState(null);\n\n  // Add these to track last request times\n  const lastRequest = useRef({\n    chat: 0,\n    notifications: 0,\n    messages: 0\n  });\n\n  // Add this to prevent concurrent requests\n  const pendingRequests = useRef({\n    chat: false,\n    notifications: false,\n    messages: false\n  });\n\n  // Enforce API delay function\n  const enforceApiDelay = useCallback(async (requestType, minDelay = 2000) => {\n    if (pendingRequests.current[requestType]) {\n      console.log(`${requestType} request already in progress, skipping`);\n      return false;\n    }\n    const now = Date.now();\n    if (now - lastRequest.current[requestType] < minDelay) {\n      console.log(`Throttling ${requestType} request, too soon`);\n      return false;\n    }\n    pendingRequests.current[requestType] = true;\n    lastRequest.current[requestType] = now;\n    return true;\n  }, []);\n\n  // Throttled fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n    if (pendingRequests.current.notifications) {\n      return notifications;\n    }\n    const now = Date.now();\n    if (!force && now - lastRequest.current.notifications < 10000) {\n      return notifications;\n    }\n    try {\n      pendingRequests.current.notifications = true;\n      const response = await api.get('/chat/notifications');\n      lastRequest.current.notifications = now;\n      const newNotifications = response.data.notifications || [];\n      if (JSON.stringify(newNotifications) !== JSON.stringify(notifications)) {\n        setNotifications(newNotifications);\n      }\n      return newNotifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Throttled fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n    if (pendingRequests.current.chat) {\n      return activeChats;\n    }\n    const now = Date.now();\n    if (!force && now - lastRequest.current.chat < 10000) {\n      return activeChats;\n    }\n    try {\n      pendingRequests.current.chat = true;\n      setLoading(true);\n      const response = await api.get('/chat/active');\n      lastRequest.current.chat = now;\n      const newChats = response.data.chats || [];\n      if (JSON.stringify(newChats) !== JSON.stringify(activeChats)) {\n        setActiveChats(newChats);\n      }\n      return newChats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chat = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async recipientId => {\n    if (!user || !recipientId) return;\n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'sending',\n        message: 'Sending chat request...'\n      });\n      const response = await api.post('/chat/request', {\n        recipientId\n      });\n      await fetchActiveChats(true);\n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      setChatStatus({\n        type: 'success',\n        message: 'Chat request sent successfully! Waiting for acceptance.'\n      });\n      setTimeout(() => setChatStatus(null), 3000);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending chat request:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to send chat request: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message)\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request with enhanced error handling\n  const acceptChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'accepting',\n        message: 'Accepting chat request...'\n      });\n      const response = await api.post('/chat/accept', {\n        chatRoomId\n      });\n\n      // Refresh notifications first\n      await fetchNotifications(true);\n\n      // Then fetch active chats to get the updated chat list\n      const updatedChats = await fetchActiveChats(true);\n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      if (acceptedChat) {\n        if (acceptedChat.isActive) {\n          setCurrentChat(acceptedChat);\n          await fetchMessages(chatRoomId);\n          setChatStatus({\n            type: 'success',\n            message: 'Chat request accepted. You can now start chatting!'\n          });\n          setTimeout(() => setChatStatus(null), 3000);\n          return {\n            success: true,\n            chat: acceptedChat\n          };\n        } else {\n          setChatStatus({\n            type: 'waiting',\n            message: 'Waiting for the chat room to become active...'\n          });\n\n          // Retry a few times to see if the chat becomes active\n          return new Promise(resolve => {\n            let attempts = 0;\n            const checkChatActive = async () => {\n              attempts++;\n              if (attempts > 5) {\n                setChatStatus({\n                  type: 'error',\n                  message: 'Chat room did not become active. Please try again.'\n                });\n                setTimeout(() => setChatStatus(null), 5000);\n                resolve({\n                  success: false,\n                  error: 'Chat room did not become active after multiple attempts'\n                });\n                return;\n              }\n              const refreshedChats = await fetchActiveChats(true);\n              const chat = refreshedChats.find(c => c.id === chatRoomId);\n              if (chat && chat.isActive) {\n                setCurrentChat(chat);\n                await fetchMessages(chatRoomId);\n                setChatStatus({\n                  type: 'success',\n                  message: 'Chat request accepted. You can now start chatting!'\n                });\n                setTimeout(() => setChatStatus(null), 3000);\n                resolve({\n                  success: true,\n                  chat\n                });\n              } else {\n                setTimeout(checkChatActive, 1000); // Check again in 1 second\n              }\n            };\n            checkChatActive();\n          });\n        }\n      } else {\n        setChatStatus({\n          type: 'error',\n          message: 'Could not find the chat after accepting. Please refresh and try again.'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n        return {\n          success: false,\n          error: 'Chat not found after acceptance'\n        };\n      }\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to accept chat request: ' + (error.message || 'Unknown error')\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'declining',\n        message: 'Declining chat request...'\n      });\n      await api.post('/chat/decline', {\n        chatRoomId\n      });\n      await fetchNotifications(true);\n      setChatStatus({\n        type: 'success',\n        message: 'Chat request declined'\n      });\n      setTimeout(() => setChatStatus(null), 3000);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to decline chat request: ' + (error.message || 'Unknown error')\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    try {\n      const response = await api.post('/chat/send', {\n        chatRoomId,\n        message\n      });\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {\n        ...newMessage,\n        profiles: {\n          username: user.username\n        }\n      }]);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data, _error$response3$data2;\n      console.error('Error sending message:', error);\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403 && (_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && (_error$response3$data2 = _error$response3$data.message) !== null && _error$response3$data2 !== void 0 && _error$response3$data2.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'Waiting for recipient to accept your chat request...'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n      } else {\n        setError('Failed to send message: ' + error.message);\n      }\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = useCallback(async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages;\n    }\n    try {\n      setLoading(true);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      if (response.data.messages) {\n        setMessages(response.data.messages);\n        return response.data.messages;\n      } else {\n        setMessages([]);\n        return [];\n      }\n    } catch (error) {\n      var _error$response4, _error$response5, _error$response5$data, _error$response5$data2;\n      console.error('Error fetching messages:', error);\n      if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 403 && (_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && (_error$response5$data2 = _error$response5$data.message) !== null && _error$response5$data2 !== void 0 && _error$response5$data2.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'This chat room is not active yet. Waiting for acceptance...'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n        setMessages([]);\n      } else {\n        setError('Failed to fetch messages: ' + error.message);\n        setMessages([]);\n      }\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  }, [user, messages, currentChat, enforceApiDelay]);\n\n  // Open a chat with improved error handling for inactive chats\n  const openChat = useCallback(async chatRoomId => {\n    try {\n      setLoading(true);\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      if (!chat) {\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      if (chat) {\n        // Check if the chat is active\n        if (!chat.isActive) {\n          // If the chat is not active, check if user has joined\n          if (chat.hasJoined) {\n            // If the user has joined, they're waiting for the other person\n            setChatStatus({\n              type: 'waiting',\n              message: 'Waiting for the other person to accept your chat request...'\n            });\n            setCurrentChat(chat);\n            setMessages([]);\n            setTimeout(() => setChatStatus(null), 5000);\n            return {\n              success: true,\n              chat,\n              status: 'waiting'\n            };\n          } else {\n            // If the user hasn't joined, they need to accept the request first\n            setChatStatus({\n              type: 'pending',\n              message: 'You need to accept this chat request first'\n            });\n            await acceptChatRequest(chatRoomId);\n            return {\n              success: true,\n              chat,\n              status: 'accepted'\n            };\n          }\n        } else {\n          // Chat is active, proceed normally\n          setCurrentChat(chat);\n          await fetchMessages(chatRoomId);\n          return {\n            success: true,\n            chat,\n            status: 'active'\n          };\n        }\n      } else {\n        setChatStatus({\n          type: 'error',\n          message: 'Chat room not found'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n        return {\n          success: false,\n          error: 'Chat not found'\n        };\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to open chat: ' + error.message\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChats, fetchActiveChats, fetchMessages, acceptChatRequest]);\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n\n  // Handle notification click\n  const handleNotificationClick = useCallback(async notification => {\n    if (!notification) return;\n    try {\n      // Mark notification as read\n      await api.post('/chat/markNotificationRead', {\n        notificationId: notification.id\n      });\n\n      // If it's a chat request, open the chat (which will handle acceptance if needed)\n      if (notification.type === 'chat_request' || notification.type === 'chat_accepted' || notification.type === 'new_message') {\n        await openChat(notification.chat_room_id);\n      }\n\n      // Refresh notifications to remove the read one\n      await fetchNotifications(true);\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to process notification: ' + error.message\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n    }\n  }, [openChat, fetchNotifications]);\n\n  // Check for pending chat requests on mount\n  useEffect(() => {\n    if (user) {\n      // Initial load\n      fetchNotifications(true);\n      fetchActiveChats(true);\n\n      // Check for pending chat requests\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.isActive) {\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n\n      // Set up polling interval\n      const intervalId = setInterval(() => {\n        fetchNotifications();\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        } else {\n          fetchActiveChats();\n        }\n      }, 10000);\n      return () => clearInterval(intervalId);\n    }\n  }, [user, currentChat, fetchNotifications, fetchActiveChats, fetchMessages, openChat]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      activeChats,\n      notifications,\n      currentChat,\n      messages,\n      loading,\n      error,\n      chatStatus,\n      sendChatRequest,\n      acceptChatRequest,\n      declineChatRequest,\n      sendMessage,\n      fetchMessages,\n      openChat,\n      closeChat,\n      fetchActiveChats,\n      fetchNotifications,\n      handleNotificationClick\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 542,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"onV7/gASV2Be2yu/DPls9eWSR0A=\");\n_c = ChatProvider;\nexport default ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","useRef","api","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","activeChats","setActiveChats","notifications","setNotifications","currentChat","setCurrentChat","messages","setMessages","loading","setLoading","error","setError","chatStatus","setChatStatus","lastRequest","chat","pendingRequests","enforceApiDelay","requestType","minDelay","current","console","log","now","Date","fetchNotifications","force","response","get","newNotifications","data","JSON","stringify","fetchActiveChats","newChats","chats","sendChatRequest","recipientId","type","message","post","localStorage","setItem","chatRoomId","setTimeout","_error$response","_error$response$data","acceptChatRequest","updatedChats","acceptedChat","find","c","id","isActive","fetchMessages","success","Promise","resolve","attempts","checkChatActive","refreshedChats","declineChatRequest","sendMessage","newMessage","chatMessage","prev","profiles","username","_error$response2","_error$response3","_error$response3$data","_error$response3$data2","status","includes","_error$response4","_error$response5","_error$response5$data","_error$response5$data2","openChat","hasJoined","closeChat","handleNotificationClick","notification","notificationId","chat_room_id","pendingChatId","getItem","then","pendingChat","removeItem","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [chatStatus, setChatStatus] = useState(null);\n  \n  // Add these to track last request times\n  const lastRequest = useRef({\n    chat: 0,\n    notifications: 0,\n    messages: 0\n  });\n  \n  // Add this to prevent concurrent requests\n  const pendingRequests = useRef({\n    chat: false,\n    notifications: false,\n    messages: false\n  });\n\n  // Enforce API delay function\n  const enforceApiDelay = useCallback(async (requestType, minDelay = 2000) => {\n    if (pendingRequests.current[requestType]) {\n      console.log(`${requestType} request already in progress, skipping`);\n      return false;\n    }\n    \n    const now = Date.now();\n    if (now - lastRequest.current[requestType] < minDelay) {\n      console.log(`Throttling ${requestType} request, too soon`);\n      return false;\n    }\n    \n    pendingRequests.current[requestType] = true;\n    lastRequest.current[requestType] = now;\n    return true;\n  }, []);\n\n  // Throttled fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    if (pendingRequests.current.notifications) {\n      return notifications;\n    }\n    \n    const now = Date.now();\n    if (!force && now - lastRequest.current.notifications < 10000) {\n      return notifications;\n    }\n    \n    try {\n      pendingRequests.current.notifications = true;\n      const response = await api.get('/chat/notifications');\n      lastRequest.current.notifications = now;\n      \n      const newNotifications = response.data.notifications || [];\n      if (JSON.stringify(newNotifications) !== JSON.stringify(notifications)) {\n        setNotifications(newNotifications);\n      }\n      \n      return newNotifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Throttled fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    if (pendingRequests.current.chat) {\n      return activeChats;\n    }\n    \n    const now = Date.now();\n    if (!force && now - lastRequest.current.chat < 10000) {\n      return activeChats;\n    }\n    \n    try {\n      pendingRequests.current.chat = true;\n      setLoading(true);\n      \n      const response = await api.get('/chat/active');\n      lastRequest.current.chat = now;\n      \n      const newChats = response.data.chats || [];\n      \n      if (JSON.stringify(newChats) !== JSON.stringify(activeChats)) {\n        setActiveChats(newChats);\n      }\n      \n      return newChats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chat = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async (recipientId) => {\n    if (!user || !recipientId) return;\n    \n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'sending',\n        message: 'Sending chat request...'\n      });\n      \n      const response = await api.post('/chat/request', { recipientId });\n      \n      await fetchActiveChats(true);\n      \n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      \n      setChatStatus({\n        type: 'success',\n        message: 'Chat request sent successfully! Waiting for acceptance.'\n      });\n      \n      setTimeout(() => setChatStatus(null), 3000);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending chat request:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to send chat request: ' + (error.response?.data?.message || error.message)\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request with enhanced error handling\n  const acceptChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'accepting',\n        message: 'Accepting chat request...'\n      });\n      \n      const response = await api.post('/chat/accept', { chatRoomId });\n      \n      // Refresh notifications first\n      await fetchNotifications(true);\n      \n      // Then fetch active chats to get the updated chat list\n      const updatedChats = await fetchActiveChats(true);\n      \n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      \n      if (acceptedChat) {\n        if (acceptedChat.isActive) {\n          setCurrentChat(acceptedChat);\n          await fetchMessages(chatRoomId);\n          \n          setChatStatus({\n            type: 'success',\n            message: 'Chat request accepted. You can now start chatting!'\n          });\n          \n          setTimeout(() => setChatStatus(null), 3000);\n          \n          return { success: true, chat: acceptedChat };\n        } else {\n          setChatStatus({\n            type: 'waiting',\n            message: 'Waiting for the chat room to become active...'\n          });\n          \n          // Retry a few times to see if the chat becomes active\n          return new Promise((resolve) => {\n            let attempts = 0;\n            const checkChatActive = async () => {\n              attempts++;\n              if (attempts > 5) {\n                setChatStatus({\n                  type: 'error',\n                  message: 'Chat room did not become active. Please try again.'\n                });\n                \n                setTimeout(() => setChatStatus(null), 5000);\n                \n                resolve({ \n                  success: false, \n                  error: 'Chat room did not become active after multiple attempts' \n                });\n                return;\n              }\n              \n              const refreshedChats = await fetchActiveChats(true);\n              const chat = refreshedChats.find(c => c.id === chatRoomId);\n              \n              if (chat && chat.isActive) {\n                setCurrentChat(chat);\n                await fetchMessages(chatRoomId);\n                \n                setChatStatus({\n                  type: 'success',\n                  message: 'Chat request accepted. You can now start chatting!'\n                });\n                \n                setTimeout(() => setChatStatus(null), 3000);\n                \n                resolve({ success: true, chat });\n              } else {\n                setTimeout(checkChatActive, 1000); // Check again in 1 second\n              }\n            };\n            \n            checkChatActive();\n          });\n        }\n      } else {\n        setChatStatus({\n          type: 'error',\n          message: 'Could not find the chat after accepting. Please refresh and try again.'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n        \n        return { \n          success: false, \n          error: 'Chat not found after acceptance' \n        };\n      }\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to accept chat request: ' + (error.message || 'Unknown error')\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'declining',\n        message: 'Declining chat request...'\n      });\n      \n      await api.post('/chat/decline', { chatRoomId });\n      \n      await fetchNotifications(true);\n      \n      setChatStatus({\n        type: 'success',\n        message: 'Chat request declined'\n      });\n      \n      setTimeout(() => setChatStatus(null), 3000);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to decline chat request: ' + (error.message || 'Unknown error')\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    \n    try {\n      const response = await api.post('/chat/send', { chatRoomId, message });\n      \n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [\n        ...prev, \n        {...newMessage, profiles: { username: user.username }}\n      ]);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      if (error.response?.status === 403 && error.response?.data?.message?.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'Waiting for recipient to accept your chat request...'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n      } else {\n        setError('Failed to send message: ' + error.message);\n      }\n      \n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = useCallback(async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n    \n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages;\n    }\n    \n    try {\n      setLoading(true);\n      \n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      \n      if (response.data.messages) {\n        setMessages(response.data.messages);\n        return response.data.messages;\n      } else {\n        setMessages([]);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      \n      if (error.response?.status === 403 && error.response?.data?.message?.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'This chat room is not active yet. Waiting for acceptance...'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n        setMessages([]);\n      } else {\n        setError('Failed to fetch messages: ' + error.message);\n        setMessages([]);\n      }\n      \n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  }, [user, messages, currentChat, enforceApiDelay]);\n\n  // Open a chat with improved error handling for inactive chats\n  const openChat = useCallback(async (chatRoomId) => {\n    try {\n      setLoading(true);\n      \n      let chat = activeChats.find(c => c.id === chatRoomId);\n      \n      if (!chat) {\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      \n      if (chat) {\n        // Check if the chat is active\n        if (!chat.isActive) {\n          // If the chat is not active, check if user has joined\n          if (chat.hasJoined) {\n            // If the user has joined, they're waiting for the other person\n            setChatStatus({\n              type: 'waiting',\n              message: 'Waiting for the other person to accept your chat request...'\n            });\n            \n            setCurrentChat(chat);\n            setMessages([]);\n            \n            setTimeout(() => setChatStatus(null), 5000);\n            \n            return { \n              success: true, \n              chat, \n              status: 'waiting' \n            };\n          } else {\n            // If the user hasn't joined, they need to accept the request first\n            setChatStatus({\n              type: 'pending',\n              message: 'You need to accept this chat request first'\n            });\n            \n            await acceptChatRequest(chatRoomId);\n            return { \n              success: true, \n              chat, \n              status: 'accepted' \n            };\n          }\n        } else {\n          // Chat is active, proceed normally\n          setCurrentChat(chat);\n          await fetchMessages(chatRoomId);\n          \n          return { \n            success: true, \n            chat, \n            status: 'active' \n          };\n        }\n      } else {\n        setChatStatus({\n          type: 'error',\n          message: 'Chat room not found'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n        \n        return { \n          success: false, \n          error: 'Chat not found' \n        };\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to open chat: ' + error.message\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      return { \n        success: false, \n        error: error.message \n      };\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChats, fetchActiveChats, fetchMessages, acceptChatRequest]);\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n  \n  // Handle notification click\n  const handleNotificationClick = useCallback(async (notification) => {\n    if (!notification) return;\n    \n    try {\n      // Mark notification as read\n      await api.post('/chat/markNotificationRead', { notificationId: notification.id });\n      \n      // If it's a chat request, open the chat (which will handle acceptance if needed)\n      if (notification.type === 'chat_request' || notification.type === 'chat_accepted' || notification.type === 'new_message') {\n        await openChat(notification.chat_room_id);\n      }\n      \n      // Refresh notifications to remove the read one\n      await fetchNotifications(true);\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to process notification: ' + error.message\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n    }\n  }, [openChat, fetchNotifications]);\n\n  // Check for pending chat requests on mount\n  useEffect(() => {\n    if (user) {\n      // Initial load\n      fetchNotifications(true);\n      fetchActiveChats(true);\n      \n      // Check for pending chat requests\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.isActive) {\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n      \n      // Set up polling interval\n      const intervalId = setInterval(() => {\n        fetchNotifications();\n        \n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        } else {\n          fetchActiveChats();\n        }\n      }, 10000);\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user, currentChat, fetchNotifications, fetchActiveChats, fetchMessages, openChat]);\n  \n  return (\n    <ChatContext.Provider\n      value={{\n        activeChats,\n        notifications,\n        currentChat,\n        messages,\n        loading,\n        error,\n        chatStatus,\n        sendChatRequest,\n        acceptChatRequest,\n        declineChatRequest,\n        sendMessage,\n        fetchMessages,\n        openChat,\n        closeChat,\n        fetchActiveChats,\n        fetchNotifications,\n        handleNotificationClick\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}