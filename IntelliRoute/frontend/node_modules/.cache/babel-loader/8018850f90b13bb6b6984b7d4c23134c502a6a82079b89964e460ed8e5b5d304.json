{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, useMapEvents } from 'react-leaflet';\nimport { LocationContext } from '../context/LocationContext';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport ChatDialog from './ChatDialog';\nimport NotificationsPanel from './NotificationsPanel';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './UserLocationMap.css';\nimport NotificationButton from './NotificationButton';\n// Fix for default icons\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments, faSync, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// Define default Leaflet icon - make sure it works correctly\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\n\n// Properly set the default icon globally\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// Helper to parse route data from PostGIS or OSRM\nconst parseRouteData = routeData => {\n  if (!routeData) return [];\n\n  // LINESTRING parsing\n  if (typeof routeData === 'string' && routeData.startsWith('LINESTRING')) {\n    try {\n      // Extract coordinates from LINESTRING(lng lat, lng lat, ...)\n      const coordsStr = routeData.substring(routeData.indexOf('(') + 1, routeData.lastIndexOf(')'));\n      return coordsStr.split(',').map(pair => {\n        const [lng, lat] = pair.trim().split(' ').map(parseFloat);\n        // Return [lat, lng] for Leaflet\n        return [lat, lng];\n      });\n    } catch (e) {\n      console.error('Error parsing LINESTRING:', e, routeData);\n      return [];\n    }\n  }\n\n  // If it's already an array, return it (assuming it's in Leaflet's [lat, lng] format)\n  if (Array.isArray(routeData)) {\n    return routeData;\n  }\n  return [];\n};\n\n// Component to update map bounds based on users' positions and routes\nfunction MapBoundsUpdater({\n  users,\n  paths\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (!users.length && !paths.length) return;\n    try {\n      const points = [];\n\n      // Add user points\n      users.forEach(user => {\n        if (user.latitude && user.longitude) {\n          points.push([user.latitude, user.longitude]);\n        }\n      });\n\n      // Add path points (with better handling for complex routes)\n      paths.forEach(path => {\n        if (path.parsedRoute && Array.isArray(path.parsedRoute)) {\n          // Don't add every point - just add first, last, and some in between\n          // to avoid overloading the bounds calculation with too many points\n          const routePoints = path.parsedRoute;\n          if (routePoints.length > 0) {\n            points.push(routePoints[0]); // Add first point\n\n            if (routePoints.length > 10) {\n              // Add a few points in the middle for long routes\n              points.push(routePoints[Math.floor(routePoints.length / 3)]);\n              points.push(routePoints[Math.floor(routePoints.length * 2 / 3)]);\n            }\n            if (routePoints.length > 1) {\n              points.push(routePoints[routePoints.length - 1]); // Add last point\n            }\n          }\n        }\n      });\n      if (points.length > 0) {\n        const bounds = L.latLngBounds(points);\n        map.fitBounds(bounds, {\n          padding: [50, 50]\n        });\n      }\n    } catch (error) {\n      console.error('Error updating map bounds:', error);\n    }\n  }, [users, paths, map]);\n  return null;\n}\n\n// Component to handle map clicks for route creation\n_s(MapBoundsUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapBoundsUpdater;\nfunction MapClickHandler({\n  routeMode,\n  selectedSource,\n  setSelectedSource,\n  createPath\n}) {\n  _s2();\n  useMapEvents({\n    click: e => {\n      if (!routeMode) return;\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      if (!selectedSource) {\n        // Set source\n        setSelectedSource({\n          lat,\n          lng\n        });\n      } else {\n        // Set destination and create path\n        const destination = {\n          lat,\n          lng\n        };\n        createPath(selectedSource, destination);\n\n        // Reset route mode (this will be handled by parent component)\n      }\n    }\n  });\n  return null;\n}\n\n// Component to display current date and active user info\n_s2(MapClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c2 = MapClickHandler;\nfunction MapUserInfo({\n  user\n}) {\n  const currentDate = new Date().toISOString().slice(0, 10);\n  const currentTime = new Date().toTimeString().slice(0, 8);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-user-info\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-time\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: currentDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Logged in as:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username\",\n        children: (user === null || user === void 0 ? void 0 : user.username) || \"Guest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_c3 = MapUserInfo;\nconst UserLocationMap = () => {\n  _s3();\n  const {\n    liveUsers,\n    fetchLiveUsers,\n    livePaths,\n    fetchLivePaths,\n    createPath,\n    showIntersectingOnly,\n    toggleIntersectionFilter,\n    forceRefreshData\n  } = useContext(LocationContext);\n  const {\n    user\n  } = useContext(AuthContext);\n  const {\n    sendChatRequest,\n    notifications,\n    currentChat,\n    openChat,\n    activeChats,\n    fetchActiveChats,\n    fetchNotifications\n  } = useContext(ChatContext);\n  const [usersWithLocation, setUsersWithLocation] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [pathsWithCoordinates, setPathsWithCoordinates] = useState([]);\n  const [routeMode, setRouteMode] = useState(false);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [mapReady, setMapReady] = useState(false);\n  const [dataFetched, setDataFetched] = useState(false);\n  const mapRef = useRef(null);\n  const mapCenter = useRef([37.7749, -122.4194]); // Default to San Francisco\n\n  // Create custom icon function\n  const createCustomIcon = color => {\n    return L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div class=\"marker-pin\" style=\"background-color: ${color};\"></div>`,\n      iconSize: [30, 42],\n      iconAnchor: [15, 42]\n    });\n  };\n\n  // Chat request handler\n  const handleChatRequest = userId => {\n    if (userId === user.id) {\n      // Don't allow chatting with yourself\n      return;\n    }\n    sendChatRequest(userId).then(response => {\n      console.log('Chat request sent successfully:', response);\n    }).catch(error => {\n      console.error('Failed to send chat request:', error);\n    });\n  };\n\n  // Handle refresh button click\n  const handleRefresh = async () => {\n    try {\n      setIsLoading(true);\n      console.log('Manually refreshing map data...');\n\n      // Refresh notifications too\n      if (fetchNotifications) {\n        await fetchNotifications(true);\n      }\n\n      // Only use forceRefreshData if it exists, otherwise fall back to the individual fetch functions\n      if (forceRefreshData) {\n        await forceRefreshData();\n      } else {\n        await Promise.all([fetchLiveUsers(), fetchLivePaths()]);\n      }\n      setLastUpdated(new Date());\n      console.log('Map data refreshed manually');\n    } catch (error) {\n      console.error('Manual refresh failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Enhanced notification toggle with debugging\n  const toggleNotifications = () => {\n    console.log('Toggling notifications panel. Current state:', showNotifications);\n    // Refresh notifications when opening panel\n    if (!showNotifications && fetchNotifications) {\n      fetchNotifications(true).catch(err => console.error('Failed to refresh notifications:', err));\n    }\n    setShowNotifications(!showNotifications);\n  };\n\n  // Fetch active chats on component mount\n  useEffect(() => {\n    if (user && fetchActiveChats) {\n      fetchActiveChats();\n    }\n  }, [user, fetchActiveChats]);\n\n  // IMPORTANT: Two-step loading process - first fetch data, then initialize map\n  useEffect(() => {\n    if (!user) return;\n\n    // Step 1: Fetch initial data\n    const loadInitialData = async () => {\n      setIsLoading(true);\n      console.log('Loading initial data...');\n      try {\n        // Use Promise.all to load both data types in parallel\n        const [users, paths] = await Promise.all([fetchLiveUsers(), fetchLivePaths()]);\n        console.log(`Initial load complete: ${(users === null || users === void 0 ? void 0 : users.length) || 0} users, ${(paths === null || paths === void 0 ? void 0 : paths.length) || 0} paths`);\n        setLastUpdated(new Date());\n        setDataFetched(true);\n      } catch (error) {\n        console.error('Error in initial data load:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadInitialData();\n\n    // Step 2: Setup regular polling with reduced frequency (1 minute)\n    const intervalId = setInterval(() => {\n      if (!isLoading) {\n        console.log('Periodic refresh at', new Date().toLocaleTimeString());\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n        setLastUpdated(new Date());\n      }\n    }, 60000); // Poll every minute\n\n    return () => clearInterval(intervalId);\n  }, [user, fetchLiveUsers, fetchLivePaths]);\n\n  // Process user data with improved error handling\n  useEffect(() => {\n    if (!liveUsers || !Array.isArray(liveUsers)) {\n      console.warn('Invalid users data:', liveUsers);\n      setUsersWithLocation([]);\n      return;\n    }\n    console.log(`Processing ${liveUsers.length} users`);\n\n    // More robust validation to ensure coordinates are valid\n    const filtered = liveUsers.filter(u => {\n      if (!u) return false;\n\n      // Convert to numbers and validate\n      const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n      const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n      const isValid = u.id && u.username && lat !== undefined && lng !== undefined && !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      if (!isValid) {\n        console.warn(`Filtered out user with invalid data:`, u);\n      }\n      return isValid;\n    });\n    console.log(`Found ${filtered.length} users with valid location data`);\n\n    // Update center point if we have valid users\n    if (filtered.length > 0) {\n      // Calculate average position for map center\n      const totalLat = filtered.reduce((sum, u) => {\n        const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n        return sum + lat;\n      }, 0);\n      const totalLng = filtered.reduce((sum, u) => {\n        const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n        return sum + lng;\n      }, 0);\n      mapCenter.current = [totalLat / filtered.length, totalLng / filtered.length];\n      console.log(`Map center set to: [${mapCenter.current[0]}, ${mapCenter.current[1]}]`);\n    }\n    setUsersWithLocation(filtered);\n\n    // Mark map as ready once we have processed user data\n    setMapReady(true);\n  }, [liveUsers]);\n\n  // Process path data\n  useEffect(() => {\n    console.log('Processing path data update:', livePaths);\n    if (livePaths && Array.isArray(livePaths)) {\n      console.log(`Processing ${livePaths.length} paths`);\n      const parsed = livePaths.map(path => ({\n        ...path,\n        parsedRoute: parseRouteData(path.route)\n      })).filter(path => {\n        const isValid = path && path.parsedRoute && path.parsedRoute.length > 0;\n        if (!isValid) {\n          console.warn('Filtered out invalid path:', (path === null || path === void 0 ? void 0 : path.id) || 'unknown');\n        }\n        return isValid;\n      });\n      console.log(`Processed ${parsed.length} valid paths with route data`);\n\n      // If no valid paths were found, use test data in development\n      if (parsed.length === 0 && process.env.NODE_ENV !== 'production') {\n        console.log('No valid paths found, using test data');\n        setPathsWithCoordinates(testPaths.map(path => ({\n          ...path,\n          parsedRoute: parseRouteData(path.route)\n        })));\n      } else {\n        setPathsWithCoordinates(parsed);\n      }\n    } else {\n      console.warn('No path data or invalid data:', livePaths);\n\n      // For testing, use test data when we have no path data\n      if (process.env.NODE_ENV !== 'production' && user !== null && user !== void 0 && user.id) {\n        console.log('Using test path data since no real paths were found');\n        setPathsWithCoordinates(testPaths.map(path => ({\n          ...path,\n          parsedRoute: parseRouteData(path.route)\n        })));\n      } else {\n        setPathsWithCoordinates([]);\n      }\n    }\n  }, [livePaths, user === null || user === void 0 ? void 0 : user.id]);\n  const toggleRouteMode = () => {\n    setRouteMode(!routeMode);\n    if (routeMode) {\n      setSelectedSource(null);\n    }\n  };\n  const handleCreatePath = (source, destination) => {\n    createPath(source, destination);\n    setRouteMode(false);\n    setSelectedSource(null);\n  };\n  const handleToggleIntersectionFilter = () => {\n    toggleIntersectionFilter();\n  };\n  const formatTime = date => {\n    if (!(date instanceof Date)) {\n      try {\n        date = new Date(date);\n      } catch (e) {\n        return 'Unknown';\n      }\n    }\n    return date.toLocaleTimeString();\n  };\n\n  // Calculate center point for map\n  let centerLat = mapCenter.current[0];\n  let centerLng = mapCenter.current[1];\n  if (usersWithLocation.length > 0) {\n    // Calculate the average of all valid user positions\n    centerLat = usersWithLocation.reduce((sum, u) => {\n      const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n      return sum + lat;\n    }, 0) / usersWithLocation.length;\n    centerLng = usersWithLocation.reduce((sum, u) => {\n      const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n      return sum + lng;\n    }, 0) / usersWithLocation.length;\n  }\n\n  // Show loading screen if we're still loading initial data\n  if (isLoading && !dataFetched) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading-screen\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faSpinner,\n        spin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading Map Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please wait while we fetch the latest user locations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Live User Map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MapUserInfo, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-controls\",\n          children: [/*#__PURE__*/_jsxDEV(NotificationButton, {\n            notificationCount: notifications ? notifications.length : 0,\n            onClick: toggleNotifications\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"refresh-button\",\n            onClick: handleRefresh,\n            title: \"Refresh map data\",\n            disabled: isLoading,\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: isLoading ? faSpinner : faSync,\n              spin: isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `filter-button ${showIntersectingOnly ? 'active' : ''}`,\n            onClick: handleToggleIntersectionFilter,\n            title: \"Show only paths that intersect with your route\",\n            children: showIntersectingOnly ? 'Show All Paths' : 'Show Intersecting Only'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `route-button ${routeMode ? 'active' : ''}`,\n          onClick: toggleRouteMode,\n          children: routeMode ? 'Cancel Route' : 'Create Route'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), routeMode && !selectedSource && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-instructions\",\n          children: \"Click on map to set starting point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), routeMode && selectedSource && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-instructions\",\n          children: \"Click on map to set destination\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"last-updated\",\n          children: [\"Last updated: \", formatTime(lastUpdated)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-count-info\",\n      children: usersWithLocation.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-users-warning\",\n        children: \"No users with location data are currently available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-count\",\n        children: [\"Showing \", usersWithLocation.length, \" active users on the map\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this), showNotifications && /*#__PURE__*/_jsxDEV(NotificationsPanel, {\n      onClose: () => setShowNotifications(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 9\n    }, this), showIntersectingOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intersection-filter-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-info-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 11\n      }, this), \"Showing only paths that intersect with your route.\", pathsWithCoordinates.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-intersections\",\n        children: \" No intersecting paths found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 9\n    }, this), mapReady && /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [centerLat, centerLng],\n      zoom: 4,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      ref: mapRef,\n      whenCreated: map => {\n        console.log(\"Map created with center:\", [centerLat, centerLng]);\n        // Force an update after map is created\n        setTimeout(() => {\n          map.invalidateSize();\n        }, 100);\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MapClickHandler, {\n        routeMode: routeMode,\n        selectedSource: selectedSource,\n        setSelectedSource: setSelectedSource,\n        createPath: handleCreatePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this), usersWithLocation.map(u => {\n        // Convert latitude and longitude to numbers if they're strings\n        const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n        const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n\n        // Create different icon based on if it's current user or not\n        const markerIcon = u.id === (user === null || user === void 0 ? void 0 : user.id) ? createCustomIcon('#4285F4') : createCustomIcon('#FF5722');\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: [lat, lng],\n          icon: markerIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-popup\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: u.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-status\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"status-dot\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 23\n                }, this), \"Online\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-location\",\n                children: [\"Coordinates: \", lat.toFixed(4), \", \", lng.toFixed(4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-last-active\",\n                children: [\"Last active: \", formatTime(u.last_active)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 21\n              }, this), u.id === (user === null || user === void 0 ? void 0 : user.id) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"current-user-tag\",\n                children: \"This is you\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-button-container\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"chat-request-button\",\n                  onClick: () => handleChatRequest(u.id),\n                  children: [\"Chat with \", u.username]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 608,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 17\n          }, this)\n        }, `user-${u.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 15\n        }, this);\n      }), routeMode && selectedSource && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [selectedSource.lat, selectedSource.lng],\n        icon: createCustomIcon('#00C853'),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Starting point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 13\n      }, this), pathsWithCoordinates.map((path, idx) => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: path.parsedRoute\n        // Use a special color for intersecting paths\n        ,\n        color: path.user_id === (user === null || user === void 0 ? void 0 : user.id) ? '#2196F3' : path.intersects_with_user ? '#4CAF50' : '#FF5722',\n        weight: 4,\n        opacity: 0.7,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"path-popup\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Route Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"User:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 22\n              }, this), \" \", path.username || 'Unknown']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Created:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 22\n              }, this), \" \", formatTime(path.created_at)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 19\n            }, this), path.intersects_with_user && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"intersecting-path-notice\",\n              children: \"This path intersects with your route!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 21\n            }, this), path.parsedRoute.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"From:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 26\n                }, this), \" \", path.parsedRoute[0][0].toFixed(4), \", \", path.parsedRoute[0][1].toFixed(4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"To:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 653,\n                  columnNumber: 26\n                }, this), \" \", path.parsedRoute[path.parsedRoute.length - 1][0].toFixed(4), \", \", path.parsedRoute[path.parsedRoute.length - 1][1].toFixed(4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Points:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 26\n                }, this), \" \", path.parsedRoute.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 15\n        }, this)\n      }, `path-${path.id || idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(MapBoundsUpdater, {\n        users: usersWithLocation,\n        paths: pathsWithCoordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Map Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#4285F4'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#FF5722'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Other users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#2196F3'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your path\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#4CAF50'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Intersecting paths\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#FF5722'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Other users' paths\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), routeMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#00C853'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Selected starting point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-info-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Active Users:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 13\n          }, this), \" \", usersWithLocation.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Active Paths:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 13\n          }, this), \" \", pathsWithCoordinates.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Last Updated:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 13\n          }, this), \" \", formatTime(lastUpdated)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this), showIntersectingOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Filter:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 15\n          }, this), \" Showing intersecting paths only\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"active-chats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faComments\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 13\n          }, this), \" Active Chats\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chats-list\",\n          children: activeChats && activeChats.length > 0 ? activeChats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-item\",\n            onClick: () => openChat(chat.id),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-user\",\n              children: chat.otherParticipants && chat.otherParticipants.length > 0 ? chat.otherParticipants[0].username : 'Unknown User'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 19\n            }, this), chat.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unread-badge\",\n              children: chat.unreadCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 21\n            }, this)]\n          }, chat.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-chats\",\n            children: \"No active chats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }, this), pathsWithCoordinates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-paths\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Paths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paths-list\",\n          children: pathsWithCoordinates.slice(0, 5).map((path, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `path-item ${path.intersects_with_user ? 'intersecting' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: path.username || 'Unknown user'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: formatTime(path.created_at)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-details\",\n              children: [path.intersects_with_user && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"intersect-badge\",\n                children: \"Intersects with your route\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 23\n              }, this), path.parsedRoute.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"From: \", path.parsedRoute[0][0].toFixed(4), \", \", path.parsedRoute[0][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 767,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"To: \", path.parsedRoute[path.parsedRoute.length - 1][0].toFixed(4), \", \", path.parsedRoute[path.parsedRoute.length - 1][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 770,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"Route Points: \", path.parsedRoute.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 773,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }, this), currentChat && /*#__PURE__*/_jsxDEV(ChatDialog, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 466,\n    columnNumber: 5\n  }, this);\n};\n_s3(UserLocationMap, \"ctOWMPOAS/VoWr4HLJtHLiXFdhM=\");\n_c4 = UserLocationMap;\nexport default UserLocationMap;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MapBoundsUpdater\");\n$RefreshReg$(_c2, \"MapClickHandler\");\n$RefreshReg$(_c3, \"MapUserInfo\");\n$RefreshReg$(_c4, \"UserLocationMap\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useRef","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","useMapEvents","LocationContext","AuthContext","ChatContext","ChatDialog","NotificationsPanel","L","NotificationButton","icon","iconShadow","FontAwesomeIcon","faComments","faSync","faSpinner","jsxDEV","_jsxDEV","Fragment","_Fragment","DefaultIcon","iconUrl","shadowUrl","iconSize","iconAnchor","prototype","options","parseRouteData","routeData","startsWith","coordsStr","substring","indexOf","lastIndexOf","split","map","pair","lng","lat","trim","parseFloat","e","console","error","Array","isArray","MapBoundsUpdater","users","paths","_s","length","points","forEach","user","latitude","longitude","push","path","parsedRoute","routePoints","Math","floor","bounds","latLngBounds","fitBounds","padding","_c","MapClickHandler","routeMode","selectedSource","setSelectedSource","createPath","_s2","click","latlng","destination","_c2","MapUserInfo","currentDate","Date","toISOString","slice","currentTime","toTimeString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","username","_c3","UserLocationMap","_s3","liveUsers","fetchLiveUsers","livePaths","fetchLivePaths","showIntersectingOnly","toggleIntersectionFilter","forceRefreshData","sendChatRequest","notifications","currentChat","openChat","activeChats","fetchActiveChats","fetchNotifications","usersWithLocation","setUsersWithLocation","isLoading","setIsLoading","lastUpdated","setLastUpdated","pathsWithCoordinates","setPathsWithCoordinates","setRouteMode","showNotifications","setShowNotifications","mapReady","setMapReady","dataFetched","setDataFetched","mapRef","mapCenter","createCustomIcon","color","divIcon","html","handleChatRequest","userId","id","then","response","log","catch","handleRefresh","Promise","all","toggleNotifications","err","loadInitialData","intervalId","setInterval","toLocaleTimeString","clearInterval","warn","filtered","filter","u","isValid","undefined","isNaN","abs","totalLat","reduce","sum","totalLng","current","parsed","route","process","env","NODE_ENV","testPaths","toggleRouteMode","handleCreatePath","source","handleToggleIntersectionFilter","formatTime","date","centerLat","centerLng","spin","notificationCount","onClick","title","disabled","onClose","center","zoom","style","height","width","ref","whenCreated","setTimeout","invalidateSize","attribution","url","markerIcon","position","toFixed","last_active","idx","positions","user_id","intersects_with_user","weight","opacity","created_at","backgroundColor","chat","otherParticipants","unreadCount","_c4","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, useMapEvents } from 'react-leaflet';\nimport { LocationContext } from '../context/LocationContext';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport ChatDialog from './ChatDialog';\nimport NotificationsPanel from './NotificationsPanel';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './UserLocationMap.css';\n\nimport NotificationButton from './NotificationButton';\n// Fix for default icons\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments, faSync, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// Define default Leaflet icon - make sure it works correctly\nconst DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\n\n// Properly set the default icon globally\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// Helper to parse route data from PostGIS or OSRM\nconst parseRouteData = (routeData) => {\n \n  if (!routeData) return [];\n  \n  // LINESTRING parsing\n  if (typeof routeData === 'string' && routeData.startsWith('LINESTRING')) {\n    try {\n      // Extract coordinates from LINESTRING(lng lat, lng lat, ...)\n      const coordsStr = routeData.substring(routeData.indexOf('(') + 1, routeData.lastIndexOf(')'));\n      return coordsStr.split(',').map(pair => {\n        const [lng, lat] = pair.trim().split(' ').map(parseFloat);\n        // Return [lat, lng] for Leaflet\n        return [lat, lng]; \n      });\n    } catch (e) {\n      console.error('Error parsing LINESTRING:', e, routeData);\n      return [];\n    }\n  }\n  \n  // If it's already an array, return it (assuming it's in Leaflet's [lat, lng] format)\n  if (Array.isArray(routeData)) {\n    return routeData;\n  }\n  \n  return [];\n};\n\n// Component to update map bounds based on users' positions and routes\nfunction MapBoundsUpdater({ users, paths }) {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (!users.length && !paths.length) return;\n    \n    try {\n      const points = [];\n      \n      // Add user points\n      users.forEach(user => {\n        if (user.latitude && user.longitude) {\n          points.push([user.latitude, user.longitude]);\n        }\n      });\n      \n      // Add path points (with better handling for complex routes)\n      paths.forEach(path => {\n        if (path.parsedRoute && Array.isArray(path.parsedRoute)) {\n          // Don't add every point - just add first, last, and some in between\n          // to avoid overloading the bounds calculation with too many points\n          const routePoints = path.parsedRoute;\n          if (routePoints.length > 0) {\n            points.push(routePoints[0]); // Add first point\n            \n            if (routePoints.length > 10) {\n              // Add a few points in the middle for long routes\n              points.push(routePoints[Math.floor(routePoints.length / 3)]);\n              points.push(routePoints[Math.floor(routePoints.length * 2 / 3)]);\n            }\n            \n            if (routePoints.length > 1) {\n              points.push(routePoints[routePoints.length - 1]); // Add last point\n            }\n          }\n        }\n      });\n      \n      if (points.length > 0) {\n        const bounds = L.latLngBounds(points);\n        map.fitBounds(bounds, { padding: [50, 50] });\n      }\n    } catch (error) {\n      console.error('Error updating map bounds:', error);\n    }\n  }, [users, paths, map]);\n  \n  return null;\n}\n\n// Component to handle map clicks for route creation\nfunction MapClickHandler({ routeMode, selectedSource, setSelectedSource, createPath }) {\n  useMapEvents({\n    click: (e) => {\n      if (!routeMode) return;\n      \n      const { lat, lng } = e.latlng;\n      \n      if (!selectedSource) {\n        // Set source\n        setSelectedSource({ lat, lng });\n      } else {\n        // Set destination and create path\n        const destination = { lat, lng };\n        createPath(selectedSource, destination);\n        \n        // Reset route mode (this will be handled by parent component)\n      }\n    }\n  });\n  \n  return null;\n}\n\n// Component to display current date and active user info\nfunction MapUserInfo({ user }) {\n  const currentDate = new Date().toISOString().slice(0, 10);\n  const currentTime = new Date().toTimeString().slice(0, 8);\n  \n  return (\n    <div className=\"map-user-info\">\n      <div className=\"date-time\">\n        <span>{currentDate}</span>\n        <span>{currentTime}</span>\n      </div>\n      <div className=\"user-info\">\n        <span>Logged in as:</span>\n        <span className=\"username\">{user?.username || \"Guest\"}</span>\n      </div>\n    </div>\n  );\n}\n\nconst UserLocationMap = () => {\n  const { \n    liveUsers, \n    fetchLiveUsers, \n    livePaths, \n    fetchLivePaths, \n    createPath, \n    showIntersectingOnly, \n    toggleIntersectionFilter,\n    forceRefreshData\n  } = useContext(LocationContext);\n  \n  const { user } = useContext(AuthContext);\n  const { \n    sendChatRequest, \n    notifications, \n    currentChat, \n    openChat,\n    activeChats,\n    fetchActiveChats,\n    fetchNotifications\n  } = useContext(ChatContext);\n  \n  const [usersWithLocation, setUsersWithLocation] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [pathsWithCoordinates, setPathsWithCoordinates] = useState([]);\n  const [routeMode, setRouteMode] = useState(false);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [mapReady, setMapReady] = useState(false);\n  const [dataFetched, setDataFetched] = useState(false);\n  \n  const mapRef = useRef(null);\n  const mapCenter = useRef([37.7749, -122.4194]); // Default to San Francisco\n\n  // Create custom icon function\n  const createCustomIcon = (color) => {\n    return L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div class=\"marker-pin\" style=\"background-color: ${color};\"></div>`,\n      iconSize: [30, 42],\n      iconAnchor: [15, 42]\n    });\n  };\n\n  // Chat request handler\n  const handleChatRequest = (userId) => {\n    if (userId === user.id) {\n      // Don't allow chatting with yourself\n      return;\n    }\n    \n    sendChatRequest(userId)\n      .then((response) => {\n        console.log('Chat request sent successfully:', response);\n      })\n      .catch((error) => {\n        console.error('Failed to send chat request:', error);\n      });\n  };\n\n  // Handle refresh button click\n  const handleRefresh = async () => {\n    try {\n      setIsLoading(true);\n      console.log('Manually refreshing map data...');\n      \n      // Refresh notifications too\n      if (fetchNotifications) {\n        await fetchNotifications(true);\n      }\n      \n      // Only use forceRefreshData if it exists, otherwise fall back to the individual fetch functions\n      if (forceRefreshData) {\n        await forceRefreshData();\n      } else {\n        await Promise.all([fetchLiveUsers(), fetchLivePaths()]);\n      }\n      \n      setLastUpdated(new Date());\n      console.log('Map data refreshed manually');\n    } catch (error) {\n      console.error('Manual refresh failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Enhanced notification toggle with debugging\n  const toggleNotifications = () => {\n    console.log('Toggling notifications panel. Current state:', showNotifications);\n    // Refresh notifications when opening panel\n    if (!showNotifications && fetchNotifications) {\n      fetchNotifications(true).catch(err => console.error('Failed to refresh notifications:', err));\n    }\n    setShowNotifications(!showNotifications);\n  };\n\n  // Fetch active chats on component mount\n  useEffect(() => {\n    if (user && fetchActiveChats) {\n      fetchActiveChats();\n    }\n  }, [user, fetchActiveChats]);\n\n  // IMPORTANT: Two-step loading process - first fetch data, then initialize map\n  useEffect(() => {\n    if (!user) return;\n    \n    // Step 1: Fetch initial data\n    const loadInitialData = async () => {\n      setIsLoading(true);\n      console.log('Loading initial data...');\n      \n      try {\n        // Use Promise.all to load both data types in parallel\n        const [users, paths] = await Promise.all([fetchLiveUsers(), fetchLivePaths()]);\n        console.log(`Initial load complete: ${users?.length || 0} users, ${paths?.length || 0} paths`);\n        setLastUpdated(new Date());\n        setDataFetched(true);\n      } catch (error) {\n        console.error('Error in initial data load:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadInitialData();\n    \n    // Step 2: Setup regular polling with reduced frequency (1 minute)\n    const intervalId = setInterval(() => {\n      if (!isLoading) {\n        console.log('Periodic refresh at', new Date().toLocaleTimeString());\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n        setLastUpdated(new Date());\n      }\n    }, 60000); // Poll every minute\n    \n    return () => clearInterval(intervalId);\n  }, [user, fetchLiveUsers, fetchLivePaths]);\n\n  // Process user data with improved error handling\n  useEffect(() => {\n    if (!liveUsers || !Array.isArray(liveUsers)) {\n      console.warn('Invalid users data:', liveUsers);\n      setUsersWithLocation([]);\n      return;\n    }\n    \n    console.log(`Processing ${liveUsers.length} users`);\n    \n    // More robust validation to ensure coordinates are valid\n    const filtered = liveUsers.filter(u => {\n      if (!u) return false;\n      \n      // Convert to numbers and validate\n      const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n      const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n      \n      const isValid = \n        u.id && \n        u.username && \n        lat !== undefined &&\n        lng !== undefined &&\n        !isNaN(lat) && \n        !isNaN(lng) && \n        Math.abs(lat) <= 90 && \n        Math.abs(lng) <= 180;\n      \n      if (!isValid) {\n        console.warn(`Filtered out user with invalid data:`, u);\n      }\n      \n      return isValid;\n    });\n    \n    console.log(`Found ${filtered.length} users with valid location data`);\n    \n    // Update center point if we have valid users\n    if (filtered.length > 0) {\n      // Calculate average position for map center\n      const totalLat = filtered.reduce((sum, u) => {\n        const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n        return sum + lat;\n      }, 0);\n      \n      const totalLng = filtered.reduce((sum, u) => {\n        const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n        return sum + lng;\n      }, 0);\n      \n      mapCenter.current = [\n        totalLat / filtered.length,\n        totalLng / filtered.length\n      ];\n      \n      console.log(`Map center set to: [${mapCenter.current[0]}, ${mapCenter.current[1]}]`);\n    }\n    \n    setUsersWithLocation(filtered);\n    \n    // Mark map as ready once we have processed user data\n    setMapReady(true);\n  }, [liveUsers]);\n\n  // Process path data\n  useEffect(() => {\n    console.log('Processing path data update:', livePaths);\n    \n    if (livePaths && Array.isArray(livePaths)) {\n      console.log(`Processing ${livePaths.length} paths`);\n      \n    \n      \n      const parsed = livePaths.map(path => ({\n        ...path,\n        parsedRoute: parseRouteData(path.route)\n      })).filter(path => {\n        const isValid = path && path.parsedRoute && path.parsedRoute.length > 0;\n        if (!isValid) {\n          console.warn('Filtered out invalid path:', path?.id || 'unknown');\n        }\n        return isValid;\n      });\n      \n      console.log(`Processed ${parsed.length} valid paths with route data`);\n      \n      // If no valid paths were found, use test data in development\n      if (parsed.length === 0 && process.env.NODE_ENV !== 'production') {\n        console.log('No valid paths found, using test data');\n       \n        setPathsWithCoordinates(testPaths.map(path => ({\n          ...path,\n          parsedRoute: parseRouteData(path.route)\n        })));\n      } else {\n        setPathsWithCoordinates(parsed);\n      }\n    } else {\n      console.warn('No path data or invalid data:', livePaths);\n      \n      // For testing, use test data when we have no path data\n      if (process.env.NODE_ENV !== 'production' && user?.id) {\n        console.log('Using test path data since no real paths were found');\n        \n        setPathsWithCoordinates(testPaths.map(path => ({\n          ...path,\n          parsedRoute: parseRouteData(path.route)\n        })));\n      } else {\n        setPathsWithCoordinates([]);\n      }\n    }\n  }, [livePaths, user?.id]);\n\n  const toggleRouteMode = () => {\n    setRouteMode(!routeMode);\n    if (routeMode) {\n      setSelectedSource(null);\n    }\n  };\n\n  const handleCreatePath = (source, destination) => {\n    createPath(source, destination);\n    setRouteMode(false);\n    setSelectedSource(null);\n  };\n\n  const handleToggleIntersectionFilter = () => {\n    toggleIntersectionFilter();\n  };\n\n  const formatTime = (date) => {\n    if (!(date instanceof Date)) {\n      try {\n        date = new Date(date);\n      } catch (e) {\n        return 'Unknown';\n      }\n    }\n    return date.toLocaleTimeString();\n  };\n\n  // Calculate center point for map\n  let centerLat = mapCenter.current[0];\n  let centerLng = mapCenter.current[1];\n  \n  if (usersWithLocation.length > 0) {\n    // Calculate the average of all valid user positions\n    centerLat = usersWithLocation.reduce((sum, u) => {\n      const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n      return sum + lat;\n    }, 0) / usersWithLocation.length;\n    \n    centerLng = usersWithLocation.reduce((sum, u) => {\n      const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n      return sum + lng;\n    }, 0) / usersWithLocation.length;\n  }\n\n  // Show loading screen if we're still loading initial data\n  if (isLoading && !dataFetched) {\n    return (\n      <div className=\"map-loading-screen\">\n        <FontAwesomeIcon icon={faSpinner} spin />\n        <h3>Loading Map Data...</h3>\n        <p>Please wait while we fetch the latest user locations</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div className=\"map-header\">\n        <div className=\"map-title\">\n          <h3>Live User Map</h3>\n          <MapUserInfo user={user} />\n        </div>\n        <div className=\"map-controls\">\n          <div className=\"notification-controls\">\n            <NotificationButton \n              notificationCount={notifications ? notifications.length : 0}\n              onClick={toggleNotifications}\n            />\n            \n            {/* Manual refresh button */}\n            <button \n              className=\"refresh-button\"\n              onClick={handleRefresh}\n              title=\"Refresh map data\"\n              disabled={isLoading}\n            >\n              <FontAwesomeIcon icon={isLoading ? faSpinner : faSync} spin={isLoading} />\n            </button>\n            \n            {/* Filter button */}\n            <button\n              className={`filter-button ${showIntersectingOnly ? 'active' : ''}`}\n              onClick={handleToggleIntersectionFilter}\n              title=\"Show only paths that intersect with your route\"\n            >\n              {showIntersectingOnly ? 'Show All Paths' : 'Show Intersecting Only'}\n            </button>\n          </div>\n          \n          <button \n            className={`route-button ${routeMode ? 'active' : ''}`} \n            onClick={toggleRouteMode}\n          >\n            {routeMode ? 'Cancel Route' : 'Create Route'}\n          </button>\n          \n          {routeMode && !selectedSource && (\n            <div className=\"route-instructions\">Click on map to set starting point</div>\n          )}\n          \n          {routeMode && selectedSource && (\n            <div className=\"route-instructions\">Click on map to set destination</div>\n          )}\n          \n          <span className=\"last-updated\">\n            Last updated: {formatTime(lastUpdated)}\n          </span>\n        </div>\n      </div>\n      \n      {/* User count info */}\n      <div className=\"user-count-info\">\n        {usersWithLocation.length === 0 ? (\n          <div className=\"no-users-warning\">No users with location data are currently available</div>\n        ) : (\n          <div className=\"user-count\">\n            Showing {usersWithLocation.length} active users on the map\n          </div>\n        )}\n      </div>\n      \n      {/* Show notifications panel when toggled */}\n      {showNotifications && (\n        <NotificationsPanel onClose={() => setShowNotifications(false)} />\n      )}\n      \n      {/* Intersection filter info message */}\n      {showIntersectingOnly && (\n        <div className=\"intersection-filter-info\">\n          <i className=\"fas fa-info-circle\"></i> \n          Showing only paths that intersect with your route. \n          {pathsWithCoordinates.length === 0 && (\n            <span className=\"no-intersections\"> No intersecting paths found.</span>\n          )}\n        </div>\n      )}\n      \n      {/* Render the map only if we have data and are ready */}\n      {mapReady && (\n        <MapContainer \n          center={[centerLat, centerLng]} \n          zoom={4} \n          style={{ height: '600px', width: '100%' }}\n          ref={mapRef}\n          whenCreated={(map) => {\n            console.log(\"Map created with center:\", [centerLat, centerLng]);\n            // Force an update after map is created\n            setTimeout(() => {\n              map.invalidateSize();\n            }, 100);\n          }}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          \n          {/* Map click handler for route creation */}\n          <MapClickHandler \n            routeMode={routeMode} \n            selectedSource={selectedSource} \n            setSelectedSource={setSelectedSource} \n            createPath={handleCreatePath}\n          />\n          \n          {/* Display user markers */}\n          {usersWithLocation.map(u => {\n            // Convert latitude and longitude to numbers if they're strings\n            const lat = typeof u.latitude === 'string' ? parseFloat(u.latitude) : u.latitude;\n            const lng = typeof u.longitude === 'string' ? parseFloat(u.longitude) : u.longitude;\n            \n            // Create different icon based on if it's current user or not\n            const markerIcon = u.id === user?.id ? \n              createCustomIcon('#4285F4') : createCustomIcon('#FF5722');\n            \n            return (\n              <Marker \n                key={`user-${u.id}`} \n                position={[lat, lng]}\n                icon={markerIcon}\n              >\n                <Popup>\n                  <div className=\"user-popup\">\n                    <h3>{u.username}</h3>\n                    <div className=\"user-status\">\n                      <span className=\"status-dot\"></span>\n                      Online\n                    </div>\n                    <div className=\"user-location\">\n                      Coordinates: {lat.toFixed(4)}, {lng.toFixed(4)}\n                    </div>\n                    <div className=\"user-last-active\">\n                      Last active: {formatTime(u.last_active)}\n                    </div>\n                    {u.id === user?.id ? (\n                      <div className=\"current-user-tag\">This is you</div>\n                    ) : (\n                      <div className=\"chat-button-container\">\n                        <button \n                          className=\"chat-request-button\"\n                          onClick={() => handleChatRequest(u.id)}\n                        >\n                          Chat with {u.username}\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </Popup>\n              </Marker>\n            );\n          })}\n\n          {/* Display route source marker if in route mode */}\n          {routeMode && selectedSource && (\n            <Marker \n              position={[selectedSource.lat, selectedSource.lng]}\n              icon={createCustomIcon('#00C853')}\n            >\n              <Popup>Starting point</Popup>\n            </Marker>\n          )}\n          \n          {/* Display paths as polylines */}\n          {pathsWithCoordinates.map((path, idx) => (\n            <Polyline \n              key={`path-${path.id || idx}`} \n              positions={path.parsedRoute} \n              // Use a special color for intersecting paths\n              color={path.user_id === user?.id ? '#2196F3' : (path.intersects_with_user ? '#4CAF50' : '#FF5722')} \n              weight={4}\n              opacity={0.7}\n            >\n              <Popup>\n                <div className=\"path-popup\">\n                  <h4>Route Information</h4>\n                  <p><strong>User:</strong> {path.username || 'Unknown'}</p>\n                  <p><strong>Created:</strong> {formatTime(path.created_at)}</p>\n                  {path.intersects_with_user && (\n                    <p className=\"intersecting-path-notice\">This path intersects with your route!</p>\n                  )}\n                  {path.parsedRoute.length > 0 && (\n                    <>\n                      <p><strong>From:</strong> {path.parsedRoute[0][0].toFixed(4)}, {path.parsedRoute[0][1].toFixed(4)}</p>\n                      <p><strong>To:</strong> {path.parsedRoute[path.parsedRoute.length-1][0].toFixed(4)}, {path.parsedRoute[path.parsedRoute.length-1][1].toFixed(4)}</p>\n                      <p><strong>Points:</strong> {path.parsedRoute.length}</p>\n                    </>\n                  )}\n                </div>\n              </Popup>\n            </Polyline>\n          ))}\n\n          {/* Map bounds updater component */}\n          <MapBoundsUpdater \n            users={usersWithLocation} \n            paths={pathsWithCoordinates} \n          />\n        </MapContainer>\n      )}\n      \n      <div className=\"map-legend\">\n        <h4>Map Legend</h4>\n        <div className=\"legend-items\">\n          <div className=\"legend-item\">\n            <div className=\"legend-marker\" style={{ backgroundColor: '#4285F4' }}></div>\n            <span>Your location</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-marker\" style={{ backgroundColor: '#FF5722' }}></div>\n            <span>Other users</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#2196F3' }}></div>\n            <span>Your path</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#4CAF50' }}></div>\n            <span>Intersecting paths</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#FF5722' }}></div>\n            <span>Other users' paths</span>\n          </div>\n          {routeMode && (\n            <div className=\"legend-item\">\n              <div className=\"legend-marker\" style={{ backgroundColor: '#00C853' }}></div>\n              <span>Selected starting point</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Display path information and active chats panel */}\n      <div className=\"map-info-panel\">\n        <h4>Statistics</h4>\n        <div className=\"map-stats\">\n          <div className=\"stat-item\">\n            <strong>Active Users:</strong> {usersWithLocation.length}\n          </div>\n          <div className=\"stat-item\">\n            <strong>Active Paths:</strong> {pathsWithCoordinates.length}\n          </div>\n          <div className=\"stat-item\">\n            <strong>Last Updated:</strong> {formatTime(lastUpdated)}\n          </div>\n          {showIntersectingOnly && (\n            <div className=\"stat-item\">\n              <strong>Filter:</strong> Showing intersecting paths only\n            </div>\n          )}\n        </div>\n        \n        {/* Active Chats Panel */}\n        <div className=\"active-chats\">\n          <h4>\n            <FontAwesomeIcon icon={faComments} /> Active Chats\n          </h4>\n          <div className=\"chats-list\">\n            {activeChats && activeChats.length > 0 ? (\n              activeChats.map(chat => (\n                <div \n                  key={chat.id} \n                  className=\"chat-item\"\n                  onClick={() => openChat(chat.id)}\n                >\n                  <div className=\"chat-user\">\n                    {chat.otherParticipants && chat.otherParticipants.length > 0 \n                      ? chat.otherParticipants[0].username \n                      : 'Unknown User'}\n                  </div>\n                  {chat.unreadCount > 0 && (\n                    <span className=\"unread-badge\">{chat.unreadCount}</span>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"no-chats\">No active chats</div>\n            )}\n          </div>\n        </div>\n        \n        {pathsWithCoordinates.length > 0 && (\n          <div className=\"recent-paths\">\n            <h4>Recent Paths</h4>\n            <div className=\"paths-list\">\n              {pathsWithCoordinates.slice(0, 5).map((path, idx) => (\n                <div key={idx} className={`path-item ${path.intersects_with_user ? 'intersecting' : ''}`}>\n                  <div className=\"path-header\">\n                    <strong>{path.username || 'Unknown user'}</strong>\n                    <span>{formatTime(path.created_at)}</span>\n                  </div>\n                  <div className=\"path-details\">\n                    {path.intersects_with_user && (\n                      <div className=\"intersect-badge\">Intersects with your route</div>\n                    )}\n                    {path.parsedRoute.length > 0 && (\n                      <>\n                        <small>\n                          From: {path.parsedRoute[0][0].toFixed(4)}, {path.parsedRoute[0][1].toFixed(4)}\n                        </small>\n                        <small>\n                          To: {path.parsedRoute[path.parsedRoute.length-1][0].toFixed(4)}, {path.parsedRoute[path.parsedRoute.length-1][1].toFixed(4)}\n                        </small>\n                        <small>\n                          Route Points: {path.parsedRoute.length}\n                        </small>\n                      </>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Chat dialog */}\n      {currentChat && <ChatDialog />}\n    </div>\n  );\n};\n\nexport default UserLocationMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}