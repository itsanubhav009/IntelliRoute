{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [chatAcceptanceStatus, setChatAcceptanceStatus] = useState(null);\n\n  // Add these to track last request times\n  const lastRequest = useRef({\n    chat: 0,\n    notifications: 0,\n    messages: 0\n  });\n\n  // Add this to prevent concurrent requests\n  const pendingRequests = useRef({\n    chat: false,\n    notifications: false,\n    messages: false\n  });\n\n  // Add the missing enforceApiDelay function\n  const enforceApiDelay = useCallback(async (requestType, minDelay = 2000) => {\n    if (pendingRequests.current[requestType]) {\n      console.log(`${requestType} request already in progress, skipping`);\n      return false;\n    }\n    const now = Date.now();\n    if (now - lastRequest.current[requestType] < minDelay) {\n      console.log(`Throttling ${requestType} request, too soon`);\n      return false;\n    }\n    pendingRequests.current[requestType] = true;\n    lastRequest.current[requestType] = now;\n    return true;\n  }, []);\n\n  // Throttled fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n\n    // Don't allow concurrent requests\n    if (pendingRequests.current.notifications) {\n      console.log('Notification request already in progress, skipping');\n      return notifications;\n    }\n    const now = Date.now();\n    // Only fetch if it's been more than 10 seconds since last check or forced\n    if (!force && now - lastRequest.current.notifications < 10000) {\n      return notifications; // Return cached notifications\n    }\n    try {\n      pendingRequests.current.notifications = true;\n      console.log('Fetching notifications...');\n      const response = await api.get('/chat/notifications');\n      lastRequest.current.notifications = now;\n\n      // Only update state if the notifications have changed\n      const newNotifications = response.data.notifications || [];\n      if (JSON.stringify(newNotifications) !== JSON.stringify(notifications)) {\n        setNotifications(newNotifications);\n      }\n      return newNotifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Throttled fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n\n    // Don't allow concurrent requests\n    if (pendingRequests.current.chat) {\n      console.log('Chat request already in progress, skipping');\n      return activeChats;\n    }\n    const now = Date.now();\n    // Only fetch if it's been more than 10 seconds since last check or forced\n    if (!force && now - lastRequest.current.chat < 10000) {\n      return activeChats; // Return cached chats\n    }\n    try {\n      pendingRequests.current.chat = true;\n      setLoading(true);\n      console.log('Fetching active chats...');\n      const response = await api.get('/chat/active');\n      lastRequest.current.chat = now;\n      const newChats = response.data.chats || [];\n\n      // Only update state if the chats have changed\n      if (JSON.stringify(newChats) !== JSON.stringify(activeChats)) {\n        console.log('Updating active chats, found changes');\n        setActiveChats(newChats);\n      } else {\n        console.log('No changes in active chats');\n      }\n      return newChats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chat = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async recipientId => {\n    if (!user || !recipientId) return;\n    try {\n      setLoading(true);\n      console.log('Sending chat request to:', recipientId);\n      const response = await api.post('/chat/request', {\n        recipientId\n      });\n\n      // Force refresh active chats\n      await fetchActiveChats(true);\n\n      // Store the chat request ID for monitoring\n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request - IMPROVED VERSION\n  const acceptChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      setChatAcceptanceStatus({\n        status: 'pending',\n        message: 'Accepting chat request...'\n      });\n      console.log('Accepting chat request:', chatRoomId);\n      const response = await api.post('/chat/accept', {\n        chatRoomId\n      });\n      console.log('Accept response:', response.data);\n\n      // Force refresh notifications first\n      await fetchNotifications(true);\n\n      // Then fetch active chats to get the updated chat list\n      const updatedChats = await fetchActiveChats(true);\n      console.log('Looking for chat room in active chats');\n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      if (acceptedChat) {\n        console.log('Found accepted chat, opening it:', acceptedChat);\n        setCurrentChat(acceptedChat);\n\n        // Fetch messages for this chat\n        await fetchMessages(chatRoomId);\n        setChatAcceptanceStatus({\n          status: 'success',\n          message: 'Chat request accepted successfully!'\n        });\n\n        // Clear status after a delay\n        setTimeout(() => {\n          setChatAcceptanceStatus(null);\n        }, 3000);\n        return {\n          success: true,\n          chat: acceptedChat\n        };\n      } else {\n        console.error('Accepted chat not found in active chats. Will retry...');\n\n        // Update status\n        setChatAcceptanceStatus({\n          status: 'retrying',\n          message: 'Looking for the chat room...'\n        });\n\n        // Retry once after a delay\n        return new Promise(resolve => {\n          setTimeout(async () => {\n            const retryChats = await fetchActiveChats(true);\n            const retryChat = retryChats.find(c => c.id === chatRoomId);\n            if (retryChat) {\n              console.log('Found chat on retry');\n              setCurrentChat(retryChat);\n              await fetchMessages(chatRoomId);\n              setChatAcceptanceStatus({\n                status: 'success',\n                message: 'Chat request accepted successfully!'\n              });\n\n              // Clear status after a delay\n              setTimeout(() => {\n                setChatAcceptanceStatus(null);\n              }, 3000);\n              resolve({\n                success: true,\n                chat: retryChat\n              });\n            } else {\n              setChatAcceptanceStatus({\n                status: 'error',\n                message: 'Could not find the chat room after accepting.'\n              });\n\n              // Clear status after a delay\n              setTimeout(() => {\n                setChatAcceptanceStatus(null);\n              }, 5000);\n              resolve({\n                success: false,\n                error: 'Chat room not found after acceptance'\n              });\n            }\n          }, 2000);\n        });\n      }\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      setChatAcceptanceStatus({\n        status: 'error',\n        message: 'Failed to accept chat request: ' + (error.message || 'Unknown error')\n      });\n\n      // Clear status after a delay\n      setTimeout(() => {\n        setChatAcceptanceStatus(null);\n      }, 5000);\n      setError('Failed to accept chat request: ' + (error.message || 'Unknown error'));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Declining chat request: ${chatRoomId}...`);\n\n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const response = await api.post('/chat/decline', {\n        chatRoomId\n      });\n\n      // Force refresh notifications\n      await fetchNotifications(true);\n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat with enhanced error handling\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    try {\n      console.log('Sending message to room:', chatRoomId);\n      const response = await api.post('/chat/send', {\n        chatRoomId,\n        message\n      });\n\n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {\n        ...newMessage,\n        profiles: {\n          username: user.username\n        }\n      }]);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message: ' + error.message);\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat with better error handling and throttling\n  const fetchMessages = useCallback(async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n\n    // If we already have an active chat and it's not forced, enforce delay\n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages; // Return cached messages\n    }\n    try {\n      setLoading(true);\n      console.log('Fetching messages for room:', chatRoomId);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      setMessages(response.data.messages || []);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages: ' + error.message);\n      setMessages([]);\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  }, [user, messages, currentChat, enforceApiDelay]);\n\n  // Open a chat - IMPROVED VERSION\n  const openChat = useCallback(async chatRoomId => {\n    try {\n      setLoading(true);\n      console.log('Opening chat:', chatRoomId);\n\n      // First check if this chat is in our current active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n\n      // If not found, try fetching fresh data\n      if (!chat) {\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n\n        // Check if the user has joined this chat (important for handling incoming requests)\n        if (!chat.hasJoined) {\n          console.log('User has not joined this chat yet, accepting chat request');\n\n          // If the user hasn't joined, we need to accept the chat request first\n          await acceptChatRequest(chatRoomId);\n        } else {\n          await fetchMessages(chatRoomId);\n        }\n        return {\n          success: true,\n          chat\n        };\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found');\n        return {\n          success: false,\n          error: 'Chat not found'\n        };\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat: ' + error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChats, fetchActiveChats, fetchMessages, acceptChatRequest]);\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n\n  // Handle notification click\n  const handleNotificationClick = useCallback(async notification => {\n    if (!notification) return;\n    try {\n      // Mark the notification as read\n      await api.post('/chat/markNotificationRead', {\n        notificationId: notification.id\n      });\n\n      // If it's a chat request or chat acceptance, open the chat\n      if (notification.type === 'chat_request' || notification.type === 'chat_accepted' || notification.type === 'new_message') {\n        await openChat(notification.chat_room_id);\n      }\n\n      // Refresh notifications to remove the read one\n      await fetchNotifications(true);\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n    }\n  }, [openChat, fetchNotifications]);\n\n  // Set up polling at a reasonable rate (once per 10 seconds)\n  useEffect(() => {\n    if (user) {\n      // Initial load\n      fetchNotifications(true);\n      fetchActiveChats(true);\n\n      // Check for any pending chat requests\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        console.log('Found pending chat request, checking status:', pendingChatId);\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.hasJoined) {\n            console.log('Pending chat has been accepted, opening');\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n\n      // Set up polling interval - MUCH less frequent to prevent flooding\n      const intervalId = setInterval(() => {\n        // Poll for notifications and active chats\n        fetchNotifications();\n\n        // If we have a current chat open, fetch its messages too\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        } else {\n          // Only poll for active chats if we don't have an open chat\n          fetchActiveChats();\n        }\n      }, 10000); // Poll every 10 seconds instead of flooding\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user, currentChat, fetchNotifications, fetchActiveChats, fetchMessages, openChat]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      activeChats,\n      notifications,\n      currentChat,\n      messages,\n      loading,\n      error,\n      chatAcceptanceStatus,\n      sendChatRequest,\n      acceptChatRequest,\n      declineChatRequest,\n      sendMessage,\n      fetchMessages,\n      openChat,\n      closeChat,\n      fetchActiveChats,\n      fetchNotifications,\n      handleNotificationClick\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"OeUON0BHk4W3vOpEwsYhz4Pk3Pg=\");\n_c = ChatProvider;\nexport default ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","useRef","api","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","activeChats","setActiveChats","notifications","setNotifications","currentChat","setCurrentChat","messages","setMessages","loading","setLoading","error","setError","chatAcceptanceStatus","setChatAcceptanceStatus","lastRequest","chat","pendingRequests","enforceApiDelay","requestType","minDelay","current","console","log","now","Date","fetchNotifications","force","response","get","newNotifications","data","JSON","stringify","fetchActiveChats","newChats","chats","sendChatRequest","recipientId","post","localStorage","setItem","chatRoomId","_error$response","_error$response$data","message","acceptChatRequest","status","updatedChats","acceptedChat","find","c","id","fetchMessages","setTimeout","success","Promise","resolve","retryChats","retryChat","declineChatRequest","toISOString","sendMessage","newMessage","chatMessage","prev","profiles","username","openChat","hasJoined","closeChat","handleNotificationClick","notification","notificationId","type","chat_room_id","pendingChatId","getItem","then","pendingChat","removeItem","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [chatAcceptanceStatus, setChatAcceptanceStatus] = useState(null);\n  \n  // Add these to track last request times\n  const lastRequest = useRef({\n    chat: 0,\n    notifications: 0,\n    messages: 0\n  });\n  \n  // Add this to prevent concurrent requests\n  const pendingRequests = useRef({\n    chat: false,\n    notifications: false,\n    messages: false\n  });\n\n  // Add the missing enforceApiDelay function\n  const enforceApiDelay = useCallback(async (requestType, minDelay = 2000) => {\n    if (pendingRequests.current[requestType]) {\n      console.log(`${requestType} request already in progress, skipping`);\n      return false;\n    }\n    \n    const now = Date.now();\n    if (now - lastRequest.current[requestType] < minDelay) {\n      console.log(`Throttling ${requestType} request, too soon`);\n      return false;\n    }\n    \n    pendingRequests.current[requestType] = true;\n    lastRequest.current[requestType] = now;\n    return true;\n  }, []);\n\n  // Throttled fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    // Don't allow concurrent requests\n    if (pendingRequests.current.notifications) {\n      console.log('Notification request already in progress, skipping');\n      return notifications;\n    }\n    \n    const now = Date.now();\n    // Only fetch if it's been more than 10 seconds since last check or forced\n    if (!force && now - lastRequest.current.notifications < 10000) {\n      return notifications; // Return cached notifications\n    }\n    \n    try {\n      pendingRequests.current.notifications = true;\n      console.log('Fetching notifications...');\n      const response = await api.get('/chat/notifications');\n      lastRequest.current.notifications = now;\n      \n      // Only update state if the notifications have changed\n      const newNotifications = response.data.notifications || [];\n      if (JSON.stringify(newNotifications) !== JSON.stringify(notifications)) {\n        setNotifications(newNotifications);\n      }\n      \n      return newNotifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Throttled fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    // Don't allow concurrent requests\n    if (pendingRequests.current.chat) {\n      console.log('Chat request already in progress, skipping');\n      return activeChats;\n    }\n    \n    const now = Date.now();\n    // Only fetch if it's been more than 10 seconds since last check or forced\n    if (!force && now - lastRequest.current.chat < 10000) {\n      return activeChats; // Return cached chats\n    }\n    \n    try {\n      pendingRequests.current.chat = true;\n      setLoading(true);\n\n      console.log('Fetching active chats...');\n      const response = await api.get('/chat/active');\n      lastRequest.current.chat = now;\n      \n      const newChats = response.data.chats || [];\n      \n      // Only update state if the chats have changed\n      if (JSON.stringify(newChats) !== JSON.stringify(activeChats)) {\n        console.log('Updating active chats, found changes');\n        setActiveChats(newChats);\n      } else {\n        console.log('No changes in active chats');\n      }\n      \n      return newChats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chat = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async (recipientId) => {\n    if (!user || !recipientId) return;\n    \n    try {\n      setLoading(true);\n      console.log('Sending chat request to:', recipientId);\n      const response = await api.post('/chat/request', { recipientId });\n      \n      // Force refresh active chats\n      await fetchActiveChats(true);\n      \n      // Store the chat request ID for monitoring\n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (error.response?.data?.message || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request - IMPROVED VERSION\n  const acceptChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      setChatAcceptanceStatus({\n        status: 'pending',\n        message: 'Accepting chat request...'\n      });\n      \n      console.log('Accepting chat request:', chatRoomId);\n      \n      const response = await api.post('/chat/accept', { chatRoomId });\n      console.log('Accept response:', response.data);\n      \n      // Force refresh notifications first\n      await fetchNotifications(true);\n      \n      // Then fetch active chats to get the updated chat list\n      const updatedChats = await fetchActiveChats(true);\n      \n      console.log('Looking for chat room in active chats');\n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      \n      if (acceptedChat) {\n        console.log('Found accepted chat, opening it:', acceptedChat);\n        setCurrentChat(acceptedChat);\n        \n        // Fetch messages for this chat\n        await fetchMessages(chatRoomId);\n        \n        setChatAcceptanceStatus({\n          status: 'success',\n          message: 'Chat request accepted successfully!'\n        });\n        \n        // Clear status after a delay\n        setTimeout(() => {\n          setChatAcceptanceStatus(null);\n        }, 3000);\n        \n        return {\n          success: true,\n          chat: acceptedChat\n        };\n      } else {\n        console.error('Accepted chat not found in active chats. Will retry...');\n        \n        // Update status\n        setChatAcceptanceStatus({\n          status: 'retrying',\n          message: 'Looking for the chat room...'\n        });\n        \n        // Retry once after a delay\n        return new Promise((resolve) => {\n          setTimeout(async () => {\n            const retryChats = await fetchActiveChats(true);\n            const retryChat = retryChats.find(c => c.id === chatRoomId);\n            \n            if (retryChat) {\n              console.log('Found chat on retry');\n              setCurrentChat(retryChat);\n              await fetchMessages(chatRoomId);\n              \n              setChatAcceptanceStatus({\n                status: 'success',\n                message: 'Chat request accepted successfully!'\n              });\n              \n              // Clear status after a delay\n              setTimeout(() => {\n                setChatAcceptanceStatus(null);\n              }, 3000);\n              \n              resolve({\n                success: true,\n                chat: retryChat\n              });\n            } else {\n              setChatAcceptanceStatus({\n                status: 'error',\n                message: 'Could not find the chat room after accepting.'\n              });\n              \n              // Clear status after a delay\n              setTimeout(() => {\n                setChatAcceptanceStatus(null);\n              }, 5000);\n              \n              resolve({\n                success: false,\n                error: 'Chat room not found after acceptance'\n              });\n            }\n          }, 2000);\n        });\n      }\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      \n      setChatAcceptanceStatus({\n        status: 'error',\n        message: 'Failed to accept chat request: ' + (error.message || 'Unknown error')\n      });\n      \n      // Clear status after a delay\n      setTimeout(() => {\n        setChatAcceptanceStatus(null);\n      }, 5000);\n      \n      setError('Failed to accept chat request: ' + (error.message || 'Unknown error'));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Declining chat request: ${chatRoomId}...`);\n      \n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const response = await api.post('/chat/decline', { chatRoomId });\n      \n      // Force refresh notifications\n      await fetchNotifications(true);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat with enhanced error handling\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    \n    try {\n      console.log('Sending message to room:', chatRoomId);\n\n      const response = await api.post('/chat/send', { chatRoomId, message });\n      \n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [\n        ...prev, \n        {...newMessage, profiles: { username: user.username }}\n      ]);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message: ' + error.message);\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat with better error handling and throttling\n  const fetchMessages = useCallback(async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n    \n    // If we already have an active chat and it's not forced, enforce delay\n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages; // Return cached messages\n    }\n    \n    try {\n      setLoading(true);\n\n      console.log('Fetching messages for room:', chatRoomId);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      \n      setMessages(response.data.messages || []);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages: ' + error.message);\n      setMessages([]);\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  }, [user, messages, currentChat, enforceApiDelay]);\n\n  // Open a chat - IMPROVED VERSION\n  const openChat = useCallback(async (chatRoomId) => {\n    try {\n      setLoading(true);\n      console.log('Opening chat:', chatRoomId);\n      \n      // First check if this chat is in our current active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      \n      // If not found, try fetching fresh data\n      if (!chat) {\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      \n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n        \n        // Check if the user has joined this chat (important for handling incoming requests)\n        if (!chat.hasJoined) {\n          console.log('User has not joined this chat yet, accepting chat request');\n          \n          // If the user hasn't joined, we need to accept the chat request first\n          await acceptChatRequest(chatRoomId);\n        } else {\n          await fetchMessages(chatRoomId);\n        }\n        \n        return { success: true, chat };\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found');\n        return {\n          success: false,\n          error: 'Chat not found'\n        };\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat: ' + error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChats, fetchActiveChats, fetchMessages, acceptChatRequest]);\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n  \n  // Handle notification click\n  const handleNotificationClick = useCallback(async (notification) => {\n    if (!notification) return;\n    \n    try {\n      // Mark the notification as read\n      await api.post('/chat/markNotificationRead', { notificationId: notification.id });\n      \n      // If it's a chat request or chat acceptance, open the chat\n      if (notification.type === 'chat_request' || notification.type === 'chat_accepted' || notification.type === 'new_message') {\n        await openChat(notification.chat_room_id);\n      }\n      \n      // Refresh notifications to remove the read one\n      await fetchNotifications(true);\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n    }\n  }, [openChat, fetchNotifications]);\n\n  // Set up polling at a reasonable rate (once per 10 seconds)\n  useEffect(() => {\n    if (user) {\n      // Initial load\n      fetchNotifications(true);\n      fetchActiveChats(true);\n      \n      // Check for any pending chat requests\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        console.log('Found pending chat request, checking status:', pendingChatId);\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.hasJoined) {\n            console.log('Pending chat has been accepted, opening');\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n      \n      // Set up polling interval - MUCH less frequent to prevent flooding\n      const intervalId = setInterval(() => {\n        // Poll for notifications and active chats\n        fetchNotifications();\n        \n        // If we have a current chat open, fetch its messages too\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        } else {\n          // Only poll for active chats if we don't have an open chat\n          fetchActiveChats();\n        }\n      }, 10000); // Poll every 10 seconds instead of flooding\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user, currentChat, fetchNotifications, fetchActiveChats, fetchMessages, openChat]);\n  \n  return (\n    <ChatContext.Provider\n      value={{\n        activeChats,\n        notifications,\n        currentChat,\n        messages,\n        loading,\n        error,\n        chatAcceptanceStatus,\n        sendChatRequest,\n        acceptChatRequest,\n        declineChatRequest,\n        sendMessage,\n        fetchMessages,\n        openChat,\n        closeChat,\n        fetchActiveChats,\n        fetchNotifications,\n        handleNotificationClick\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}