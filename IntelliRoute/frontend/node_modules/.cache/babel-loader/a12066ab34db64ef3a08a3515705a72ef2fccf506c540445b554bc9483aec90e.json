{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [usersAlongPath, setUsersAlongPath] = useState([]); // New state for users along path\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius\n\n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0,\n    usersAlongPath: 0\n  });\n\n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false,\n    usersAlongPath: false\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('Creating path between:', source, destination);\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths(true); // Force refresh\n\n      // Also fetch users along the new path\n      await fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Update proximity radius for user filtering\n  const updateProximityRadius = radius => {\n    console.log(`Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n\n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n\n    return newValue;\n  };\n\n  // Fetch paths data with aggressive throttling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      console.log('Path request already in progress, skipping');\n      return livePaths;\n    }\n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check\n    if (!force && now - fetchTimers.current.paths < 60000) {\n      console.log(`Skipping fetchLivePaths - too soon (${Math.round((now - fetchTimers.current.paths) / 1000)}s)`);\n      return livePaths;\n    }\n    try {\n      var _response$data$data;\n      requestInProgress.current.paths = true;\n      setIsLoading(true);\n      console.log(`Fetching paths with intersection filter: ${intersectOnly}`);\n\n      // Only fetch the current user's path\n      const response = await api.get(`/api/path/live?intersectOnly=${intersectOnly}`);\n      console.log(`Fetched ${((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0} paths`);\n      fetchTimers.current.paths = now;\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      return livePaths;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // New function: Fetch users along the current user's path\n  const fetchUsersAlongPath = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      console.log('Users along path request already in progress, skipping');\n      return usersAlongPath;\n    }\n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check\n    if (!force && now - fetchTimers.current.usersAlongPath < 60000) {\n      console.log(`Skipping fetchUsersAlongPath - too soon (${Math.round((now - fetchTimers.current.usersAlongPath) / 1000)}s)`);\n      return usersAlongPath;\n    }\n    try {\n      var _response$data$data2;\n      requestInProgress.current.usersAlongPath = true;\n      setIsLoading(true);\n      console.log(`Fetching users along current path with radius: ${proximityRadius}m`);\n      const response = await api.get(`/api/location/along-my-path?radius=${proximityRadius}`);\n      console.log(`Found ${((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.length) || 0} users along the path`);\n      fetchTimers.current.usersAlongPath = now;\n      setUsersAlongPath(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        console.log('No path found for current user');\n        setUsersAlongPath([]);\n        return [];\n      } else {\n        console.error('Error fetching users along path:', error);\n        setError('Failed to fetch users along path');\n        return usersAlongPath;\n      }\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Fetch all active users' locations with aggressive throttling\n  const fetchLiveUsers = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      console.log('User request already in progress, skipping');\n      return liveUsers;\n    }\n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check\n    if (!force && now - fetchTimers.current.users < 60000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users) / 1000)}s)`);\n      return liveUsers;\n    }\n    try {\n      requestInProgress.current.users = true;\n      setIsLoading(true);\n      console.log('Fetching live users...');\n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n\n      // Process and validate the data before setting state\n      const userData = response.data.data || [];\n      console.log(`Got ${userData.length} users from API`);\n\n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        const isValid = !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n        if (!isValid && u) {\n          console.warn(`Filtered out user with invalid coordinates:`, u.username, u.latitude, u.longitude);\n        }\n        return isValid;\n      });\n      console.log(`${validUsers.length} users have valid coordinates`);\n      setLiveUsers(validUsers);\n      setLastUpdated(new Date());\n      return validUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n      return liveUsers;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.users = false;\n    }\n  };\n\n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0,\n        usersAlongPath: 0\n      };\n\n      // First get users\n      const userData = await fetchLiveUsers(true);\n      console.log(\"Users refreshed:\", (userData === null || userData === void 0 ? void 0 : userData.length) || 0);\n\n      // Then get paths\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"Paths refreshed:\", (pathsData === null || pathsData === void 0 ? void 0 : pathsData.length) || 0);\n\n      // Then get users along path\n      const usersAlongPathData = await fetchUsersAlongPath(true);\n      console.log(\"Users along path refreshed:\", (usersAlongPathData === null || usersAlongPathData === void 0 ? void 0 : usersAlongPathData.length) || 0);\n      setLastUpdated(new Date());\n      return {\n        users: userData,\n        paths: pathsData,\n        usersAlongPath: usersAlongPathData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup and much less frequent polling\n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n\n      // Do initial data load\n      const initialLoad = async () => {\n        try {\n          await fetchLiveUsers(true);\n          await fetchLivePaths(true);\n          await fetchUsersAlongPath(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      initialLoad();\n\n      // Set up polling with MUCH LONGER interval (2 minutes instead of 30 seconds)\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n        fetchUsersAlongPath().catch(err => console.error('Failed to fetch users along path:', err));\n      }, 120000); // Increased to 120 seconds (2 minutes) instead of 30 seconds\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  // Effect to refetch users along path when radius changes\n  useEffect(() => {\n    if (user) {\n      fetchUsersAlongPath(true);\n    }\n  }, [proximityRadius]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      usersAlongPath,\n      // New state for users along path\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      proximityRadius,\n      // New state for proximity radius\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      fetchUsersAlongPath,\n      // New function to fetch users along path\n      toggleIntersectionFilter,\n      updateProximityRadius,\n      // New function to update radius\n      getCurrentPosition,\n      forceRefreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"1LV8ETz4U434UiO1DUMOP1uehQM=\");\n_c = LocationProvider;\nexport default LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","usersAlongPath","setUsersAlongPath","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","proximityRadius","setProximityRadius","fetchTimers","users","paths","requestInProgress","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","fetchUsersAlongPath","status","warn","_error$response","_error$response$data","message","updateProximityRadius","radius","toggleIntersectionFilter","newValue","force","intersectOnly","current","now","Math","round","_response$data$data","get","length","_response$data$data2","fetchLiveUsers","userData","validUsers","filter","u","lat","parseFloat","lng","isValid","isNaN","abs","username","getCurrentPosition","navigator","geolocation","coords","catch","err","forceRefreshData","pathsData","usersAlongPathData","initialLoad","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [usersAlongPath, setUsersAlongPath] = useState([]); // New state for users along path\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius\n  \n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0,\n    usersAlongPath: 0\n  });\n  \n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false,\n    usersAlongPath: false\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log('Creating path between:', source, destination);\n      \n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Refresh paths after creating a new one\n      await fetchLivePaths(true); // Force refresh\n      \n      // Also fetch users along the new path\n      await fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Update proximity radius for user filtering\n  const updateProximityRadius = (radius) => {\n    console.log(`Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n    \n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n    \n    return newValue;\n  };\n\n  // Fetch paths data with aggressive throttling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      console.log('Path request already in progress, skipping');\n      return livePaths;\n    }\n    \n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check\n    if (!force && now - fetchTimers.current.paths < 60000) {\n      console.log(`Skipping fetchLivePaths - too soon (${Math.round((now - fetchTimers.current.paths)/1000)}s)`);\n      return livePaths;\n    }\n    \n    try {\n      requestInProgress.current.paths = true;\n      setIsLoading(true);\n      console.log(`Fetching paths with intersection filter: ${intersectOnly}`);\n      \n      // Only fetch the current user's path\n      const response = await api.get(`/api/path/live?intersectOnly=${intersectOnly}`);\n      \n      console.log(`Fetched ${response.data.data?.length || 0} paths`);\n      fetchTimers.current.paths = now;\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      return livePaths;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // New function: Fetch users along the current user's path\n  const fetchUsersAlongPath = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      console.log('Users along path request already in progress, skipping');\n      return usersAlongPath;\n    }\n    \n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check\n    if (!force && now - fetchTimers.current.usersAlongPath < 60000) {\n      console.log(`Skipping fetchUsersAlongPath - too soon (${Math.round((now - fetchTimers.current.usersAlongPath)/1000)}s)`);\n      return usersAlongPath;\n    }\n    \n    try {\n      requestInProgress.current.usersAlongPath = true;\n      setIsLoading(true);\n      console.log(`Fetching users along current path with radius: ${proximityRadius}m`);\n      \n      const response = await api.get(`/api/location/along-my-path?radius=${proximityRadius}`);\n      \n      console.log(`Found ${response.data.data?.length || 0} users along the path`);\n      fetchTimers.current.usersAlongPath = now;\n      setUsersAlongPath(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        console.log('No path found for current user');\n        setUsersAlongPath([]);\n        return [];\n      } else {\n        console.error('Error fetching users along path:', error);\n        setError('Failed to fetch users along path');\n        return usersAlongPath;\n      }\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Fetch all active users' locations with aggressive throttling\n  const fetchLiveUsers = async (force = false) => {\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      console.log('User request already in progress, skipping');\n      return liveUsers;\n    }\n    \n    const now = Date.now();\n    // Only fetch if forced or it's been at least 60 seconds since last check\n    if (!force && now - fetchTimers.current.users < 60000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users)/1000)}s)`);\n      return liveUsers;\n    }\n    \n    try {\n      requestInProgress.current.users = true;\n      setIsLoading(true);\n      console.log('Fetching live users...');\n      \n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n      \n      // Process and validate the data before setting state\n      const userData = response.data.data || [];\n      console.log(`Got ${userData.length} users from API`);\n      \n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        const isValid = !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n        \n        if (!isValid && u) {\n          console.warn(`Filtered out user with invalid coordinates:`, u.username, u.latitude, u.longitude);\n        }\n        \n        return isValid;\n      });\n      \n      console.log(`${validUsers.length} users have valid coordinates`);\n      setLiveUsers(validUsers);\n      setLastUpdated(new Date());\n      return validUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n      return liveUsers;\n    } finally {\n      setIsLoading(false);\n      requestInProgress.current.users = false;\n    }\n  };\n  \n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0,\n        usersAlongPath: 0\n      };\n      \n      // First get users\n      const userData = await fetchLiveUsers(true);\n      console.log(\"Users refreshed:\", userData?.length || 0);\n      \n      // Then get paths\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"Paths refreshed:\", pathsData?.length || 0);\n      \n      // Then get users along path\n      const usersAlongPathData = await fetchUsersAlongPath(true);\n      console.log(\"Users along path refreshed:\", usersAlongPathData?.length || 0);\n      \n      setLastUpdated(new Date());\n      return { \n        users: userData, \n        paths: pathsData,\n        usersAlongPath: usersAlongPathData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup and much less frequent polling\n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n      \n      // Do initial data load\n      const initialLoad = async () => {\n        try {\n          await fetchLiveUsers(true);\n          await fetchLivePaths(true);\n          await fetchUsersAlongPath(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      \n      initialLoad();\n      \n      // Set up polling with MUCH LONGER interval (2 minutes instead of 30 seconds)\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n        fetchUsersAlongPath().catch(err => console.error('Failed to fetch users along path:', err));\n      }, 120000); // Increased to 120 seconds (2 minutes) instead of 30 seconds\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  // Effect to refetch users along path when radius changes\n  useEffect(() => {\n    if (user) {\n      fetchUsersAlongPath(true);\n    }\n  }, [proximityRadius]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        usersAlongPath, // New state for users along path\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        proximityRadius, // New state for proximity radius\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        fetchUsersAlongPath, // New function to fetch users along path\n        toggleIntersectionFilter,\n        updateProximityRadius, // New function to update radius\n        getCurrentPosition,\n        forceRefreshData\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n\nexport default LocationProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACrF,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,eAAe,gBAAGT,aAAa,CAAC,CAAC;AAE9C,OAAO,MAAMU,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM;IAAEC;EAAK,CAAC,GAAGV,UAAU,CAACG,WAAW,CAAC;EACxC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuB,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,IAAI2B,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAAC8B,eAAe,EAAEC,kBAAkB,CAAC,GAAG/B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAE7D;EACA,MAAMgC,WAAW,GAAG7B,MAAM,CAAC;IACzB8B,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE,CAAC;IACRf,cAAc,EAAE;EAClB,CAAC,CAAC;;EAEF;EACA,MAAMgB,iBAAiB,GAAGhC,MAAM,CAAC;IAC/B8B,KAAK,EAAE,KAAK;IACZC,KAAK,EAAE,KAAK;IACZf,cAAc,EAAE;EAClB,CAAC,CAAC;;EAEF;EACA,MAAMiB,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;IACpD,IAAI,CAAC1B,IAAI,EAAE;IAEX,IAAI;MACF,MAAM2B,QAAQ,GAAG,MAAMnC,GAAG,CAACoC,IAAI,CAAC,kBAAkB,EAAE;QAAEH,QAAQ;QAAEC;MAAU,CAAC,CAAC;MAC5ExB,WAAW,CAAC;QAAEuB,QAAQ;QAAEC;MAAU,CAAC,CAAC;MACpCZ,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAOY,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAAC,2BAA2B,CAAC;MACrC,MAAMD,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMoB,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IAChD,IAAI,CAACjC,IAAI,EAAE;IAEX,IAAI;MACF8B,OAAO,CAACI,GAAG,CAAC,wBAAwB,EAAEF,MAAM,EAAEC,WAAW,CAAC;MAE1D,MAAMN,QAAQ,GAAG,MAAMnC,GAAG,CAACoC,IAAI,CAAC,WAAW,EAAE;QAC3CI,MAAM;QACNC;MACF,CAAC,CAAC;;MAEF;MACA,MAAME,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;;MAE5B;MACA,MAAMC,mBAAmB,CAAC,IAAI,CAAC;MAE/BtB,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAE1B,OAAOY,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACgB,QAAQ,IAAIhB,KAAK,CAACgB,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;QACnDP,OAAO,CAACQ,IAAI,CAAC,2CAA2C,CAAC;QACzD1B,QAAQ,CAAC,kDAAkD,CAAC;MAC9D,CAAC,MAAM;QAAA,IAAA2B,eAAA,EAAAC,oBAAA;QACLV,OAAO,CAACnB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAAC,yBAAyB,IAAI,EAAA2B,eAAA,GAAA5B,KAAK,CAACgB,QAAQ,cAAAY,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBV,IAAI,cAAAW,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI9B,KAAK,CAAC8B,OAAO,CAAC,CAAC;MACxF;MACA,MAAM9B,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM+B,qBAAqB,GAAIC,MAAM,IAAK;IACxCb,OAAO,CAACI,GAAG,CAAC,gCAAgCS,MAAM,GAAG,CAAC;IACtDxB,kBAAkB,CAACwB,MAAM,CAAC;;IAE1B;IACAP,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMQ,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,QAAQ,GAAG,CAAC7B,oBAAoB;IACtCC,uBAAuB,CAAC4B,QAAQ,CAAC;;IAEjC;IACAV,cAAc,CAAC,IAAI,EAAEU,QAAQ,CAAC,CAAC,CAAC;;IAEhC,OAAOA,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMV,cAAc,GAAG,MAAAA,CAAOW,KAAK,GAAG,KAAK,EAAEC,aAAa,GAAG/B,oBAAoB,KAAK;IACpF;IACA,IAAIO,iBAAiB,CAACyB,OAAO,CAAC1B,KAAK,IAAI,CAACwB,KAAK,EAAE;MAC7ChB,OAAO,CAACI,GAAG,CAAC,4CAA4C,CAAC;MACzD,OAAO7B,SAAS;IAClB;IAEA,MAAM4C,GAAG,GAAGlC,IAAI,CAACkC,GAAG,CAAC,CAAC;IACtB;IACA,IAAI,CAACH,KAAK,IAAIG,GAAG,GAAG7B,WAAW,CAAC4B,OAAO,CAAC1B,KAAK,GAAG,KAAK,EAAE;MACrDQ,OAAO,CAACI,GAAG,CAAC,uCAAuCgB,IAAI,CAACC,KAAK,CAAC,CAACF,GAAG,GAAG7B,WAAW,CAAC4B,OAAO,CAAC1B,KAAK,IAAE,IAAI,CAAC,IAAI,CAAC;MAC1G,OAAOjB,SAAS;IAClB;IAEA,IAAI;MAAA,IAAA+C,mBAAA;MACF7B,iBAAiB,CAACyB,OAAO,CAAC1B,KAAK,GAAG,IAAI;MACtCZ,YAAY,CAAC,IAAI,CAAC;MAClBoB,OAAO,CAACI,GAAG,CAAC,4CAA4Ca,aAAa,EAAE,CAAC;;MAExE;MACA,MAAMpB,QAAQ,GAAG,MAAMnC,GAAG,CAAC6D,GAAG,CAAC,gCAAgCN,aAAa,EAAE,CAAC;MAE/EjB,OAAO,CAACI,GAAG,CAAC,WAAW,EAAAkB,mBAAA,GAAAzB,QAAQ,CAACE,IAAI,CAACA,IAAI,cAAAuB,mBAAA,uBAAlBA,mBAAA,CAAoBE,MAAM,KAAI,CAAC,QAAQ,CAAC;MAC/DlC,WAAW,CAAC4B,OAAO,CAAC1B,KAAK,GAAG2B,GAAG;MAC/B3C,YAAY,CAACqB,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;MACtCf,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAOY,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,uBAAuB,CAAC;MACjC,OAAOP,SAAS;IAClB,CAAC,SAAS;MACRK,YAAY,CAAC,KAAK,CAAC;MACnBa,iBAAiB,CAACyB,OAAO,CAAC1B,KAAK,GAAG,KAAK;IACzC;EACF,CAAC;;EAED;EACA,MAAMc,mBAAmB,GAAG,MAAAA,CAAOU,KAAK,GAAG,KAAK,KAAK;IACnD;IACA,IAAIvB,iBAAiB,CAACyB,OAAO,CAACzC,cAAc,IAAI,CAACuC,KAAK,EAAE;MACtDhB,OAAO,CAACI,GAAG,CAAC,wDAAwD,CAAC;MACrE,OAAO3B,cAAc;IACvB;IAEA,MAAM0C,GAAG,GAAGlC,IAAI,CAACkC,GAAG,CAAC,CAAC;IACtB;IACA,IAAI,CAACH,KAAK,IAAIG,GAAG,GAAG7B,WAAW,CAAC4B,OAAO,CAACzC,cAAc,GAAG,KAAK,EAAE;MAC9DuB,OAAO,CAACI,GAAG,CAAC,4CAA4CgB,IAAI,CAACC,KAAK,CAAC,CAACF,GAAG,GAAG7B,WAAW,CAAC4B,OAAO,CAACzC,cAAc,IAAE,IAAI,CAAC,IAAI,CAAC;MACxH,OAAOA,cAAc;IACvB;IAEA,IAAI;MAAA,IAAAgD,oBAAA;MACFhC,iBAAiB,CAACyB,OAAO,CAACzC,cAAc,GAAG,IAAI;MAC/CG,YAAY,CAAC,IAAI,CAAC;MAClBoB,OAAO,CAACI,GAAG,CAAC,kDAAkDhB,eAAe,GAAG,CAAC;MAEjF,MAAMS,QAAQ,GAAG,MAAMnC,GAAG,CAAC6D,GAAG,CAAC,sCAAsCnC,eAAe,EAAE,CAAC;MAEvFY,OAAO,CAACI,GAAG,CAAC,SAAS,EAAAqB,oBAAA,GAAA5B,QAAQ,CAACE,IAAI,CAACA,IAAI,cAAA0B,oBAAA,uBAAlBA,oBAAA,CAAoBD,MAAM,KAAI,CAAC,uBAAuB,CAAC;MAC5ElC,WAAW,CAAC4B,OAAO,CAACzC,cAAc,GAAG0C,GAAG;MACxCzC,iBAAiB,CAACmB,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;MAC3Cf,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAOY,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACgB,QAAQ,IAAIhB,KAAK,CAACgB,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;QACnD;QACAP,OAAO,CAACI,GAAG,CAAC,gCAAgC,CAAC;QAC7C1B,iBAAiB,CAAC,EAAE,CAAC;QACrB,OAAO,EAAE;MACX,CAAC,MAAM;QACLsB,OAAO,CAACnB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxDC,QAAQ,CAAC,kCAAkC,CAAC;QAC5C,OAAOL,cAAc;MACvB;IACF,CAAC,SAAS;MACRG,YAAY,CAAC,KAAK,CAAC;MACnBa,iBAAiB,CAACyB,OAAO,CAACzC,cAAc,GAAG,KAAK;IAClD;EACF,CAAC;;EAED;EACA,MAAMiD,cAAc,GAAG,MAAAA,CAAOV,KAAK,GAAG,KAAK,KAAK;IAC9C;IACA,IAAIvB,iBAAiB,CAACyB,OAAO,CAAC3B,KAAK,IAAI,CAACyB,KAAK,EAAE;MAC7ChB,OAAO,CAACI,GAAG,CAAC,4CAA4C,CAAC;MACzD,OAAO/B,SAAS;IAClB;IAEA,MAAM8C,GAAG,GAAGlC,IAAI,CAACkC,GAAG,CAAC,CAAC;IACtB;IACA,IAAI,CAACH,KAAK,IAAIG,GAAG,GAAG7B,WAAW,CAAC4B,OAAO,CAAC3B,KAAK,GAAG,KAAK,EAAE;MACrDS,OAAO,CAACI,GAAG,CAAC,uCAAuCgB,IAAI,CAACC,KAAK,CAAC,CAACF,GAAG,GAAG7B,WAAW,CAAC4B,OAAO,CAAC3B,KAAK,IAAE,IAAI,CAAC,IAAI,CAAC;MAC1G,OAAOlB,SAAS;IAClB;IAEA,IAAI;MACFoB,iBAAiB,CAACyB,OAAO,CAAC3B,KAAK,GAAG,IAAI;MACtCX,YAAY,CAAC,IAAI,CAAC;MAClBoB,OAAO,CAACI,GAAG,CAAC,wBAAwB,CAAC;MAErC,MAAMP,QAAQ,GAAG,MAAMnC,GAAG,CAAC6D,GAAG,CAAC,gBAAgB,CAAC;MAChDjC,WAAW,CAAC4B,OAAO,CAAC3B,KAAK,GAAG4B,GAAG;;MAE/B;MACA,MAAMQ,QAAQ,GAAG9B,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAI,EAAE;MACzCC,OAAO,CAACI,GAAG,CAAC,OAAOuB,QAAQ,CAACH,MAAM,iBAAiB,CAAC;;MAEpD;MACA,MAAMI,UAAU,GAAGD,QAAQ,CAACE,MAAM,CAACC,CAAC,IAAI;QACtC,MAAMC,GAAG,GAAGC,UAAU,CAACF,CAAC,CAACnC,QAAQ,CAAC;QAClC,MAAMsC,GAAG,GAAGD,UAAU,CAACF,CAAC,CAAClC,SAAS,CAAC;QACnC,MAAMsC,OAAO,GAAG,CAACC,KAAK,CAACJ,GAAG,CAAC,IAAI,CAACI,KAAK,CAACF,GAAG,CAAC,IAAIb,IAAI,CAACgB,GAAG,CAACL,GAAG,CAAC,IAAI,EAAE,IAAIX,IAAI,CAACgB,GAAG,CAACH,GAAG,CAAC,IAAI,GAAG;QAEzF,IAAI,CAACC,OAAO,IAAIJ,CAAC,EAAE;UACjB9B,OAAO,CAACQ,IAAI,CAAC,6CAA6C,EAAEsB,CAAC,CAACO,QAAQ,EAAEP,CAAC,CAACnC,QAAQ,EAAEmC,CAAC,CAAClC,SAAS,CAAC;QAClG;QAEA,OAAOsC,OAAO;MAChB,CAAC,CAAC;MAEFlC,OAAO,CAACI,GAAG,CAAC,GAAGwB,UAAU,CAACJ,MAAM,+BAA+B,CAAC;MAChElD,YAAY,CAACsD,UAAU,CAAC;MACxB5C,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAO2C,UAAU;IACnB,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,uBAAuB,CAAC;MACjC,OAAOT,SAAS;IAClB,CAAC,SAAS;MACRO,YAAY,CAAC,KAAK,CAAC;MACnBa,iBAAiB,CAACyB,OAAO,CAAC3B,KAAK,GAAG,KAAK;IACzC;EACF,CAAC;;EAED;EACA,MAAM+C,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACF,kBAAkB,CACrCnE,QAAQ,IAAK;QACZ,MAAM;UAAEwB,QAAQ;UAAEC;QAAU,CAAC,GAAGzB,QAAQ,CAACsE,MAAM;QAC/CrE,WAAW,CAAC;UAAEuB,QAAQ;UAAEC;QAAU,CAAC,CAAC;;QAEpC;QACA,IAAI1B,IAAI,EAAE;UACRwB,cAAc,CAACC,QAAQ,EAAEC,SAAS,CAAC,CAChC8C,KAAK,CAACC,GAAG,IAAI3C,OAAO,CAACnB,KAAK,CAAC,oCAAoC,EAAE8D,GAAG,CAAC,CAAC;QAC3E;MACF,CAAC,EACA9D,KAAK,IAAK;QACTmB,OAAO,CAACnB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1CC,QAAQ,CAAC,wBAAwB,CAAC;MACpC,CACF,CAAC;IACH,CAAC,MAAM;MACLA,QAAQ,CAAC,8CAA8C,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAM8D,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC5C,OAAO,CAACI,GAAG,CAAC,mCAAmC,CAAC;IAChDxB,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACAU,WAAW,CAAC4B,OAAO,GAAG;QACpB3B,KAAK,EAAE,CAAC;QACRC,KAAK,EAAE,CAAC;QACRf,cAAc,EAAE;MAClB,CAAC;;MAED;MACA,MAAMkD,QAAQ,GAAG,MAAMD,cAAc,CAAC,IAAI,CAAC;MAC3C1B,OAAO,CAACI,GAAG,CAAC,kBAAkB,EAAE,CAAAuB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEH,MAAM,KAAI,CAAC,CAAC;;MAEtD;MACA,MAAMqB,SAAS,GAAG,MAAMxC,cAAc,CAAC,IAAI,CAAC;MAC5CL,OAAO,CAACI,GAAG,CAAC,kBAAkB,EAAE,CAAAyC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAErB,MAAM,KAAI,CAAC,CAAC;;MAEvD;MACA,MAAMsB,kBAAkB,GAAG,MAAMxC,mBAAmB,CAAC,IAAI,CAAC;MAC1DN,OAAO,CAACI,GAAG,CAAC,6BAA6B,EAAE,CAAA0C,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEtB,MAAM,KAAI,CAAC,CAAC;MAE3ExC,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAO;QACLM,KAAK,EAAEoC,QAAQ;QACfnC,KAAK,EAAEqD,SAAS;QAChBpE,cAAc,EAAEqE;MAClB,CAAC;IACH,CAAC,CAAC,OAAOjE,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,QAAQ,CAAC,mCAAmC,GAAGD,KAAK,CAAC8B,OAAO,CAAC;MAC7D,MAAM9B,KAAK;IACb,CAAC,SAAS;MACRD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd,IAAIW,IAAI,EAAE;MACR;MACAoE,kBAAkB,CAAC,CAAC;;MAEpB;MACA,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;QAC9B,IAAI;UACF,MAAMrB,cAAc,CAAC,IAAI,CAAC;UAC1B,MAAMrB,cAAc,CAAC,IAAI,CAAC;UAC1B,MAAMC,mBAAmB,CAAC,IAAI,CAAC;QACjC,CAAC,CAAC,OAAOzB,KAAK,EAAE;UACdmB,OAAO,CAACnB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF,CAAC;MAEDkE,WAAW,CAAC,CAAC;;MAEb;MACA,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;QACnCvB,cAAc,CAAC,CAAC,CAACgB,KAAK,CAACC,GAAG,IAAI3C,OAAO,CAACnB,KAAK,CAAC,wBAAwB,EAAE8D,GAAG,CAAC,CAAC;QAC3EtC,cAAc,CAAC,CAAC,CAACqC,KAAK,CAACC,GAAG,IAAI3C,OAAO,CAACnB,KAAK,CAAC,wBAAwB,EAAE8D,GAAG,CAAC,CAAC;QAC3ErC,mBAAmB,CAAC,CAAC,CAACoC,KAAK,CAACC,GAAG,IAAI3C,OAAO,CAACnB,KAAK,CAAC,mCAAmC,EAAE8D,GAAG,CAAC,CAAC;MAC7F,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;MAEZ,OAAO,MAAMO,aAAa,CAACF,UAAU,CAAC;IACxC;EACF,CAAC,EAAE,CAAC9E,IAAI,CAAC,CAAC;;EAEV;EACAX,SAAS,CAAC,MAAM;IACd,IAAIW,IAAI,EAAE;MACRoC,mBAAmB,CAAC,IAAI,CAAC;IAC3B;EACF,CAAC,EAAE,CAAClB,eAAe,CAAC,CAAC;EAErB,oBACEvB,OAAA,CAACC,eAAe,CAACqF,QAAQ;IACvBC,KAAK,EAAE;MACLjF,QAAQ;MACRE,SAAS;MACTE,SAAS;MACTE,cAAc;MAAE;MAChBE,SAAS;MACTE,KAAK;MACLE,WAAW;MACXG,oBAAoB;MACpBE,eAAe;MAAE;MACjBM,cAAc;MACdO,UAAU;MACVyB,cAAc;MACdrB,cAAc;MACdC,mBAAmB;MAAE;MACrBQ,wBAAwB;MACxBF,qBAAqB;MAAE;MACvB0B,kBAAkB;MAClBM;IACF,CAAE;IAAA5E,QAAA,EAEDA;EAAQ;IAAAqF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACvF,EAAA,CArWWF,gBAAgB;AAAA0F,EAAA,GAAhB1F,gBAAgB;AAuW7B,eAAeA,gBAAgB;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}