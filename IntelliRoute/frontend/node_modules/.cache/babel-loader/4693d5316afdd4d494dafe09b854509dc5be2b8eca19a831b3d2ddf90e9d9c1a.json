{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, useMapEvents } from 'react-leaflet';\nimport { LocationContext } from '../context/LocationContext';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport ChatDialog from './ChatDialog';\nimport NotificationsPanel from './NotificationsPanel';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './UserLocationMap.css';\nimport NotificationButton from './NotificationButton';\n// Fix for default icons\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments } from '@fortawesome/free-solid-svg-icons';\n\n// Debug component to display path information\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DebugInfo() {\n  _s();\n  var _livePaths$0$route;\n  const {\n    livePaths\n  } = useContext(LocationContext);\n  const {\n    user\n  } = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      bottom: '10px',\n      left: '10px',\n      backgroundColor: 'rgba(255,255,255,0.8)',\n      padding: '10px',\n      zIndex: 1000,\n      maxWidth: '300px',\n      maxHeight: '200px',\n      overflow: 'auto',\n      fontSize: '12px',\n      border: '1px solid #ccc'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Debug Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Raw Paths: \", (livePaths === null || livePaths === void 0 ? void 0 : livePaths.length) || 0]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Current User: \", (user === null || user === void 0 ? void 0 : user.id) || 'Unknown']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), livePaths && livePaths.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"First Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"ID: \", livePaths[0].id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"User: \", livePaths[0].user_id === (user === null || user === void 0 ? void 0 : user.id) ? 'Current User' : 'Other']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Has Route: \", livePaths[0].route ? 'Yes' : 'No']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Route Start: \", (_livePaths$0$route = livePaths[0].route) === null || _livePaths$0$route === void 0 ? void 0 : _livePaths$0$route.substring(0, 30), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(DebugInfo, \"umH9Cm9fKUoq8RclBLcUPqkzV6A=\");\n_c = DebugInfo;\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// Create custom icons\nconst createCustomIcon = color => {\n  return L.divIcon({\n    className: 'custom-div-icon',\n    html: `<div class=\"marker-pin\" style=\"background-color: ${color};\"></div>`,\n    iconSize: [30, 42],\n    iconAnchor: [15, 42]\n  });\n};\n\n// Enhanced parseRouteData function with extensive debugging\nconst parseRouteData = routeData => {\n  console.log(`[PARSE] Processing route data of type ${typeof routeData}`);\n  if (!routeData) {\n    console.log('[PARSE] Route data is null or undefined');\n    return [];\n  }\n\n  // LINESTRING parsing\n  if (typeof routeData === 'string' && routeData.startsWith('LINESTRING')) {\n    try {\n      console.log(`[PARSE] Parsing LINESTRING: ${routeData.substring(0, 50)}...`);\n\n      // Strict WKT LINESTRING parsing\n      // Format is: LINESTRING(lon1 lat1, lon2 lat2, ...)\n      const lineString = routeData.trim();\n\n      // Extract content within parentheses\n      const coordsText = lineString.substring(lineString.indexOf('(') + 1, lineString.lastIndexOf(')'));\n\n      // Split by commas to get each point\n      const pointStrings = coordsText.split(',');\n      console.log(`[PARSE] Found ${pointStrings.length} point strings`);\n      if (pointStrings.length === 0) {\n        console.log('[PARSE] No points found in LINESTRING');\n        return [];\n      }\n\n      // Parse each point string into [lat, lng] array\n      const points = pointStrings.map(pointStr => {\n        // Trim and split by space\n        const parts = pointStr.trim().split(' ');\n        if (parts.length < 2) {\n          console.log(`[PARSE] Invalid point format: ${pointStr}`);\n          return null;\n        }\n\n        // WKT format is longitude first, latitude second\n        // But Leaflet needs [lat, lng] format\n        const lng = parseFloat(parts[0]);\n        const lat = parseFloat(parts[1]);\n        if (isNaN(lat) || isNaN(lng)) {\n          console.log(`[PARSE] Invalid coordinates: ${pointStr}`);\n          return null;\n        }\n        return [lat, lng]; // Swapped for Leaflet's [lat, lng] format\n      }).filter(Boolean); // Remove any null points\n\n      console.log(`[PARSE] Successfully parsed ${points.length} valid points`);\n\n      // Validate first and last points\n      if (points.length > 0) {\n        const first = points[0];\n        const last = points[points.length - 1];\n        console.log(`[PARSE] First point: [${first[0]}, ${first[1]}]`);\n        console.log(`[PARSE] Last point: [${last[0]}, ${last[1]}]`);\n\n        // Reduce excessive points for very long routes (optional)\n        let simplifiedPoints = points;\n        if (points.length > 500) {\n          console.log(`[PARSE] Simplifying path from ${points.length} to ~500 points`);\n          const factor = Math.ceil(points.length / 500);\n          simplifiedPoints = points.filter((_, i) => i % factor === 0 || i === points.length - 1);\n          console.log(`[PARSE] Simplified to ${simplifiedPoints.length} points`);\n        }\n        return simplifiedPoints;\n      }\n      return [];\n    } catch (e) {\n      console.error('[PARSE] Error parsing LINESTRING:', e);\n      console.error('[PARSE] Problematic route data:', routeData.substring(0, 100) + '...');\n      return [];\n    }\n  }\n\n  // If it's already an array, make sure it's in the right format\n  if (Array.isArray(routeData)) {\n    console.log(`[PARSE] Route data is already an array with ${routeData.length} elements`);\n    return routeData;\n  }\n  console.log('[PARSE] Unrecognized route data format');\n  return [];\n};\n\n// Component to update map bounds based on users' positions and routes\nfunction MapBoundsUpdater({\n  users,\n  paths\n}) {\n  _s2();\n  const map = useMap();\n  useEffect(() => {\n    if (!users.length && !paths.length) return;\n    try {\n      const points = [];\n\n      // Add user points\n      users.forEach(user => {\n        if (user.latitude && user.longitude) {\n          points.push([user.latitude, user.longitude]);\n        }\n      });\n\n      // Add path points (with better handling for complex routes)\n      paths.forEach(path => {\n        if (path.parsedRoute && Array.isArray(path.parsedRoute)) {\n          // Don't add every point - just add first, last, and some in between\n          // to avoid overloading the bounds calculation with too many points\n          const routePoints = path.parsedRoute;\n          if (routePoints.length > 0) {\n            points.push(routePoints[0]); // Add first point\n\n            if (routePoints.length > 10) {\n              // Add a few points in the middle for long routes\n              points.push(routePoints[Math.floor(routePoints.length / 3)]);\n              points.push(routePoints[Math.floor(routePoints.length * 2 / 3)]);\n            }\n            if (routePoints.length > 1) {\n              points.push(routePoints[routePoints.length - 1]); // Add last point\n            }\n          }\n        }\n      });\n      if (points.length > 0) {\n        const bounds = L.latLngBounds(points);\n        map.fitBounds(bounds, {\n          padding: [50, 50]\n        });\n      }\n    } catch (error) {\n      console.error('Error updating map bounds:', error);\n    }\n  }, [users, paths, map]);\n  return null;\n}\n\n// Component to handle map clicks for route creation\n_s2(MapBoundsUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c2 = MapBoundsUpdater;\nfunction MapClickHandler({\n  routeMode,\n  selectedSource,\n  setSelectedSource,\n  createPath\n}) {\n  _s3();\n  useMapEvents({\n    click: e => {\n      if (!routeMode) return;\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      if (!selectedSource) {\n        // Set source\n        setSelectedSource({\n          lat,\n          lng\n        });\n      } else {\n        // Set destination and create path\n        const destination = {\n          lat,\n          lng\n        };\n        createPath(selectedSource, destination);\n\n        // Reset route mode (this will be handled by parent component)\n      }\n    }\n  });\n  return null;\n}\n_s3(MapClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c3 = MapClickHandler;\nconst UserLocationMap = () => {\n  _s4();\n  const {\n    liveUsers,\n    fetchLiveUsers,\n    livePaths,\n    fetchLivePaths,\n    createPath\n  } = useContext(LocationContext);\n  const {\n    user\n  } = useContext(AuthContext);\n  // Get all the chat context values we need including activeChats\n  const {\n    sendChatRequest,\n    notifications,\n    currentChat,\n    openChat,\n    activeChats,\n    fetchActiveChats\n  } = useContext(ChatContext);\n  const [usersWithLocation, setUsersWithLocation] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [pathsWithCoordinates, setPathsWithCoordinates] = useState([]);\n  const [routeMode, setRouteMode] = useState(false);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const mapRef = useRef(null);\n\n  // Chat request handler\n  const handleChatRequest = userId => {\n    if (userId === user.id) {\n      // Don't allow chatting with yourself\n      return;\n    }\n    sendChatRequest(userId).then(response => {\n      console.log('Chat request sent successfully:', response);\n    }).catch(error => {\n      console.error('Failed to send chat request:', error);\n    });\n  };\n\n  // Fetch active chats on component mount\n  useEffect(() => {\n    if (user && fetchActiveChats) {\n      fetchActiveChats();\n    }\n  }, [user, fetchActiveChats]);\n  useEffect(() => {\n    let isMounted = true;\n    const loadMapData = async () => {\n      if (!isMounted || isLoading) return;\n      console.log(`Map data refresh at ${new Date().toLocaleTimeString()}`);\n      try {\n        // Only update if too much time has passed since last update\n        const timeSinceUpdate = new Date() - lastUpdated;\n        if (timeSinceUpdate > 25000) {\n          // 25 seconds minimum\n          setIsLoading(true);\n          await fetchLiveUsers();\n          await fetchLivePaths();\n          setLastUpdated(new Date());\n        } else {\n          console.log(`Skipping refresh - only ${Math.round(timeSinceUpdate / 1000)}s since last update`);\n        }\n      } catch (error) {\n        console.error('Error refreshing map data:', error);\n      } finally {\n        if (isMounted) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    // Initial load\n    loadMapData();\n\n    // Set up a controlled interval with a single timer\n    // Use 30 seconds to reduce server load\n    const intervalId = setInterval(loadMapData, 30000);\n    return () => {\n      isMounted = false;\n      clearInterval(intervalId);\n    };\n  }, [fetchLiveUsers, fetchLivePaths, lastUpdated, isLoading]);\n  useEffect(() => {\n    if (liveUsers) {\n      const filtered = liveUsers.filter(u => u.latitude && u.longitude);\n      setUsersWithLocation(filtered);\n    }\n  }, [liveUsers]);\n\n  // Updated effect for path processing\n  useEffect(() => {\n    console.log('[MAP] Processing livePaths update, count:', (livePaths === null || livePaths === void 0 ? void 0 : livePaths.length) || 0);\n    if (!livePaths || !Array.isArray(livePaths) || livePaths.length === 0) {\n      console.log('[MAP] No paths to process, clearing display');\n      setPathsWithCoordinates([]);\n      return;\n    }\n    try {\n      // Process each path\n      const processed = livePaths.map((path, idx) => {\n        console.log(`[MAP] Processing path ${idx}:`, {\n          id: path.id,\n          user_id: path.user_id,\n          isCurrentUser: path.user_id === (user === null || user === void 0 ? void 0 : user.id)\n        });\n\n        // Check for route data\n        let routeData = path.route;\n        if (!routeData) {\n          // Try alternate property names\n          if (path.route_wkt) {\n            console.log(`[MAP] Path ${idx} has route_wkt instead of route`);\n            routeData = path.route_wkt;\n          } else {\n            console.log(`[MAP] Path ${idx} has no route data`);\n            return null;\n          }\n        }\n\n        // Parse and validate the route\n        const parsedRoute = parseRouteData(routeData);\n        if (!parsedRoute || parsedRoute.length === 0) {\n          console.log(`[MAP] Path ${idx} returned no valid coordinates`);\n          return null;\n        }\n        console.log(`[MAP] Path ${idx} processed successfully with ${parsedRoute.length} points`);\n\n        // Return the processed path\n        return {\n          ...path,\n          parsedRoute,\n          isCurrentUser: path.user_id === (user === null || user === void 0 ? void 0 : user.id)\n        };\n      }).filter(Boolean); // Remove null paths\n\n      console.log(`[MAP] Processed ${processed.length} paths with valid coordinates`);\n      if (processed.length === 0 && livePaths.length > 0) {\n        console.warn('[MAP] WARNING: All paths failed to process!');\n      }\n      setPathsWithCoordinates(processed);\n    } catch (error) {\n      console.error('[MAP] Error processing paths:', error);\n      setPathsWithCoordinates([]);\n    }\n  }, [livePaths, user]);\n\n  // Updated createPath handler\n  const handleCreatePath = async (source, destination) => {\n    try {\n      console.log('[CREATE] Creating path from', source, 'to', destination);\n      setIsLoading(true);\n\n      // Create the path\n      const result = await createPath(source, destination);\n      console.log('[CREATE] Path created successfully:', result);\n\n      // Force a fresh load of path data\n      console.log('[CREATE] Refreshing paths after creation...');\n      await fetchLivePaths(false);\n\n      // Update UI state\n      setLastUpdated(new Date());\n      setRouteMode(false);\n      setSelectedSource(null);\n\n      // Alert the user\n      alert('Path created successfully! If it doesn\\'t appear, click the Refresh Map button.');\n    } catch (error) {\n      console.error('[CREATE] Error creating path:', error);\n      alert('Failed to create path: ' + (error.message || 'Unknown error'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleRouteMode = () => {\n    setRouteMode(!routeMode);\n    if (routeMode) {\n      // If turning off, clear selected source\n      setSelectedSource(null);\n    }\n  };\n  const formatTime = date => {\n    if (!(date instanceof Date)) {\n      try {\n        date = new Date(date);\n      } catch (e) {\n        return 'Unknown';\n      }\n    }\n    return date.toLocaleTimeString();\n  };\n  if (isLoading && usersWithLocation.length === 0 && pathsWithCoordinates.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Calculate center point for map display or use a default\n  let centerLat = 0,\n    centerLng = 0;\n  if (usersWithLocation.length > 0) {\n    centerLat = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.latitude || 0), 0) / usersWithLocation.length;\n    centerLng = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.longitude || 0), 0) / usersWithLocation.length;\n  } else {\n    // Default to a central location if no users\n    centerLat = 0;\n    centerLng = 0;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Live User Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"refresh-button\",\n          onClick: async () => {\n            console.log('[MAP] Manual refresh requested');\n            setIsLoading(true);\n            try {\n              // Force immediate data refresh\n              await fetchLiveUsers();\n              await fetchLivePaths(false);\n              setLastUpdated(new Date());\n\n              // Log what we have\n              console.log(`[MAP] Refresh complete - ${livePaths.length} paths available`);\n            } catch (error) {\n              console.error('[MAP] Error during refresh:', error);\n            } finally {\n              setIsLoading(false);\n            }\n          },\n          disabled: isLoading,\n          children: isLoading ? 'Refreshing...' : '🔄 Refresh Map'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-controls\",\n          children: [/*#__PURE__*/_jsxDEV(NotificationButton, {\n            notificationCount: notifications ? notifications.length : 0,\n            onClick: () => setShowNotifications(!showNotifications)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this), showNotifications && /*#__PURE__*/_jsxDEV(NotificationsPanel, {\n            onClose: () => setShowNotifications(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `route-button ${routeMode ? 'active' : ''}`,\n          onClick: toggleRouteMode,\n          children: routeMode ? 'Cancel Route' : 'Create Route'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this), routeMode && !selectedSource && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-instructions\",\n          children: \"Click on map to set starting point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), routeMode && selectedSource && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-instructions\",\n          children: \"Click on map to set destination\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"last-updated\",\n          children: [\"Last updated: \", formatTime(lastUpdated)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [centerLat, centerLng],\n      zoom: 3,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DebugInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapClickHandler, {\n        routeMode: routeMode,\n        selectedSource: selectedSource,\n        setSelectedSource: setSelectedSource,\n        createPath: handleCreatePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), usersWithLocation.map(u => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [parseFloat(u.latitude), parseFloat(u.longitude)],\n        icon: createCustomIcon(u.id === (user === null || user === void 0 ? void 0 : user.id) ? '#4285F4' : '#FF5722'),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-popup\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: u.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-status\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"status-dot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 557,\n                columnNumber: 19\n              }, this), \"Online\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-location\",\n              children: [\"Coordinates: \", parseFloat(u.latitude).toFixed(4), \", \", parseFloat(u.longitude).toFixed(4)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-last-active\",\n              children: [\"Last active: \", formatTime(u.last_active)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 17\n            }, this), u.id === (user === null || user === void 0 ? void 0 : user.id) ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"current-user-tag\",\n              children: \"This is you\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"chat-request-button\",\n                onClick: () => handleChatRequest(u.id),\n                children: [\"Chat with \", u.username]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)\n      }, `user-${u.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }, this)), routeMode && selectedSource && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [selectedSource.lat, selectedSource.lng],\n        icon: createCustomIcon('#00C853'),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Starting point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 11\n      }, this), pathsWithCoordinates.map((path, idx) => {\n        console.log(`[RENDER] Rendering path ${idx}:`, {\n          id: path.id,\n          points: path.parsedRoute.length,\n          isCurrentUser: path.user_id === (user === null || user === void 0 ? void 0 : user.id)\n        });\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: path.parsedRoute,\n          color: path.user_id === (user === null || user === void 0 ? void 0 : user.id) ? '#2196F3' : '#FF5722',\n          weight: 5 // Increased line weight for better visibility\n          ,\n          opacity: 0.8\n          // Add event listeners for debugging\n          ,\n          eventHandlers: {\n            mouseover: () => {\n              console.log(`[RENDER] Path ${idx} mouseover:`, {\n                id: path.id,\n                user: path.user_id,\n                points: path.parsedRoute.length\n              });\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-popup\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Route Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"User:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 622,\n                  columnNumber: 22\n                }, this), \" \", path.user_id === (user === null || user === void 0 ? void 0 : user.id) ? 'You' : path.username || 'Other User']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Created:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 623,\n                  columnNumber: 22\n                }, this), \" \", formatTime(path.created_at)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 19\n              }, this), path.parsedRoute.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"From:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 626,\n                    columnNumber: 26\n                  }, this), \" \", path.parsedRoute[0][0].toFixed(4), \", \", path.parsedRoute[0][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 626,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"To:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 627,\n                    columnNumber: 26\n                  }, this), \" \", path.parsedRoute[path.parsedRoute.length - 1][0].toFixed(4), \", \", path.parsedRoute[path.parsedRoute.length - 1][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 627,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Points:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 628,\n                    columnNumber: 26\n                  }, this), \" \", path.parsedRoute.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 628,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 15\n          }, this)\n        }, `path-${path.id || idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(MapBoundsUpdater, {\n        users: usersWithLocation,\n        paths: pathsWithCoordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Map Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#4285F4'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#FF5722'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Other users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#2196F3'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your paths\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#FF5722'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Other users' paths\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this), routeMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#00C853'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Selected starting point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-info-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Active Users:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 13\n          }, this), \" \", usersWithLocation.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Active Paths:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 13\n          }, this), \" \", pathsWithCoordinates.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Last Updated:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 13\n          }, this), \" \", formatTime(lastUpdated)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"active-chats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faComments\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this), \" Active Chats\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chats-list\",\n          children: activeChats && activeChats.length > 0 ? activeChats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-item\",\n            onClick: () => openChat(chat.id),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-user\",\n              children: chat.otherParticipants && chat.otherParticipants.length > 0 ? chat.otherParticipants[0].username : 'Unknown User'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 19\n            }, this), chat.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unread-badge\",\n              children: chat.unreadCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 21\n            }, this)]\n          }, chat.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-chats\",\n            children: \"No active chats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this), pathsWithCoordinates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-paths\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Paths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paths-list\",\n          children: pathsWithCoordinates.slice(0, 5).map((path, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"path-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: path.username || 'Unknown user'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 723,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: formatTime(path.created_at)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 724,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-details\",\n              children: path.parsedRoute.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"From: \", path.parsedRoute[0][0].toFixed(4), \", \", path.parsedRoute[0][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 729,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"To: \", path.parsedRoute[path.parsedRoute.length - 1][0].toFixed(4), \", \", path.parsedRoute[path.parsedRoute.length - 1][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 732,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"Route Points: \", path.parsedRoute.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 735,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 7\n    }, this), currentChat && /*#__PURE__*/_jsxDEV(ChatDialog, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .refresh-button {\n          background-color: #4CAF50;\n          color: white;\n          border: none;\n          padding: 8px 16px;\n          margin: 0 8px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: bold;\n        }\n        \n        .refresh-button:hover {\n          background-color: #45a049;\n        }\n        \n        .refresh-button:disabled {\n          background-color: #cccccc;\n          cursor: not-allowed;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 5\n  }, this);\n};\n_s4(UserLocationMap, \"K79/jv/ServjYjtKK34GMDTmhfI=\");\n_c4 = UserLocationMap;\nexport default UserLocationMap;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"DebugInfo\");\n$RefreshReg$(_c2, \"MapBoundsUpdater\");\n$RefreshReg$(_c3, \"MapClickHandler\");\n$RefreshReg$(_c4, \"UserLocationMap\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useRef","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","useMapEvents","LocationContext","AuthContext","ChatContext","ChatDialog","NotificationsPanel","L","NotificationButton","icon","iconShadow","FontAwesomeIcon","faComments","jsxDEV","_jsxDEV","Fragment","_Fragment","DebugInfo","_s","_livePaths$0$route","livePaths","user","style","position","bottom","left","backgroundColor","padding","zIndex","maxWidth","maxHeight","overflow","fontSize","border","children","fileName","_jsxFileName","lineNumber","columnNumber","length","id","user_id","route","substring","_c","DefaultIcon","iconUrl","shadowUrl","iconSize","iconAnchor","prototype","options","createCustomIcon","color","divIcon","className","html","parseRouteData","routeData","console","log","startsWith","lineString","trim","coordsText","indexOf","lastIndexOf","pointStrings","split","points","map","pointStr","parts","lng","parseFloat","lat","isNaN","filter","Boolean","first","last","simplifiedPoints","factor","Math","ceil","_","i","e","error","Array","isArray","MapBoundsUpdater","users","paths","_s2","forEach","latitude","longitude","push","path","parsedRoute","routePoints","floor","bounds","latLngBounds","fitBounds","_c2","MapClickHandler","routeMode","selectedSource","setSelectedSource","createPath","_s3","click","latlng","destination","_c3","UserLocationMap","_s4","liveUsers","fetchLiveUsers","fetchLivePaths","sendChatRequest","notifications","currentChat","openChat","activeChats","fetchActiveChats","usersWithLocation","setUsersWithLocation","isLoading","setIsLoading","lastUpdated","setLastUpdated","Date","pathsWithCoordinates","setPathsWithCoordinates","setRouteMode","showNotifications","setShowNotifications","mapRef","handleChatRequest","userId","then","response","catch","isMounted","loadMapData","toLocaleTimeString","timeSinceUpdate","round","intervalId","setInterval","clearInterval","filtered","u","processed","idx","isCurrentUser","route_wkt","warn","handleCreatePath","source","result","alert","message","toggleRouteMode","formatTime","date","centerLat","centerLng","reduce","sum","onClick","disabled","notificationCount","onClose","center","zoom","height","width","ref","attribution","url","username","toFixed","last_active","positions","weight","opacity","eventHandlers","mouseover","created_at","chat","otherParticipants","unreadCount","slice","jsx","_c4","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, useMapEvents } from 'react-leaflet';\nimport { LocationContext } from '../context/LocationContext';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport ChatDialog from './ChatDialog';\nimport NotificationsPanel from './NotificationsPanel';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './UserLocationMap.css';\nimport NotificationButton from './NotificationButton';\n// Fix for default icons\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments } from '@fortawesome/free-solid-svg-icons';\n\n// Debug component to display path information\nfunction DebugInfo() {\n  const { livePaths } = useContext(LocationContext);\n  const { user } = useContext(AuthContext);\n  \n  return (\n    <div style={{ \n      position: 'absolute', \n      bottom: '10px', \n      left: '10px', \n      backgroundColor: 'rgba(255,255,255,0.8)', \n      padding: '10px',\n      zIndex: 1000,\n      maxWidth: '300px',\n      maxHeight: '200px',\n      overflow: 'auto',\n      fontSize: '12px',\n      border: '1px solid #ccc'\n    }}>\n      <h4>Debug Info</h4>\n      <div>Raw Paths: {livePaths?.length || 0}</div>\n      <div>Current User: {user?.id || 'Unknown'}</div>\n      {livePaths && livePaths.length > 0 && (\n        <div>\n          <h5>First Path:</h5>\n          <div>ID: {livePaths[0].id}</div>\n          <div>User: {livePaths[0].user_id === user?.id ? 'Current User' : 'Other'}</div>\n          <div>Has Route: {livePaths[0].route ? 'Yes' : 'No'}</div>\n          <div>Route Start: {livePaths[0].route?.substring(0, 30)}...</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// Create custom icons\nconst createCustomIcon = (color) => {\n  return L.divIcon({\n    className: 'custom-div-icon',\n    html: `<div class=\"marker-pin\" style=\"background-color: ${color};\"></div>`,\n    iconSize: [30, 42],\n    iconAnchor: [15, 42]\n  });\n};\n\n// Enhanced parseRouteData function with extensive debugging\nconst parseRouteData = (routeData) => {\n  console.log(`[PARSE] Processing route data of type ${typeof routeData}`);\n  \n  if (!routeData) {\n    console.log('[PARSE] Route data is null or undefined');\n    return [];\n  }\n  \n  // LINESTRING parsing\n  if (typeof routeData === 'string' && routeData.startsWith('LINESTRING')) {\n    try {\n      console.log(`[PARSE] Parsing LINESTRING: ${routeData.substring(0, 50)}...`);\n      \n      // Strict WKT LINESTRING parsing\n      // Format is: LINESTRING(lon1 lat1, lon2 lat2, ...)\n      const lineString = routeData.trim();\n      \n      // Extract content within parentheses\n      const coordsText = lineString.substring(\n        lineString.indexOf('(') + 1, \n        lineString.lastIndexOf(')')\n      );\n      \n      // Split by commas to get each point\n      const pointStrings = coordsText.split(',');\n      console.log(`[PARSE] Found ${pointStrings.length} point strings`);\n      \n      if (pointStrings.length === 0) {\n        console.log('[PARSE] No points found in LINESTRING');\n        return [];\n      }\n      \n      // Parse each point string into [lat, lng] array\n      const points = pointStrings.map(pointStr => {\n        // Trim and split by space\n        const parts = pointStr.trim().split(' ');\n        \n        if (parts.length < 2) {\n          console.log(`[PARSE] Invalid point format: ${pointStr}`);\n          return null;\n        }\n        \n        // WKT format is longitude first, latitude second\n        // But Leaflet needs [lat, lng] format\n        const lng = parseFloat(parts[0]);\n        const lat = parseFloat(parts[1]);\n        \n        if (isNaN(lat) || isNaN(lng)) {\n          console.log(`[PARSE] Invalid coordinates: ${pointStr}`);\n          return null;\n        }\n        \n        return [lat, lng]; // Swapped for Leaflet's [lat, lng] format\n      }).filter(Boolean); // Remove any null points\n      \n      console.log(`[PARSE] Successfully parsed ${points.length} valid points`);\n      \n      // Validate first and last points\n      if (points.length > 0) {\n        const first = points[0];\n        const last = points[points.length - 1];\n        console.log(`[PARSE] First point: [${first[0]}, ${first[1]}]`);\n        console.log(`[PARSE] Last point: [${last[0]}, ${last[1]}]`);\n        \n        // Reduce excessive points for very long routes (optional)\n        let simplifiedPoints = points;\n        if (points.length > 500) {\n          console.log(`[PARSE] Simplifying path from ${points.length} to ~500 points`);\n          const factor = Math.ceil(points.length / 500);\n          simplifiedPoints = points.filter((_, i) => i % factor === 0 || i === points.length - 1);\n          console.log(`[PARSE] Simplified to ${simplifiedPoints.length} points`);\n        }\n        \n        return simplifiedPoints;\n      }\n      \n      return [];\n    } catch (e) {\n      console.error('[PARSE] Error parsing LINESTRING:', e);\n      console.error('[PARSE] Problematic route data:', routeData.substring(0, 100) + '...');\n      return [];\n    }\n  }\n  \n  // If it's already an array, make sure it's in the right format\n  if (Array.isArray(routeData)) {\n    console.log(`[PARSE] Route data is already an array with ${routeData.length} elements`);\n    return routeData;\n  }\n  \n  console.log('[PARSE] Unrecognized route data format');\n  return [];\n};\n\n// Component to update map bounds based on users' positions and routes\nfunction MapBoundsUpdater({ users, paths }) {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (!users.length && !paths.length) return;\n    \n    try {\n      const points = [];\n      \n      // Add user points\n      users.forEach(user => {\n        if (user.latitude && user.longitude) {\n          points.push([user.latitude, user.longitude]);\n        }\n      });\n      \n      // Add path points (with better handling for complex routes)\n      paths.forEach(path => {\n        if (path.parsedRoute && Array.isArray(path.parsedRoute)) {\n          // Don't add every point - just add first, last, and some in between\n          // to avoid overloading the bounds calculation with too many points\n          const routePoints = path.parsedRoute;\n          if (routePoints.length > 0) {\n            points.push(routePoints[0]); // Add first point\n            \n            if (routePoints.length > 10) {\n              // Add a few points in the middle for long routes\n              points.push(routePoints[Math.floor(routePoints.length / 3)]);\n              points.push(routePoints[Math.floor(routePoints.length * 2 / 3)]);\n            }\n            \n            if (routePoints.length > 1) {\n              points.push(routePoints[routePoints.length - 1]); // Add last point\n            }\n          }\n        }\n      });\n      \n      if (points.length > 0) {\n        const bounds = L.latLngBounds(points);\n        map.fitBounds(bounds, { padding: [50, 50] });\n      }\n    } catch (error) {\n      console.error('Error updating map bounds:', error);\n    }\n  }, [users, paths, map]);\n  \n  return null;\n}\n\n// Component to handle map clicks for route creation\nfunction MapClickHandler({ routeMode, selectedSource, setSelectedSource, createPath }) {\n  useMapEvents({\n    click: (e) => {\n      if (!routeMode) return;\n      \n      const { lat, lng } = e.latlng;\n      \n      if (!selectedSource) {\n        // Set source\n        setSelectedSource({ lat, lng });\n      } else {\n        // Set destination and create path\n        const destination = { lat, lng };\n        createPath(selectedSource, destination);\n        \n        // Reset route mode (this will be handled by parent component)\n      }\n    }\n  });\n  \n  return null;\n}\n\nconst UserLocationMap = () => {\n  const { liveUsers, fetchLiveUsers, livePaths, fetchLivePaths, createPath } = useContext(LocationContext);\n  const { user } = useContext(AuthContext);\n  // Get all the chat context values we need including activeChats\n  const { \n    sendChatRequest, \n    notifications, \n    currentChat, \n    openChat,\n    activeChats,\n    fetchActiveChats\n  } = useContext(ChatContext);\n  \n  const [usersWithLocation, setUsersWithLocation] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [pathsWithCoordinates, setPathsWithCoordinates] = useState([]);\n  const [routeMode, setRouteMode] = useState(false);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const mapRef = useRef(null);\n\n  // Chat request handler\n  const handleChatRequest = (userId) => {\n    if (userId === user.id) {\n      // Don't allow chatting with yourself\n      return;\n    }\n    \n    sendChatRequest(userId)\n      .then((response) => {\n        console.log('Chat request sent successfully:', response);\n      })\n      .catch((error) => {\n        console.error('Failed to send chat request:', error);\n      });\n  };\n\n  // Fetch active chats on component mount\n  useEffect(() => {\n    if (user && fetchActiveChats) {\n      fetchActiveChats();\n    }\n  }, [user, fetchActiveChats]);\n\n  useEffect(() => {\n    let isMounted = true;\n    \n    const loadMapData = async () => {\n      if (!isMounted || isLoading) return;\n      \n      console.log(`Map data refresh at ${new Date().toLocaleTimeString()}`);\n      \n      try {\n        // Only update if too much time has passed since last update\n        const timeSinceUpdate = new Date() - lastUpdated;\n        if (timeSinceUpdate > 25000) { // 25 seconds minimum\n          setIsLoading(true);\n          await fetchLiveUsers();\n          await fetchLivePaths();\n          setLastUpdated(new Date());\n        } else {\n          console.log(`Skipping refresh - only ${Math.round(timeSinceUpdate/1000)}s since last update`);\n        }\n      } catch (error) {\n        console.error('Error refreshing map data:', error);\n      } finally {\n        if (isMounted) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    // Initial load\n    loadMapData();\n    \n    // Set up a controlled interval with a single timer\n    // Use 30 seconds to reduce server load\n    const intervalId = setInterval(loadMapData, 30000);\n    \n    return () => {\n      isMounted = false;\n      clearInterval(intervalId);\n    };\n  }, [fetchLiveUsers, fetchLivePaths, lastUpdated, isLoading]);\n\n  useEffect(() => {\n    if (liveUsers) {\n      const filtered = liveUsers.filter(u => u.latitude && u.longitude);\n      setUsersWithLocation(filtered);\n    }\n  }, [liveUsers]);\n\n  // Updated effect for path processing\n  useEffect(() => {\n    console.log('[MAP] Processing livePaths update, count:', livePaths?.length || 0);\n    \n    if (!livePaths || !Array.isArray(livePaths) || livePaths.length === 0) {\n      console.log('[MAP] No paths to process, clearing display');\n      setPathsWithCoordinates([]);\n      return;\n    }\n    \n    try {\n      // Process each path\n      const processed = livePaths.map((path, idx) => {\n        console.log(`[MAP] Processing path ${idx}:`, { \n          id: path.id,\n          user_id: path.user_id,\n          isCurrentUser: path.user_id === user?.id\n        });\n        \n        // Check for route data\n        let routeData = path.route;\n        if (!routeData) {\n          // Try alternate property names\n          if (path.route_wkt) {\n            console.log(`[MAP] Path ${idx} has route_wkt instead of route`);\n            routeData = path.route_wkt;\n          } else {\n            console.log(`[MAP] Path ${idx} has no route data`);\n            return null;\n          }\n        }\n        \n        // Parse and validate the route\n        const parsedRoute = parseRouteData(routeData);\n        \n        if (!parsedRoute || parsedRoute.length === 0) {\n          console.log(`[MAP] Path ${idx} returned no valid coordinates`);\n          return null;\n        }\n        \n        console.log(`[MAP] Path ${idx} processed successfully with ${parsedRoute.length} points`);\n        \n        // Return the processed path\n        return {\n          ...path,\n          parsedRoute,\n          isCurrentUser: path.user_id === user?.id\n        };\n      }).filter(Boolean); // Remove null paths\n      \n      console.log(`[MAP] Processed ${processed.length} paths with valid coordinates`);\n      \n      if (processed.length === 0 && livePaths.length > 0) {\n        console.warn('[MAP] WARNING: All paths failed to process!');\n      }\n      \n      setPathsWithCoordinates(processed);\n    } catch (error) {\n      console.error('[MAP] Error processing paths:', error);\n      setPathsWithCoordinates([]);\n    }\n  }, [livePaths, user]);\n\n  // Updated createPath handler\n  const handleCreatePath = async (source, destination) => {\n    try {\n      console.log('[CREATE] Creating path from', source, 'to', destination);\n      setIsLoading(true);\n      \n      // Create the path\n      const result = await createPath(source, destination);\n      \n      console.log('[CREATE] Path created successfully:', result);\n      \n      // Force a fresh load of path data\n      console.log('[CREATE] Refreshing paths after creation...');\n      await fetchLivePaths(false);\n      \n      // Update UI state\n      setLastUpdated(new Date());\n      setRouteMode(false);\n      setSelectedSource(null);\n      \n      // Alert the user\n      alert('Path created successfully! If it doesn\\'t appear, click the Refresh Map button.');\n    } catch (error) {\n      console.error('[CREATE] Error creating path:', error);\n      alert('Failed to create path: ' + (error.message || 'Unknown error'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleRouteMode = () => {\n    setRouteMode(!routeMode);\n    if (routeMode) {\n      // If turning off, clear selected source\n      setSelectedSource(null);\n    }\n  };\n\n  const formatTime = (date) => {\n    if (!(date instanceof Date)) {\n      try {\n        date = new Date(date);\n      } catch (e) {\n        return 'Unknown';\n      }\n    }\n    return date.toLocaleTimeString();\n  };\n\n  if (isLoading && usersWithLocation.length === 0 && pathsWithCoordinates.length === 0) {\n    return <div className=\"map-loading\">Loading map...</div>;\n  }\n\n  // Calculate center point for map display or use a default\n  let centerLat = 0, centerLng = 0;\n  \n  if (usersWithLocation.length > 0) {\n    centerLat = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.latitude || 0), 0) / usersWithLocation.length;\n    centerLng = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.longitude || 0), 0) / usersWithLocation.length;\n  } else {\n    // Default to a central location if no users\n    centerLat = 0;\n    centerLng = 0;\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div className=\"map-header\">\n        <h3>Live User Map</h3>\n        <div className=\"map-controls\">\n          <button \n            className=\"refresh-button\"\n            onClick={async () => {\n              console.log('[MAP] Manual refresh requested');\n              setIsLoading(true);\n              try {\n                // Force immediate data refresh\n                await fetchLiveUsers();\n                await fetchLivePaths(false);\n                setLastUpdated(new Date());\n                \n                // Log what we have\n                console.log(`[MAP] Refresh complete - ${livePaths.length} paths available`);\n              } catch (error) {\n                console.error('[MAP] Error during refresh:', error);\n              } finally {\n                setIsLoading(false);\n              }\n            }}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Refreshing...' : '🔄 Refresh Map'}\n          </button>\n          \n          <div className=\"notification-controls\">\n            <NotificationButton \n              notificationCount={notifications ? notifications.length : 0}\n              onClick={() => setShowNotifications(!showNotifications)}\n            />\n            \n            {showNotifications && (\n              <NotificationsPanel onClose={() => setShowNotifications(false)} />\n            )}\n          </div>\n          \n          <button \n            className={`route-button ${routeMode ? 'active' : ''}`} \n            onClick={toggleRouteMode}\n          >\n            {routeMode ? 'Cancel Route' : 'Create Route'}\n          </button>\n          \n          {routeMode && !selectedSource && (\n            <div className=\"route-instructions\">Click on map to set starting point</div>\n          )}\n          \n          {routeMode && selectedSource && (\n            <div className=\"route-instructions\">Click on map to set destination</div>\n          )}\n          \n          <span className=\"last-updated\">\n            Last updated: {formatTime(lastUpdated)}\n          </span>\n        </div>\n      </div>\n      \n      <MapContainer \n        center={[centerLat, centerLng]} \n        zoom={3} \n        style={{ height: '600px', width: '100%' }}\n        ref={mapRef}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        {/* Add the Debug component */}\n        <DebugInfo />\n        \n        {/* Map click handler for route creation */}\n        <MapClickHandler \n          routeMode={routeMode} \n          selectedSource={selectedSource} \n          setSelectedSource={setSelectedSource} \n          createPath={handleCreatePath}\n        />\n        \n        {/* Display user markers */}\n        {usersWithLocation.map(u => (\n          <Marker \n            key={`user-${u.id}`} \n            position={[parseFloat(u.latitude), parseFloat(u.longitude)]}\n            icon={createCustomIcon(u.id === user?.id ? '#4285F4' : '#FF5722')}\n          >\n            <Popup>\n              <div className=\"user-popup\">\n                <h3>{u.username}</h3>\n                <div className=\"user-status\">\n                  <span className=\"status-dot\"></span>\n                  Online\n                </div>\n                <div className=\"user-location\">\n                  Coordinates: {parseFloat(u.latitude).toFixed(4)}, {parseFloat(u.longitude).toFixed(4)}\n                </div>\n                <div className=\"user-last-active\">\n                  Last active: {formatTime(u.last_active)}\n                </div>\n                {u.id === user?.id ? (\n                  <div className=\"current-user-tag\">This is you</div>\n                ) : (\n                  <div className=\"chat-button-container\">\n                    <button \n                      className=\"chat-request-button\"\n                      onClick={() => handleChatRequest(u.id)}\n                    >\n                      Chat with {u.username}\n                    </button>\n                  </div>\n                )}\n              </div>\n            </Popup>\n          </Marker>\n        ))}\n\n        {/* Display route source marker if in route mode */}\n        {routeMode && selectedSource && (\n          <Marker \n            position={[selectedSource.lat, selectedSource.lng]}\n            icon={createCustomIcon('#00C853')}\n          >\n            <Popup>Starting point</Popup>\n          </Marker>\n        )}\n        \n        {/* Display paths as polylines */}\n        {pathsWithCoordinates.map((path, idx) => {\n          console.log(`[RENDER] Rendering path ${idx}:`, {\n            id: path.id, \n            points: path.parsedRoute.length,\n            isCurrentUser: path.user_id === user?.id\n          });\n          \n          return (\n            <Polyline \n              key={`path-${path.id || idx}`} \n              positions={path.parsedRoute} \n              color={path.user_id === user?.id ? '#2196F3' : '#FF5722'} \n              weight={5} // Increased line weight for better visibility\n              opacity={0.8}\n              // Add event listeners for debugging\n              eventHandlers={{\n                mouseover: () => {\n                  console.log(`[RENDER] Path ${idx} mouseover:`, {\n                    id: path.id,\n                    user: path.user_id,\n                    points: path.parsedRoute.length\n                  });\n                }\n              }}\n            >\n              <Popup>\n                <div className=\"path-popup\">\n                  <h4>Route Information</h4>\n                  <p><strong>User:</strong> {path.user_id === user?.id ? 'You' : (path.username || 'Other User')}</p>\n                  <p><strong>Created:</strong> {formatTime(path.created_at)}</p>\n                  {path.parsedRoute.length > 0 && (\n                    <>\n                      <p><strong>From:</strong> {path.parsedRoute[0][0].toFixed(4)}, {path.parsedRoute[0][1].toFixed(4)}</p>\n                      <p><strong>To:</strong> {path.parsedRoute[path.parsedRoute.length-1][0].toFixed(4)}, {path.parsedRoute[path.parsedRoute.length-1][1].toFixed(4)}</p>\n                      <p><strong>Points:</strong> {path.parsedRoute.length}</p>\n                    </>\n                  )}\n                </div>\n              </Popup>\n            </Polyline>\n          );\n        })}\n\n        {/* Map bounds updater component */}\n        <MapBoundsUpdater \n          users={usersWithLocation} \n          paths={pathsWithCoordinates} \n        />\n      </MapContainer>\n      \n      <div className=\"map-legend\">\n        <h4>Map Legend</h4>\n        <div className=\"legend-items\">\n          <div className=\"legend-item\">\n            <div className=\"legend-marker\" style={{ backgroundColor: '#4285F4' }}></div>\n            <span>Your location</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-marker\" style={{ backgroundColor: '#FF5722' }}></div>\n            <span>Other users</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#2196F3' }}></div>\n            <span>Your paths</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#FF5722' }}></div>\n            <span>Other users' paths</span>\n          </div>\n          {routeMode && (\n            <div className=\"legend-item\">\n              <div className=\"legend-marker\" style={{ backgroundColor: '#00C853' }}></div>\n              <span>Selected starting point</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Display path information and active chats panel */}\n      <div className=\"map-info-panel\">\n        <h4>Statistics</h4>\n        <div className=\"map-stats\">\n          <div className=\"stat-item\">\n            <strong>Active Users:</strong> {usersWithLocation.length}\n          </div>\n          <div className=\"stat-item\">\n            <strong>Active Paths:</strong> {pathsWithCoordinates.length}\n          </div>\n          <div className=\"stat-item\">\n            <strong>Last Updated:</strong> {formatTime(lastUpdated)}\n          </div>\n        </div>\n        \n        {/* New Active Chats Panel */}\n        <div className=\"active-chats\">\n          <h4>\n            <FontAwesomeIcon icon={faComments} /> Active Chats\n          </h4>\n          <div className=\"chats-list\">\n            {activeChats && activeChats.length > 0 ? (\n              activeChats.map(chat => (\n                <div \n                  key={chat.id} \n                  className=\"chat-item\"\n                  onClick={() => openChat(chat.id)}\n                >\n                  <div className=\"chat-user\">\n                    {chat.otherParticipants && chat.otherParticipants.length > 0 \n                      ? chat.otherParticipants[0].username \n                      : 'Unknown User'}\n                  </div>\n                  {chat.unreadCount > 0 && (\n                    <span className=\"unread-badge\">{chat.unreadCount}</span>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"no-chats\">No active chats</div>\n            )}\n          </div>\n        </div>\n        \n        {pathsWithCoordinates.length > 0 && (\n          <div className=\"recent-paths\">\n            <h4>Recent Paths</h4>\n            <div className=\"paths-list\">\n              {pathsWithCoordinates.slice(0, 5).map((path, idx) => (\n                <div key={idx} className=\"path-item\">\n                  <div className=\"path-header\">\n                    <strong>{path.username || 'Unknown user'}</strong>\n                    <span>{formatTime(path.created_at)}</span>\n                  </div>\n                  <div className=\"path-details\">\n                    {path.parsedRoute.length > 0 && (\n                      <>\n                        <small>\n                          From: {path.parsedRoute[0][0].toFixed(4)}, {path.parsedRoute[0][1].toFixed(4)}\n                        </small>\n                        <small>\n                          To: {path.parsedRoute[path.parsedRoute.length-1][0].toFixed(4)}, {path.parsedRoute[path.parsedRoute.length-1][1].toFixed(4)}\n                        </small>\n                        <small>\n                          Route Points: {path.parsedRoute.length}\n                        </small>\n                      </>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Chat dialog */}\n      {currentChat && <ChatDialog />}\n      \n      {/* CSS for refresh button */}\n      <style jsx>{`\n        .refresh-button {\n          background-color: #4CAF50;\n          color: white;\n          border: none;\n          padding: 8px 16px;\n          margin: 0 8px;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: bold;\n        }\n        \n        .refresh-button:hover {\n          background-color: #45a049;\n        }\n        \n        .refresh-button:disabled {\n          background-color: #cccccc;\n          cursor: not-allowed;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default UserLocationMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}