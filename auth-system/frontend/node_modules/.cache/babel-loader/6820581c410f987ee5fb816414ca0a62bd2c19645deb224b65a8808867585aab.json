{"ast":null,"code":"var _jsxFileName = \"/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  // Modify your createPath function in the LocationContext\n\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('Creating path between:', source, destination);\n\n      // Send the source and destination to the server\n      // The server will calculate the actual route using OSRM\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        // Special handling for inactive user error\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Enhance fetchLivePaths to handle the timestamp\n  const fetchLivePaths = async () => {\n    try {\n      var _response$data$data;\n      const response = await api.get('/path/live');\n\n      // Include timestamp in the live paths data\n      const timestamp = response.data.timestamp || new Date().toISOString();\n      console.log(`Fetched ${((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0} paths at ${timestamp}`);\n      setLivePaths(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      throw error;\n    }\n  };\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    setIsLoading(true);\n    try {\n      var _response$data$data2;\n      console.log('Fetching live users with auth token:', !!localStorage.getItem('token'));\n      const response = await api.get('/location/live');\n      console.log('Live users response:', response.data);\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      console.log(`Fetched ${((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.length) || 0} online users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching online users:', error);\n      setError('Failed to fetch online users');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all paths\n\n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      isLoading,\n      error,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      getCurrentPosition\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"8cb8TVxy9632MMca5sK60RRV8g0=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","isLoading","setIsLoading","error","setError","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","status","warn","_error$response","_error$response$data","message","_response$data$data","get","timestamp","Date","toISOString","length","fetchLiveUsers","_response$data$data2","localStorage","getItem","setLastUpdated","getCurrentPosition","navigator","geolocation","coords","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  // Modify your createPath function in the LocationContext\n\nconst createPath = async (source, destination) => {\n  if (!user) return;\n  \n  try {\n    console.log('Creating path between:', source, destination);\n    \n    // Send the source and destination to the server\n    // The server will calculate the actual route using OSRM\n    const response = await api.post('/path/set', {\n      source,\n      destination\n    });\n    \n    // Refresh paths after creating a new one\n    await fetchLivePaths();\n    \n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.status === 403) {\n      // Special handling for inactive user error\n      console.warn('User is not active enough to create paths');\n      setError('You must have an active location to create paths');\n    } else {\n      console.error('Error creating path:', error);\n      setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n    }\n    throw error;\n  }\n};\n\n// Enhance fetchLivePaths to handle the timestamp\nconst fetchLivePaths = async () => {\n  try {\n    const response = await api.get('/path/live');\n    \n    // Include timestamp in the live paths data\n    const timestamp = response.data.timestamp || new Date().toISOString();\n    console.log(`Fetched ${response.data.data?.length || 0} paths at ${timestamp}`);\n    \n    setLivePaths(response.data.data || []);\n    return response.data.data;\n  } catch (error) {\n    console.error('Error fetching paths:', error);\n    setError('Failed to fetch paths');\n    throw error;\n  }\n};\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    setIsLoading(true);\n    try {\n      console.log('Fetching live users with auth token:', !!localStorage.getItem('token'));\n      const response = await api.get('/location/live');\n      console.log('Live users response:', response.data);\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      console.log(`Fetched ${response.data.data?.length || 0} online users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching online users:', error);\n      setError('Failed to fetch online users');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all paths\n  \n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n    }\n  }, [user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        isLoading,\n        error,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        getCurrentPosition\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}