{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\n/**\n * LocationContext.jsx\n * Last updated: 2025-04-10 13:49:08\n * \n * Context provider for location-based path visibility:\n * - Users are only visible if they are physically located along another user's path\n * - Visibility is determined by physical location, not path intersection\n */\n\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [myPath, setMyPath] = useState(null); // Current user's selected path\n  const [usersAlongPath, setUsersAlongPath] = useState([]); // Users physically along my path - THESE ARE VISIBLE \n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius for path proximity\n\n  // Cache to prevent redundant updates\n  const dataCache = useRef({\n    pathHash: null,\n    usersAlongPathHash: null\n  });\n\n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    path: 0,\n    usersAlongPath: 0\n  });\n\n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    path: false,\n    usersAlongPath: false\n  });\n\n  // Simple hash function to compare data changes\n  const hashData = data => {\n    if (!data) return 'empty';\n    return JSON.stringify(data).split('').reduce((a, b) => (a << 5) - a + b.charCodeAt(0) | 0, 0).toString();\n  };\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      console.log(`[2025-04-10 13:49:08] Updating location for user ${user.username || '[unknown]'}: ${latitude}, ${longitude}`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:49:08] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n\n      // After location update, refresh users along path since visibility may have changed\n      // (other users might now be on your path, or you might now be on someone else's path)\n      fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log(`[2025-04-10 13:49:08] Creating path from [${source.lat}, ${source.lng}] to [${destination.lat}, ${destination.lng}]`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:49:08] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n\n      // Create the path\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Fetch my updated path\n      await fetchMyPath(true);\n\n      // Fetch users along my new path\n      await fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Update proximity radius for user filtering\n  const updateProximityRadius = radius => {\n    console.log(`[2025-04-10 13:49:08] Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n\n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Fetch the current user's path\n  const fetchMyPath = async (force = false) => {\n    if (!user) return null;\n\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.path && !force) {\n      return myPath;\n    }\n    const now = Date.now();\n    // Apply throttling for 2-second refresh\n    if (!force && now - fetchTimers.current.path < 300) {\n      return myPath;\n    }\n    try {\n      requestInProgress.current.path = true;\n      fetchTimers.current.path = now;\n\n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n\n      // Get only current user's path\n      const response = await api.get('/path/live');\n\n      // This should return array with just one path (current user's)\n      const pathsData = response.data.data || [];\n      const currentPath = pathsData.length > 0 ? pathsData[0] : null;\n\n      // Only update UI if data has changed\n      const newPathHash = hashData(currentPath);\n      if (force || newPathHash !== dataCache.current.pathHash) {\n        if (force || !!currentPath !== !!myPath) {\n          console.log(`[2025-04-10 13:49:08] ${currentPath ? 'Found' : 'No'} current user path`);\n        }\n        dataCache.current.pathHash = newPathHash;\n        setMyPath(currentPath);\n      }\n      return currentPath;\n    } catch (error) {\n      console.error('Error fetching current user path:', error);\n      if (force) setError('Failed to fetch your path');\n      return myPath;\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.path = false;\n    }\n  };\n\n  // Fetch users who are physically located along the current user's path\n  // These are the only users visible to the current user\n  const fetchUsersAlongPath = async (force = false) => {\n    if (!user) return [];\n\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      return usersAlongPath;\n    }\n    const now = Date.now();\n    // Apply throttling for 2-second refresh\n    if (!force && now - fetchTimers.current.usersAlongPath < 300) {\n      return usersAlongPath;\n    }\n    try {\n      requestInProgress.current.usersAlongPath = true;\n      fetchTimers.current.usersAlongPath = now;\n\n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      const response = await api.get(`/location/along-my-path?radius=${proximityRadius}`);\n      const usersData = response.data.data || [];\n\n      // Only update UI if data has changed\n      const newDataHash = hashData(usersData);\n      if (force || newDataHash !== dataCache.current.usersAlongPathHash) {\n        if (force || usersData.length !== usersAlongPath.length) {\n          console.log(`[2025-04-10 13:49:08] Found ${usersData.length} users physically located along your path`);\n        }\n        dataCache.current.usersAlongPathHash = newDataHash;\n        setUsersAlongPath(usersData);\n        setLastUpdated(new Date());\n      }\n      return usersData;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        if (force || usersAlongPath.length > 0) {\n          console.log('[2025-04-10 13:49:08] No path found for current user');\n          setUsersAlongPath([]);\n          dataCache.current.usersAlongPathHash = hashData([]);\n        }\n        return [];\n      } else {\n        console.error('Error fetching users along path:', error);\n        if (force) setError('Failed to fetch users along your path');\n        return usersAlongPath;\n      }\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"[2025-04-10 13:49:08] Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        path: 0,\n        usersAlongPath: 0\n      };\n\n      // Reset data hashes to force UI updates\n      dataCache.current = {\n        pathHash: null,\n        usersAlongPathHash: null\n      };\n\n      // First get current path\n      const pathData = await fetchMyPath(true);\n\n      // Then get users along path\n      const usersData = await fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      return {\n        path: pathData,\n        usersAlongPath: usersData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup \n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n\n      // Do initial data load\n      const initialLoad = async () => {\n        console.log('[2025-04-10 13:49:08] Performing initial data load for user', user.username || '[unknown]');\n        if (!user.username) {\n          console.error('[2025-04-10 13:49:08] Missing username for API operation');\n          setError('Your profile information is incomplete. Please log out and log in again.');\n          return;\n        }\n        try {\n          await fetchMyPath(true);\n          await fetchUsersAlongPath(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      initialLoad();\n\n      // Set up high-frequency polling (2 seconds)\n      const intervalId = setInterval(() => {\n        // These request won't show loading indicators or trigger error states unless there's a significant change\n        fetchMyPath().catch(err => {\n          if (err.message !== 'canceled') console.error('Failed to fetch current path:', err);\n        });\n        fetchUsersAlongPath().catch(err => {\n          if (err.message !== 'canceled' && !(err.response && err.response.status === 404)) {\n            console.error('Failed to fetch users along path:', err);\n          }\n        });\n      }, 2000); // 2 seconds refresh interval\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  // Effect to refetch users along path when radius changes\n  useEffect(() => {\n    if (user && fetchTimers.current.usersAlongPath > 0) {\n      // Only if not first load\n      console.log(`[2025-04-10 13:49:08] Proximity radius changed to ${proximityRadius}m, refreshing users along path`);\n      fetchUsersAlongPath(true).catch(err => console.error('Failed to fetch users along path after radius change:', err));\n    }\n  }, [proximityRadius, user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      myPath,\n      usersAlongPath,\n      // These are the only users visible to the current user\n      isLoading,\n      error,\n      lastUpdated,\n      proximityRadius,\n      updateLocation,\n      createPath,\n      fetchMyPath,\n      fetchUsersAlongPath,\n      updateProximityRadius,\n      getCurrentPosition,\n      forceRefreshData,\n      // Expose function to check visibility\n      isUserVisible: userId => usersAlongPath.some(u => u.id === userId)\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"GkHPHDGlaSXf8NBKmXIQ2OAi+c0=\");\n_c = LocationProvider;\nexport default LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","myPath","setMyPath","usersAlongPath","setUsersAlongPath","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","proximityRadius","setProximityRadius","dataCache","pathHash","usersAlongPathHash","fetchTimers","path","requestInProgress","hashData","data","JSON","stringify","split","reduce","a","b","charCodeAt","toString","updateLocation","latitude","longitude","console","log","username","response","post","fetchUsersAlongPath","createPath","source","destination","lat","lng","fetchMyPath","status","warn","_error$response","_error$response$data","message","updateProximityRadius","radius","force","current","now","get","pathsData","currentPath","length","newPathHash","usersData","newDataHash","getCurrentPosition","navigator","geolocation","coords","catch","err","forceRefreshData","pathData","initialLoad","intervalId","setInterval","clearInterval","Provider","value","isUserVisible","userId","some","u","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["/**\n * LocationContext.jsx\n * Last updated: 2025-04-10 13:49:08\n * \n * Context provider for location-based path visibility:\n * - Users are only visible if they are physically located along another user's path\n * - Visibility is determined by physical location, not path intersection\n */\n\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [myPath, setMyPath] = useState(null); // Current user's selected path\n  const [usersAlongPath, setUsersAlongPath] = useState([]); // Users physically along my path - THESE ARE VISIBLE \n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius for path proximity\n  \n  // Cache to prevent redundant updates\n  const dataCache = useRef({\n    pathHash: null,\n    usersAlongPathHash: null\n  });\n  \n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    path: 0,\n    usersAlongPath: 0\n  });\n  \n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    path: false,\n    usersAlongPath: false\n  });\n\n  // Simple hash function to compare data changes\n  const hashData = (data) => {\n    if (!data) return 'empty';\n    return JSON.stringify(data)\n      .split('')\n      .reduce((a, b) => (((a << 5) - a) + b.charCodeAt(0))|0, 0)\n      .toString();\n  };\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      console.log(`[2025-04-10 13:49:08] Updating location for user ${user.username || '[unknown]'}: ${latitude}, ${longitude}`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:49:08] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      \n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      \n      // After location update, refresh users along path since visibility may have changed\n      // (other users might now be on your path, or you might now be on someone else's path)\n      fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log(`[2025-04-10 13:49:08] Creating path from [${source.lat}, ${source.lng}] to [${destination.lat}, ${destination.lng}]`);\n      if (!user.username) {\n        console.error('[2025-04-10 13:49:08] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      \n      // Create the path\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Fetch my updated path\n      await fetchMyPath(true);\n      \n      // Fetch users along my new path\n      await fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Update proximity radius for user filtering\n  const updateProximityRadius = (radius) => {\n    console.log(`[2025-04-10 13:49:08] Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n    \n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Fetch the current user's path\n  const fetchMyPath = async (force = false) => {\n    if (!user) return null;\n    \n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.path && !force) {\n      return myPath;\n    }\n    \n    const now = Date.now();\n    // Apply throttling for 2-second refresh\n    if (!force && now - fetchTimers.current.path < 300) {\n      return myPath;\n    }\n    \n    try {\n      requestInProgress.current.path = true;\n      fetchTimers.current.path = now;\n      \n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      \n      // Get only current user's path\n      const response = await api.get('/path/live');\n      \n      // This should return array with just one path (current user's)\n      const pathsData = response.data.data || [];\n      const currentPath = pathsData.length > 0 ? pathsData[0] : null;\n      \n      // Only update UI if data has changed\n      const newPathHash = hashData(currentPath);\n      if (force || newPathHash !== dataCache.current.pathHash) {\n        if (force || (!!currentPath !== !!myPath)) {\n          console.log(`[2025-04-10 13:49:08] ${currentPath ? 'Found' : 'No'} current user path`);\n        }\n        \n        dataCache.current.pathHash = newPathHash;\n        setMyPath(currentPath);\n      }\n      \n      return currentPath;\n    } catch (error) {\n      console.error('Error fetching current user path:', error);\n      if (force) setError('Failed to fetch your path');\n      return myPath;\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.path = false;\n    }\n  };\n\n  // Fetch users who are physically located along the current user's path\n  // These are the only users visible to the current user\n  const fetchUsersAlongPath = async (force = false) => {\n    if (!user) return [];\n    \n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      return usersAlongPath;\n    }\n    \n    const now = Date.now();\n    // Apply throttling for 2-second refresh\n    if (!force && now - fetchTimers.current.usersAlongPath < 300) {\n      return usersAlongPath;\n    }\n    \n    try {\n      requestInProgress.current.usersAlongPath = true;\n      fetchTimers.current.usersAlongPath = now;\n      \n      // Avoid affecting UI with loading state for frequent refreshes\n      if (force) setIsLoading(true);\n      \n      const response = await api.get(`/location/along-my-path?radius=${proximityRadius}`);\n      const usersData = response.data.data || [];\n      \n      // Only update UI if data has changed\n      const newDataHash = hashData(usersData);\n      if (force || newDataHash !== dataCache.current.usersAlongPathHash) {\n        if (force || usersData.length !== usersAlongPath.length) {\n          console.log(`[2025-04-10 13:49:08] Found ${usersData.length} users physically located along your path`);\n        }\n        \n        dataCache.current.usersAlongPathHash = newDataHash;\n        setUsersAlongPath(usersData);\n        setLastUpdated(new Date());\n      }\n      \n      return usersData;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        if (force || usersAlongPath.length > 0) {\n          console.log('[2025-04-10 13:49:08] No path found for current user');\n          setUsersAlongPath([]);\n          dataCache.current.usersAlongPathHash = hashData([]);\n        }\n        return [];\n      } else {\n        console.error('Error fetching users along path:', error);\n        if (force) setError('Failed to fetch users along your path');\n        return usersAlongPath;\n      }\n    } finally {\n      if (force) setIsLoading(false);\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n  \n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh data function - useful for manual refresh button\n  const forceRefreshData = async () => {\n    console.log(\"[2025-04-10 13:49:08] Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Bypass throttling\n      fetchTimers.current = {\n        path: 0,\n        usersAlongPath: 0\n      };\n      \n      // Reset data hashes to force UI updates\n      dataCache.current = {\n        pathHash: null,\n        usersAlongPathHash: null\n      };\n      \n      // First get current path\n      const pathData = await fetchMyPath(true);\n      \n      // Then get users along path\n      const usersData = await fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      return { \n        path: pathData, \n        usersAlongPath: usersData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Initial setup \n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n      \n      // Do initial data load\n      const initialLoad = async () => {\n        console.log('[2025-04-10 13:49:08] Performing initial data load for user', user.username || '[unknown]');\n        if (!user.username) {\n          console.error('[2025-04-10 13:49:08] Missing username for API operation');\n          setError('Your profile information is incomplete. Please log out and log in again.');\n          return;\n        }\n        try {\n          await fetchMyPath(true);\n          await fetchUsersAlongPath(true);\n        } catch (error) {\n          console.error('Error in initial data load:', error);\n        }\n      };\n      \n      initialLoad();\n      \n      // Set up high-frequency polling (2 seconds)\n      const intervalId = setInterval(() => {\n        // These request won't show loading indicators or trigger error states unless there's a significant change\n        fetchMyPath().catch(err => {\n          if (err.message !== 'canceled') console.error('Failed to fetch current path:', err);\n        });\n        \n        fetchUsersAlongPath().catch(err => {\n          if (err.message !== 'canceled' && !(err.response && err.response.status === 404)) {\n            console.error('Failed to fetch users along path:', err);\n          }\n        });\n      }, 2000); // 2 seconds refresh interval\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  // Effect to refetch users along path when radius changes\n  useEffect(() => {\n    if (user && fetchTimers.current.usersAlongPath > 0) { // Only if not first load\n      console.log(`[2025-04-10 13:49:08] Proximity radius changed to ${proximityRadius}m, refreshing users along path`);\n      fetchUsersAlongPath(true).catch(err => console.error('Failed to fetch users along path after radius change:', err));\n    }\n  }, [proximityRadius, user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        myPath,\n        usersAlongPath, // These are the only users visible to the current user\n        isLoading,\n        error,\n        lastUpdated,\n        proximityRadius,\n        updateLocation,\n        createPath,\n        fetchMyPath,\n        fetchUsersAlongPath,\n        updateProximityRadius,\n        getCurrentPosition,\n        forceRefreshData,\n        // Expose function to check visibility\n        isUserVisible: (userId) => usersAlongPath.some(u => u.id === userId)\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n\nexport default LocationProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}