{"ast":null,"code":"// This adds to your existing component\n// Inside the handleSubmit function:\n\nconst handleSubmit = async () => {\n  if (!selectedSource || !selectedDestination) {\n    setMessage({\n      type: 'error',\n      text: 'Please select both your current location and destination.'\n    });\n    return;\n  }\n  setIsUpdating(true);\n  setDebugInfo('Starting update process...');\n  try {\n    // Update current location on server\n    setDebugInfo('Updating location...');\n    await updateLocation(selectedSource.latitude, selectedSource.longitude);\n\n    // Prepare the path data\n    const sourcePoint = {\n      lat: selectedSource.latitude,\n      lng: selectedSource.longitude\n    };\n    const destPoint = {\n      lat: selectedDestination.latitude,\n      lng: selectedDestination.longitude\n    };\n    setDebugInfo('Sending path data to server for route calculation...');\n\n    // We no longer create the routeWKT here - the server will handle it\n    // Just send source and destination points\n    const response = await sendPathToServer(sourcePoint, destPoint);\n    if (response.routeWKT) {\n      setDebugInfo(`Server calculated route with ${response.routeWKT.split(',').length} points`);\n    }\n    setDebugInfo('Update completed successfully');\n    setMessage({\n      type: 'success',\n      text: `Location updated to ${selectedSource.name} and route to ${selectedDestination.name} created.`\n    });\n  } catch (error) {\n    console.error('Failed to update location/path:', error);\n\n    // Better error handling\n    let errorMessage = 'Failed to update. Please try again.';\n    if (error.response && error.response.data && error.response.data.message) {\n      errorMessage = error.response.data.message;\n\n      // Special handling for inactive user error\n      if (errorMessage.includes('Only active users')) {\n        errorMessage = 'Your location needs to be updated first. Please try again in a moment.';\n      }\n    }\n    setMessage({\n      type: 'error',\n      text: errorMessage\n    });\n  } finally {\n    setIsUpdating(false);\n  }\n};\n\n// Update sendPathToServer function\nconst sendPathToServer = async (source, destination) => {\n  setDebugInfo('Preparing to send path data to server...');\n  try {\n    console.log('Sending path data:', {\n      endpoint: '/path/set',\n      payload: {\n        source,\n        destination\n      }\n    });\n    const token = localStorage.getItem('token');\n    const response = await fetch('http://localhost:5000/api/path/set', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        source,\n        destination\n      })\n    });\n    const data = await response.json();\n    console.log('Path API response:', data);\n    setDebugInfo(`API response received: ${response.status} - ${JSON.stringify(data)}`);\n    if (!response.ok) {\n      throw {\n        response: {\n          data\n        }\n      };\n    }\n    return data;\n  } catch (error) {\n    console.error('Path API error details:', error);\n    setDebugInfo(`Error: ${error.message || 'Unknown error'}`);\n    throw error;\n  }\n};","map":{"version":3,"names":["handleSubmit","selectedSource","selectedDestination","setMessage","type","text","setIsUpdating","setDebugInfo","updateLocation","latitude","longitude","sourcePoint","lat","lng","destPoint","response","sendPathToServer","routeWKT","split","length","name","error","console","errorMessage","data","message","includes","source","destination","log","endpoint","payload","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","json","status","ok"],"sources":["/home/projectwork/project/project_6/auth-system/frontend/src/components/LocationSelector.js"],"sourcesContent":["// This adds to your existing component\n// Inside the handleSubmit function:\n\nconst handleSubmit = async () => {\n  if (!selectedSource || !selectedDestination) {\n    setMessage({ type: 'error', text: 'Please select both your current location and destination.' });\n    return;\n  }\n  \n  setIsUpdating(true);\n  setDebugInfo('Starting update process...');\n  \n  try {\n    // Update current location on server\n    setDebugInfo('Updating location...');\n    await updateLocation(selectedSource.latitude, selectedSource.longitude);\n    \n    // Prepare the path data\n    const sourcePoint = {\n      lat: selectedSource.latitude,\n      lng: selectedSource.longitude\n    };\n    \n    const destPoint = {\n      lat: selectedDestination.latitude,\n      lng: selectedDestination.longitude\n    };\n    \n    setDebugInfo('Sending path data to server for route calculation...');\n    \n    // We no longer create the routeWKT here - the server will handle it\n    // Just send source and destination points\n    const response = await sendPathToServer(sourcePoint, destPoint);\n    \n    if (response.routeWKT) {\n      setDebugInfo(`Server calculated route with ${response.routeWKT.split(',').length} points`);\n    }\n    \n    setDebugInfo('Update completed successfully');\n    setMessage({ \n      type: 'success', \n      text: `Location updated to ${selectedSource.name} and route to ${selectedDestination.name} created.`\n    });\n  } catch (error) {\n    console.error('Failed to update location/path:', error);\n    \n    // Better error handling\n    let errorMessage = 'Failed to update. Please try again.';\n    \n    if (error.response && error.response.data && error.response.data.message) {\n      errorMessage = error.response.data.message;\n      \n      // Special handling for inactive user error\n      if (errorMessage.includes('Only active users')) {\n        errorMessage = 'Your location needs to be updated first. Please try again in a moment.';\n      }\n    }\n    \n    setMessage({ type: 'error', text: errorMessage });\n  } finally {\n    setIsUpdating(false);\n  }\n};\n\n// Update sendPathToServer function\nconst sendPathToServer = async (source, destination) => {\n  setDebugInfo('Preparing to send path data to server...');\n  \n  try {\n    console.log('Sending path data:', {\n      endpoint: '/path/set',\n      payload: { source, destination }\n    });\n    \n    const token = localStorage.getItem('token');\n    const response = await fetch('http://localhost:5000/api/path/set', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        source,\n        destination\n      })\n    });\n    \n    const data = await response.json();\n    \n    console.log('Path API response:', data);\n    setDebugInfo(`API response received: ${response.status} - ${JSON.stringify(data)}`);\n    \n    if (!response.ok) {\n      throw { response: { data } };\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Path API error details:', error);\n    setDebugInfo(`Error: ${error.message || 'Unknown error'}`);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}