{"ast":null,"code":"var _jsxFileName = \"/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [loadingPaths, setLoadingPaths] = useState(false);\n\n  // Update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude,\n        lastUpdated: new Date()\n      });\n      // Also update online status\n      await updateOnlineStatus(true);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async isOnline => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', {\n        isOnline\n      });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch live user locations\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Create a new path between source and destination\n  const createPath = async (source, destination) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      // Refresh the paths list after creating a new path\n      await fetchLivePaths();\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create path:', error);\n      return null;\n    }\n  };\n\n  // Fetch all paths for the current user\n  const fetchUserPaths = async () => {\n    if (!isAuthenticated) return [];\n    try {\n      const response = await api.get('/path/list');\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Failed to fetch user paths:', error);\n      return [];\n    }\n  };\n\n  // Fetch live paths from all users\n  const fetchLivePaths = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingPaths(true);\n    try {\n      const response = await api.get('/path/live');\n      setLivePaths(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live paths:', error);\n      return [];\n    } finally {\n      setLoadingPaths(false);\n    }\n  };\n\n  // When user logs in, update online status and try to load existing location\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n      // Load initial data\n      fetchLiveUsers();\n      fetchLivePaths();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n      setLiveUsers([]);\n      setLivePaths([]);\n    }\n  }, [isAuthenticated]);\n\n  // Set up periodic refreshes\n  useEffect(() => {\n    if (!isAuthenticated) return;\n    const userInterval = setInterval(() => {\n      fetchLiveUsers();\n    }, 30000); // Refresh every 30 seconds\n\n    const pathInterval = setInterval(() => {\n      fetchLivePaths();\n    }, 60000); // Refresh every minute\n\n    return () => {\n      clearInterval(userInterval);\n      clearInterval(pathInterval);\n    };\n  }, [isAuthenticated]);\n\n  // Handle page unload to update online status\n  useEffect(() => {\n    const handleBeforeUnload = () => updateOnlineStatus(false);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      loadingUsers,\n      loadingPaths,\n      updateLocation,\n      updateOnlineStatus,\n      fetchLiveUsers,\n      createPath,\n      fetchUserPaths,\n      fetchLivePaths\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"e6mULFaY6RGXrWnYMNyARzpMwiY=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","isAuthenticated","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","loadingUsers","setLoadingUsers","loadingPaths","setLoadingPaths","updateLocation","latitude","longitude","response","post","lastUpdated","Date","updateOnlineStatus","data","error","console","isOnline","fetchLiveUsers","get","createPath","source","destination","fetchLivePaths","fetchUserPaths","userInterval","setInterval","pathInterval","clearInterval","handleBeforeUnload","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { isAuthenticated } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [loadingPaths, setLoadingPaths] = useState(false);\n\n  // Update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ \n        latitude, \n        longitude, \n        lastUpdated: new Date() \n      });\n      // Also update online status\n      await updateOnlineStatus(true);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async (isOnline) => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', { isOnline });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch live user locations\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Create a new path between source and destination\n  const createPath = async (source, destination) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/path/set', { source, destination });\n      // Refresh the paths list after creating a new path\n      await fetchLivePaths();\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create path:', error);\n      return null;\n    }\n  };\n\n  // Fetch all paths for the current user\n  const fetchUserPaths = async () => {\n    if (!isAuthenticated) return [];\n    try {\n      const response = await api.get('/path/list');\n      return response.data.data || [];\n    } catch (error) {\n      console.error('Failed to fetch user paths:', error);\n      return [];\n    }\n  };\n\n  // Fetch live paths from all users\n  const fetchLivePaths = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingPaths(true);\n    try {\n      const response = await api.get('/path/live');\n      setLivePaths(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live paths:', error);\n      return [];\n    } finally {\n      setLoadingPaths(false);\n    }\n  };\n\n  // When user logs in, update online status and try to load existing location\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n      // Load initial data\n      fetchLiveUsers();\n      fetchLivePaths();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n      setLiveUsers([]);\n      setLivePaths([]);\n    }\n  }, [isAuthenticated]);\n\n  // Set up periodic refreshes\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const userInterval = setInterval(() => {\n      fetchLiveUsers();\n    }, 30000); // Refresh every 30 seconds\n\n    const pathInterval = setInterval(() => {\n      fetchLivePaths();\n    }, 60000); // Refresh every minute\n\n    return () => {\n      clearInterval(userInterval);\n      clearInterval(pathInterval);\n    };\n  }, [isAuthenticated]);\n\n  // Handle page unload to update online status\n  useEffect(() => {\n    const handleBeforeUnload = () => updateOnlineStatus(false);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        loadingUsers,\n        loadingPaths,\n        updateLocation,\n        updateOnlineStatus,\n        fetchLiveUsers,\n        createPath,\n        fetchUserPaths,\n        fetchLivePaths\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}