{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Track last API call times and pending status\n  const lastApiCall = useRef({\n    notifications: 0,\n    chats: 0,\n    messages: 0\n  });\n\n  // Track if requests are in progress to prevent duplicates\n  const pendingRequests = useRef({\n    notifications: false,\n    chats: false,\n    messages: false\n  });\n\n  // Helper to enforce minimum delay between API calls\n  const enforceApiDelay = async (key, minDelay = 5000) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall.current[key];\n\n    // If a request is already pending, don't make another one\n    if (pendingRequests.current[key]) {\n      console.log(`API call to ${key} already in progress, skipping`);\n      return false;\n    }\n\n    // If we've made a call too recently, wait until we can make another\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = minDelay - timeSinceLastCall;\n      console.log(`Throttling ${key} API call - waiting ${waitTime}ms`);\n      return new Promise(resolve => {\n        setTimeout(() => {\n          lastApiCall.current[key] = Date.now();\n          pendingRequests.current[key] = true;\n          resolve(true);\n        }, waitTime);\n      });\n    }\n\n    // Otherwise, proceed with the API call\n    lastApiCall.current[key] = now;\n    pendingRequests.current[key] = true;\n    return true;\n  };\n\n  // Delayed fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n\n    // If forced, bypass delay check\n    if (!force && !(await enforceApiDelay('notifications'))) {\n      return notifications; // Return cached data\n    }\n    try {\n      console.log(`[${new Date().toISOString()}] Fetching notifications for ${user.username || 'user'}...`);\n      const response = await api.get('/chat/notifications');\n\n      // Only update state if the notifications have changed\n      if (JSON.stringify(response.data.notifications) !== JSON.stringify(notifications)) {\n        setNotifications(response.data.notifications || []);\n      }\n      return response.data.notifications || [];\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      // Mark request as completed\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Delayed fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n\n    // If forced, bypass delay check\n    if (!force && !(await enforceApiDelay('chats'))) {\n      return activeChats; // Return cached data\n    }\n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Fetching active chats for ${user.username || 'user'}...`);\n      const response = await api.get('/chat/active');\n\n      // Only update state if the chats have changed\n      if (JSON.stringify(response.data.chats) !== JSON.stringify(activeChats)) {\n        setActiveChats(response.data.chats || []);\n      }\n      return response.data.chats || [];\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chats = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async recipientId => {\n    if (!user || !recipientId) return;\n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Sending chat request to: ${recipientId}...`);\n\n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const response = await api.post('/chat/request', {\n        recipientId\n      });\n\n      // Force refresh active chats (bypass throttling)\n      await fetchActiveChats(true);\n\n      // Store the chat request ID for monitoring\n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request with improved error handling\n  const acceptChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Accepting chat request: ${chatRoomId}...`);\n\n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const response = await api.post('/chat/accept', {\n        chatRoomId\n      });\n      console.log('Accept response:', response.data);\n\n      // Force refresh notifications and active chats (bypass throttling)\n      await fetchNotifications(true);\n      const updatedChats = await fetchActiveChats(true);\n      console.log('Looking for chat room in active chats');\n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      if (acceptedChat) {\n        console.log('Found accepted chat:', acceptedChat);\n        setCurrentChat(acceptedChat);\n\n        // Fetch messages for this chat (bypass throttling)\n        await fetchMessages(chatRoomId, true);\n      } else {\n        console.error('Accepted chat not found in active chats. Will retry...');\n        // Retry after a delay\n        setTimeout(async () => {\n          const retryChats = await fetchActiveChats(true);\n          const retryChat = retryChats.find(c => c.id === chatRoomId);\n          if (retryChat) {\n            console.log('Found chat on retry');\n            setCurrentChat(retryChat);\n            await fetchMessages(chatRoomId, true);\n          }\n        }, 2000);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      setError('Failed to accept chat request: ' + (error.message || 'Unknown error'));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request \n  const declineChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Declining chat request: ${chatRoomId}...`);\n\n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const response = await api.post('/chat/decline', {\n        chatRoomId\n      });\n\n      // Force refresh notifications (bypass throttling)\n      await fetchNotifications(true);\n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat with enhanced error handling\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    try {\n      console.log(`[${new Date().toISOString()}] Sending message to room: ${chatRoomId}...`);\n\n      // No delay for sending messages to maintain responsiveness\n\n      const response = await api.post('/chat/send', {\n        chatRoomId,\n        message\n      });\n\n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {\n        ...newMessage,\n        profiles: {\n          username: user.username\n        }\n      }]);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message: ' + error.message);\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat with better error handling and throttling\n  const fetchMessages = async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n\n    // If we already have an active chat and it's not forced, enforce delay\n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages; // Return cached messages\n    }\n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Fetching messages for room: ${chatRoomId}...`);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      if (response.data && Array.isArray(response.data.messages)) {\n        console.log(`Fetched ${response.data.messages.length} messages`);\n        setMessages(response.data.messages || []);\n        return response.data.messages;\n      } else {\n        console.error('Invalid messages response:', response.data);\n        setMessages([]);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages: ' + error.message);\n      setMessages([]);\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  };\n\n  // Open a chat with improved robustness\n  const openChat = async chatRoomId => {\n    try {\n      console.log(`[${new Date().toISOString()}] Opening chat: ${chatRoomId}...`);\n\n      // First check if this chat is in our current active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n\n      // If not found, try fetching fresh data (bypass throttling)\n      if (!chat) {\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n        await fetchMessages(chatRoomId, true); // Bypass throttling for initial open\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found - it may have been deleted or you no longer have access');\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat: ' + error.message);\n    }\n  };\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n\n  // Setup efficient polling with longer intervals\n  useEffect(() => {\n    if (user) {\n      console.log(`[${new Date().toISOString()}] Setting up chat polling for ${user.username || 'itsanubhav009'}...`);\n\n      // Initial load - force fetch\n      fetchNotifications(true);\n      fetchActiveChats(true);\n\n      // Check for any pending chat requests we sent\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        console.log('Found pending chat request, checking status:', pendingChatId);\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.hasJoined) {\n            console.log('Pending chat has been accepted, opening');\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n\n      // Set up polling with increased intervals (15 seconds for regular polling)\n      const notificationInterval = 15000; // Check notifications every 15 seconds\n      const chatInterval = 20000; // Check chats every 20 seconds\n      const messageInterval = currentChat ? 10000 : 30000; // Check messages more frequently if chat is open\n\n      // Separate timers for each type of poll to allow independent timing\n      const notificationTimer = setInterval(() => {\n        fetchNotifications();\n      }, notificationInterval);\n      const chatTimer = setInterval(() => {\n        fetchActiveChats();\n      }, chatInterval);\n      const messageTimer = setInterval(() => {\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, messageInterval);\n      return () => {\n        clearInterval(notificationTimer);\n        clearInterval(chatTimer);\n        clearInterval(messageTimer);\n      };\n    }\n  }, [user, currentChat]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      activeChats,\n      notifications,\n      currentChat,\n      messages,\n      loading,\n      error,\n      sendChatRequest,\n      acceptChatRequest,\n      declineChatRequest,\n      sendMessage,\n      fetchMessages,\n      openChat,\n      closeChat,\n      fetchActiveChats,\n      fetchNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"HY9uHSfhlKTUctCNGVRcgZs3OLA=\");\n_c = ChatProvider;\nexport default ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","useRef","api","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","activeChats","setActiveChats","notifications","setNotifications","currentChat","setCurrentChat","messages","setMessages","loading","setLoading","error","setError","lastApiCall","chats","pendingRequests","enforceApiDelay","key","minDelay","now","Date","timeSinceLastCall","current","console","log","waitTime","Promise","resolve","setTimeout","fetchNotifications","force","toISOString","username","response","get","JSON","stringify","data","fetchActiveChats","sendChatRequest","recipientId","post","localStorage","setItem","chatRoomId","_error$response","_error$response$data","message","acceptChatRequest","updatedChats","acceptedChat","find","c","id","fetchMessages","retryChats","retryChat","declineChatRequest","sendMessage","newMessage","chatMessage","prev","profiles","Array","isArray","length","openChat","chat","closeChat","pendingChatId","getItem","then","pendingChat","hasJoined","removeItem","notificationInterval","chatInterval","messageInterval","notificationTimer","setInterval","chatTimer","messageTimer","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Track last API call times and pending status\n  const lastApiCall = useRef({\n    notifications: 0,\n    chats: 0,\n    messages: 0\n  });\n  \n  // Track if requests are in progress to prevent duplicates\n  const pendingRequests = useRef({\n    notifications: false,\n    chats: false,\n    messages: false\n  });\n\n  // Helper to enforce minimum delay between API calls\n  const enforceApiDelay = async (key, minDelay = 5000) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall.current[key];\n    \n    // If a request is already pending, don't make another one\n    if (pendingRequests.current[key]) {\n      console.log(`API call to ${key} already in progress, skipping`);\n      return false;\n    }\n    \n    // If we've made a call too recently, wait until we can make another\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = minDelay - timeSinceLastCall;\n      console.log(`Throttling ${key} API call - waiting ${waitTime}ms`);\n      \n      return new Promise(resolve => {\n        setTimeout(() => {\n          lastApiCall.current[key] = Date.now();\n          pendingRequests.current[key] = true;\n          resolve(true);\n        }, waitTime);\n      });\n    }\n    \n    // Otherwise, proceed with the API call\n    lastApiCall.current[key] = now;\n    pendingRequests.current[key] = true;\n    return true;\n  };\n\n  // Delayed fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    // If forced, bypass delay check\n    if (!force && !(await enforceApiDelay('notifications'))) {\n      return notifications; // Return cached data\n    }\n    \n    try {\n      console.log(`[${new Date().toISOString()}] Fetching notifications for ${user.username || 'user'}...`);\n      const response = await api.get('/chat/notifications');\n      \n      // Only update state if the notifications have changed\n      if (JSON.stringify(response.data.notifications) !== JSON.stringify(notifications)) {\n        setNotifications(response.data.notifications || []);\n      }\n      \n      return response.data.notifications || [];\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      // Mark request as completed\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Delayed fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    // If forced, bypass delay check\n    if (!force && !(await enforceApiDelay('chats'))) {\n      return activeChats; // Return cached data\n    }\n    \n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Fetching active chats for ${user.username || 'user'}...`);\n      const response = await api.get('/chat/active');\n      \n      // Only update state if the chats have changed\n      if (JSON.stringify(response.data.chats) !== JSON.stringify(activeChats)) {\n        setActiveChats(response.data.chats || []);\n      }\n      \n      return response.data.chats || [];\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chats = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async (recipientId) => {\n    if (!user || !recipientId) return;\n    \n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Sending chat request to: ${recipientId}...`);\n      \n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const response = await api.post('/chat/request', { recipientId });\n      \n      // Force refresh active chats (bypass throttling)\n      await fetchActiveChats(true);\n      \n      // Store the chat request ID for monitoring\n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (error.response?.data?.message || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request with improved error handling\n  const acceptChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Accepting chat request: ${chatRoomId}...`);\n      \n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const response = await api.post('/chat/accept', { chatRoomId });\n      console.log('Accept response:', response.data);\n      \n      // Force refresh notifications and active chats (bypass throttling)\n      await fetchNotifications(true);\n      const updatedChats = await fetchActiveChats(true);\n      \n      console.log('Looking for chat room in active chats');\n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      \n      if (acceptedChat) {\n        console.log('Found accepted chat:', acceptedChat);\n        setCurrentChat(acceptedChat);\n        \n        // Fetch messages for this chat (bypass throttling)\n        await fetchMessages(chatRoomId, true);\n      } else {\n        console.error('Accepted chat not found in active chats. Will retry...');\n        // Retry after a delay\n        setTimeout(async () => {\n          const retryChats = await fetchActiveChats(true);\n          const retryChat = retryChats.find(c => c.id === chatRoomId);\n          if (retryChat) {\n            console.log('Found chat on retry');\n            setCurrentChat(retryChat);\n            await fetchMessages(chatRoomId, true);\n          }\n        }, 2000);\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      setError('Failed to accept chat request: ' + (error.message || 'Unknown error'));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request \n  const declineChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Declining chat request: ${chatRoomId}...`);\n      \n      // Add artificial delay of 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const response = await api.post('/chat/decline', { chatRoomId });\n      \n      // Force refresh notifications (bypass throttling)\n      await fetchNotifications(true);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat with enhanced error handling\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    \n    try {\n      console.log(`[${new Date().toISOString()}] Sending message to room: ${chatRoomId}...`);\n      \n      // No delay for sending messages to maintain responsiveness\n      \n      const response = await api.post('/chat/send', { chatRoomId, message });\n      \n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [\n        ...prev, \n        {...newMessage, profiles: { username: user.username }}\n      ]);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message: ' + error.message);\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat with better error handling and throttling\n  const fetchMessages = async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n    \n    // If we already have an active chat and it's not forced, enforce delay\n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages; // Return cached messages\n    }\n    \n    try {\n      setLoading(true);\n      console.log(`[${new Date().toISOString()}] Fetching messages for room: ${chatRoomId}...`);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      \n      if (response.data && Array.isArray(response.data.messages)) {\n        console.log(`Fetched ${response.data.messages.length} messages`);\n        setMessages(response.data.messages || []);\n        return response.data.messages;\n      } else {\n        console.error('Invalid messages response:', response.data);\n        setMessages([]);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages: ' + error.message);\n      setMessages([]);\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  };\n\n  // Open a chat with improved robustness\n  const openChat = async (chatRoomId) => {\n    try {\n      console.log(`[${new Date().toISOString()}] Opening chat: ${chatRoomId}...`);\n      \n      // First check if this chat is in our current active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      \n      // If not found, try fetching fresh data (bypass throttling)\n      if (!chat) {\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      \n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n        await fetchMessages(chatRoomId, true); // Bypass throttling for initial open\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found - it may have been deleted or you no longer have access');\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat: ' + error.message);\n    }\n  };\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n  \n  // Setup efficient polling with longer intervals\n  useEffect(() => {\n    if (user) {\n      console.log(`[${new Date().toISOString()}] Setting up chat polling for ${user.username || 'itsanubhav009'}...`);\n      \n      // Initial load - force fetch\n      fetchNotifications(true);\n      fetchActiveChats(true);\n      \n      // Check for any pending chat requests we sent\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        console.log('Found pending chat request, checking status:', pendingChatId);\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.hasJoined) {\n            console.log('Pending chat has been accepted, opening');\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n      \n      // Set up polling with increased intervals (15 seconds for regular polling)\n      const notificationInterval = 15000; // Check notifications every 15 seconds\n      const chatInterval = 20000;         // Check chats every 20 seconds\n      const messageInterval = currentChat ? 10000 : 30000; // Check messages more frequently if chat is open\n      \n      // Separate timers for each type of poll to allow independent timing\n      const notificationTimer = setInterval(() => {\n        fetchNotifications();\n      }, notificationInterval);\n      \n      const chatTimer = setInterval(() => {\n        fetchActiveChats();\n      }, chatInterval);\n      \n      const messageTimer = setInterval(() => {\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, messageInterval);\n      \n      return () => {\n        clearInterval(notificationTimer);\n        clearInterval(chatTimer);\n        clearInterval(messageTimer);\n      };\n    }\n  }, [user, currentChat]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        activeChats,\n        notifications,\n        currentChat,\n        messages,\n        loading,\n        error,\n        sendChatRequest,\n        acceptChatRequest,\n        declineChatRequest,\n        sendMessage,\n        fetchMessages,\n        openChat,\n        closeChat,\n        fetchActiveChats,\n        fetchNotifications\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}