{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on component mount\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      // Check if token exists in localStorage\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Fetch the user profile with the token\n          const response = await api.get('/auth/profile');\n          console.log('Profile data:', response.data);\n          setUser(response.data);\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Error validating token:', error);\n          // Invalid token, clear it\n          localStorage.removeItem('token');\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Login function with username (not email)\n  const login = async (username, password) => {\n    try {\n      console.log(`Attempting login with username: ${username}`);\n      if (!username || !password) {\n        return {\n          success: false,\n          message: 'Username and password are required'\n        };\n      }\n\n      // Make the login request with username\n      const response = await api.post('/auth/login', {\n        username,\n        password\n      });\n      console.log('Login response:', response.data);\n      const {\n        token,\n        user\n      } = response.data;\n      if (!token) {\n        return {\n          success: false,\n          message: 'No authentication token received'\n        };\n      }\n\n      // Save token to localStorage\n      localStorage.setItem('token', token);\n\n      // Update state\n      setUser(user);\n      setIsAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response;\n      console.error('Login error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n\n      // Provide more specific error messages\n      let errorMessage = 'Login failed. Please try again.';\n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = 'Invalid username or password.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        }\n      }\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.'\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkLoggedIn","token","localStorage","getItem","response","get","console","log","data","error","removeItem","login","username","password","success","message","post","setItem","_error$response","errorMessage","status","register","userData","_error$response2","_error$response2$data","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\n\n// Create the context\nexport const AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on component mount\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      // Check if token exists in localStorage\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        try {\n          // Fetch the user profile with the token\n          const response = await api.get('/auth/profile');\n          console.log('Profile data:', response.data);\n          setUser(response.data);\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Error validating token:', error);\n          // Invalid token, clear it\n          localStorage.removeItem('token');\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      }\n      \n      setLoading(false);\n    };\n    \n    checkLoggedIn();\n  }, []);\n\n  // Login function with username (not email)\n  const login = async (username, password) => {\n    try {\n      console.log(`Attempting login with username: ${username}`);\n      \n      if (!username || !password) {\n        return { \n          success: false, \n          message: 'Username and password are required' \n        };\n      }\n      \n      // Make the login request with username\n      const response = await api.post('/auth/login', { \n        username, \n        password \n      });\n      \n      console.log('Login response:', response.data);\n      \n      const { token, user } = response.data;\n      \n      if (!token) {\n        return {\n          success: false,\n          message: 'No authentication token received'\n        };\n      }\n      \n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      \n      // Update state\n      setUser(user);\n      setIsAuthenticated(true);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Login error details:', error.response?.data);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Login failed. Please try again.';\n      \n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = 'Invalid username or password.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        }\n      }\n      \n      return { \n        success: false, \n        message: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Registration failed. Please try again.' \n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    \n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        login,\n        register,\n        logout\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}