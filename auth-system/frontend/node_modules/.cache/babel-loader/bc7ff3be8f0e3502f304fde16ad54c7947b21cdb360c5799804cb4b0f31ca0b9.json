{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\n// Using direct URL without the /api prefix since that might be handled by your server already\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  // Remove /api if it's already part of your server routes\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to attach the JWT token to every request\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // If token exists, add it to the Authorization header\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n    console.log(`Adding token to request: ${config.url}`);\n  } else {\n    console.log(`No token available for request: ${config.url}`);\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    console.log('Unauthorized request - clearing token');\n\n    // Clear localStorage and redirect to login if token is invalid/expired\n    localStorage.removeItem('token');\n\n    // Only redirect if we're not already on the login page\n    if (!window.location.pathname.includes('/login')) {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","error","Promise","reject","response","_error$response","_error$response2","status","data","removeItem","window","location","pathname","includes","href"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\n// Using direct URL without the /api prefix since that might be handled by your server already\nconst api = axios.create({\n  baseURL: 'http://localhost:5000', // Remove /api if it's already part of your server routes\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to attach the JWT token to every request\napi.interceptors.request.use(\n  (config) => {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n    \n    // If token exists, add it to the Authorization header\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n      console.log(`Adding token to request: ${config.url}`);\n    } else {\n      console.log(`No token available for request: ${config.url}`);\n    }\n    \n    return config;\n  },\n  (error) => {\n    console.error('Request interceptor error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.status, error.response?.data);\n    \n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      console.log('Unauthorized request - clearing token');\n      \n      // Clear localStorage and redirect to login if token is invalid/expired\n      localStorage.removeItem('token');\n      \n      // Only redirect if we're not already on the login page\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IACnDG,OAAO,CAACC,GAAG,CAAC,4BAA4BL,MAAM,CAACM,GAAG,EAAE,CAAC;EACvD,CAAC,MAAM;IACLF,OAAO,CAACC,GAAG,CAAC,mCAAmCL,MAAM,CAACM,GAAG,EAAE,CAAC;EAC9D;EAEA,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACTH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EAClD,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACTR,OAAO,CAACG,KAAK,CAAC,YAAY,GAAAI,eAAA,GAAEJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,GAAAD,gBAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBE,IAAI,CAAC;;EAEzE;EACA,IAAIP,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACnDT,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;IAEpD;IACAH,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAChDH,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOZ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}