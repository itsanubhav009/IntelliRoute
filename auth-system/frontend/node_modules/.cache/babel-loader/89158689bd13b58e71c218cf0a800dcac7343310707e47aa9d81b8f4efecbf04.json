{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:5000',\n  // Adjust if needed based on your backend\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to attach the JWT token to every request\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // If token exists, add it to the Authorization header\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n    console.log(`Request with auth: ${config.method.toUpperCase()} ${config.url}`);\n  } else {\n    console.log(`Request without auth: ${config.method.toUpperCase()} ${config.url}`);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  console.log(`Response ${response.status} from ${response.config.url}`);\n  return response;\n}, error => {\n  if (error.response) {\n    console.error(`Error ${error.response.status} from ${error.config.url}:`, error.response.data);\n\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response.status === 401) {\n      // Clear localStorage and redirect to login if token is invalid/expired\n      localStorage.removeItem('token');\n\n      // Only redirect if we're not already on the login page\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n  } else if (error.request) {\n    console.error('No response received:', error.request);\n  } else {\n    console.error('Error setting up request:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","removeItem","window","location","pathname","includes","href","message"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: 'http://localhost:5000', // Adjust if needed based on your backend\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to attach the JWT token to every request\napi.interceptors.request.use(\n  (config) => {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n    \n    // If token exists, add it to the Authorization header\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n      console.log(`Request with auth: ${config.method.toUpperCase()} ${config.url}`);\n    } else {\n      console.log(`Request without auth: ${config.method.toUpperCase()} ${config.url}`);\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    console.log(`Response ${response.status} from ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      console.error(`Error ${error.response.status} from ${error.config.url}:`, \n                    error.response.data);\n      \n      // Handle 401 Unauthorized errors (token expired or invalid)\n      if (error.response.status === 401) {\n        // Clear localStorage and redirect to login if token is invalid/expired\n        localStorage.removeItem('token');\n        \n        // Only redirect if we're not already on the login page\n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login';\n        }\n      }\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error setting up request:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IACnDG,OAAO,CAACC,GAAG,CAAC,sBAAsBL,MAAM,CAACM,MAAM,CAACC,WAAW,CAAC,CAAC,IAAIP,MAAM,CAACQ,GAAG,EAAE,CAAC;EAChF,CAAC,MAAM;IACLJ,OAAO,CAACC,GAAG,CAAC,yBAAyBL,MAAM,CAACM,MAAM,CAACC,WAAW,CAAC,CAAC,IAAIP,MAAM,CAACQ,GAAG,EAAE,CAAC;EACnF;EAEA,OAAOR,MAAM;AACf,CAAC,EACAS,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,GAAG,CAACI,YAAY,CAACe,QAAQ,CAACb,GAAG,CAC1Ba,QAAQ,IAAK;EACZR,OAAO,CAACC,GAAG,CAAC,YAAYO,QAAQ,CAACC,MAAM,SAASD,QAAQ,CAACZ,MAAM,CAACQ,GAAG,EAAE,CAAC;EACtE,OAAOI,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClBR,OAAO,CAACK,KAAK,CAAC,SAASA,KAAK,CAACG,QAAQ,CAACC,MAAM,SAASJ,KAAK,CAACT,MAAM,CAACQ,GAAG,GAAG,EAC1DC,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;;IAElC;IACA,IAAIL,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjC;MACAX,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;;MAEhC;MACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAChDH,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAG,QAAQ;MACjC;IACF;EACF,CAAC,MAAM,IAAIX,KAAK,CAACX,OAAO,EAAE;IACxBM,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACX,OAAO,CAAC;EACvD,CAAC,MAAM;IACLM,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACY,OAAO,CAAC;EAC3D;EAEA,OAAOX,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}