{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext(null);\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    user\n  } = useContext(AuthContext) || {};\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [hasSelectedLocation, setHasSelectedLocation] = useState(false);\n\n  // Simulate API calls for now\n  const api = {\n    post: async (url, data) => {\n      console.log(`API POST to ${url}:`, data);\n      return {\n        data: {\n          success: true,\n          message: 'Operation successful'\n        }\n      };\n    },\n    get: async url => {\n      console.log(`API GET to ${url}`);\n      if (url === '/auth/profile') {\n        return {\n          data: {\n            username: 'itsanubhav009',\n            email: 'anubhav@example.com',\n            latitude: null,\n            longitude: null\n          }\n        };\n      }\n      if (url === '/location/live') {\n        return {\n          data: {\n            data: []\n          }\n        };\n      }\n      return {\n        data: {}\n      };\n    }\n  };\n\n  // Function to manually update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return null;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n\n      // Update position state with timestamp\n      setPosition({\n        latitude,\n        longitude,\n        lastUpdated: new Date().toISOString(),\n        isManuallySelected: true\n      });\n      setHasSelectedLocation(true);\n\n      // Also update online status\n      await updateOnlineStatus(true);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async isOnline => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', {\n        isOnline\n      });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch all live users\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Load saved location on login\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n\n      // Check if we have saved location data\n      const fetchProfile = async () => {\n        try {\n          const response = await api.get('/auth/profile');\n          if (response.data.latitude && response.data.longitude) {\n            setPosition({\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              lastUpdated: response.data.location_updated_at || new Date().toISOString(),\n              isManuallySelected: true\n            });\n            setHasSelectedLocation(true);\n          } else {\n            // No saved location, ensure position is null\n            setPosition(null);\n            setHasSelectedLocation(false);\n          }\n        } catch (error) {\n          console.error('Error fetching profile:', error);\n        }\n      };\n      fetchProfile();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n      setHasSelectedLocation(false);\n    }\n  }, [isAuthenticated]);\n\n  // Handle beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      updateOnlineStatus(false);\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Provide a value object with all the context data and functions\n  const value = {\n    position,\n    liveUsers,\n    loadingUsers,\n    hasSelectedLocation,\n    updateLocation,\n    updateOnlineStatus,\n    fetchLiveUsers\n  };\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"7Dum2pNwwb0/NajBscgYd3OXErI=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","isAuthenticated","user","position","setPosition","liveUsers","setLiveUsers","loadingUsers","setLoadingUsers","hasSelectedLocation","setHasSelectedLocation","api","post","url","data","console","log","success","message","get","username","email","latitude","longitude","updateLocation","response","lastUpdated","Date","toISOString","isManuallySelected","updateOnlineStatus","error","isOnline","fetchLiveUsers","fetchProfile","location_updated_at","handleBeforeUnload","window","addEventListener","removeEventListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\n\n// Create the context\nexport const LocationContext = createContext(null);\n\nexport const LocationProvider = ({ children }) => {\n  const { isAuthenticated, user } = useContext(AuthContext) || {};\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [hasSelectedLocation, setHasSelectedLocation] = useState(false);\n\n  // Simulate API calls for now\n  const api = {\n    post: async (url, data) => {\n      console.log(`API POST to ${url}:`, data);\n      return { data: { success: true, message: 'Operation successful' } };\n    },\n    get: async (url) => {\n      console.log(`API GET to ${url}`);\n      if (url === '/auth/profile') {\n        return { \n          data: { \n            username: 'itsanubhav009',\n            email: 'anubhav@example.com',\n            latitude: null,\n            longitude: null\n          } \n        };\n      }\n      if (url === '/location/live') {\n        return { data: { data: [] } };\n      }\n      return { data: {} };\n    }\n  };\n\n  // Function to manually update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return null;\n\n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      \n      // Update position state with timestamp\n      setPosition({ \n        latitude, \n        longitude, \n        lastUpdated: new Date().toISOString(),\n        isManuallySelected: true\n      });\n      \n      setHasSelectedLocation(true);\n\n      // Also update online status\n      await updateOnlineStatus(true);\n\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async (isOnline) => {\n    if (!isAuthenticated) return;\n    \n    try {\n      await api.post('/location/status', { isOnline });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch all live users\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    \n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Load saved location on login\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n      \n      // Check if we have saved location data\n      const fetchProfile = async () => {\n        try {\n          const response = await api.get('/auth/profile');\n          if (response.data.latitude && response.data.longitude) {\n            setPosition({\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              lastUpdated: response.data.location_updated_at || new Date().toISOString(),\n              isManuallySelected: true\n            });\n            setHasSelectedLocation(true);\n          } else {\n            // No saved location, ensure position is null\n            setPosition(null);\n            setHasSelectedLocation(false);\n          }\n        } catch (error) {\n          console.error('Error fetching profile:', error);\n        }\n      };\n      \n      fetchProfile();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n      setHasSelectedLocation(false);\n    }\n  }, [isAuthenticated]);\n\n  // Handle beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      updateOnlineStatus(false);\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Provide a value object with all the context data and functions\n  const value = {\n    position,\n    liveUsers,\n    loadingUsers,\n    hasSelectedLocation,\n    updateLocation,\n    updateOnlineStatus,\n    fetchLiveUsers\n  };\n\n  return (\n    <LocationContext.Provider value={value}>\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}