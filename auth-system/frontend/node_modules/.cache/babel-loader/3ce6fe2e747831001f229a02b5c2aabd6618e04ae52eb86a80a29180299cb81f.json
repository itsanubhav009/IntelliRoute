{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  // Start polling when user is authenticated\n  useEffect(() => {\n    if (user && !pollingInterval) {\n      // Initial load\n      fetchNotifications();\n      fetchActiveChats();\n\n      // Set up polling every 10 seconds\n      const interval = setInterval(() => {\n        fetchNotifications();\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, 10000);\n      setPollingInterval(interval);\n      return () => {\n        clearInterval(interval);\n        setPollingInterval(null);\n      };\n    }\n  }, [user, currentChat]);\n\n  // Add this to your useEffect in ChatContext.js where you set up polling\n\n  useEffect(() => {\n    if (user && !pollingInterval) {\n      // Initial load\n      fetchNotifications();\n      fetchActiveChats();\n\n      // Set up polling every 10 seconds\n      const interval = setInterval(() => {\n        // Fetch notifications and check for chat_accepted types\n        fetchNotifications().then(notifications => {\n          if (notifications && notifications.length > 0) {\n            // Look for any chat_accepted notifications to auto-open chat\n            const acceptedChat = notifications.find(n => n.type === 'chat_accepted');\n            if (acceptedChat) {\n              console.log('Found chat_accepted notification, opening chat:', acceptedChat.chat_room_id);\n              openChat(acceptedChat.chat_room_id);\n\n              // Mark this notification as read since we've acted on it\n              markNotificationRead(acceptedChat.id);\n            }\n          }\n        });\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, 5000); // Reduced to 5 seconds for better responsiveness\n\n      setPollingInterval(interval);\n      return () => {\n        clearInterval(interval);\n        setPollingInterval(null);\n      };\n    }\n  }, [user, currentChat]);\n\n  // Add this new function to mark notifications as read\n  const markNotificationRead = async notificationId => {\n    if (!user || !notificationId) return;\n    try {\n      await api.post('/chat/markNotificationRead', {\n        notificationId\n      });\n      // Refresh notifications after marking one as read\n      fetchNotifications();\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  // Fetch active chats for the current user\n  const fetchActiveChats = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      const response = await api.get('/chat/active');\n      setActiveChats(response.data.chats || []);\n      return response.data.chats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch chat notifications\n  const fetchNotifications = async () => {\n    if (!user) return;\n    try {\n      const response = await api.get('/chat/notifications');\n      setNotifications(response.data.notifications || []);\n      return response.data.notifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n\n  // Send a chat request to another user\n  const sendChatRequest = async recipientId => {\n    if (!user || !recipientId) return;\n    try {\n      setLoading(true);\n      const response = await api.post('/chat/request', {\n        recipientId\n      });\n\n      // Refresh active chats to include the new chat\n      await fetchActiveChats();\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request\n  // Replace the existing acceptChatRequest function in ChatContext.js\n\n  const acceptChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      console.log('Starting accept request process for chat room:', chatRoomId);\n      setLoading(true);\n      const response = await api.post('/chat/accept', {\n        chatRoomId\n      });\n      console.log('Chat acceptance API response:', response.data);\n\n      // Update the notification list\n      await fetchNotifications();\n\n      // Update active chats\n      const updatedChats = await fetchActiveChats();\n\n      // Find the accepted chat in the updated active chats\n      const acceptedChat = updatedChats.find(chat => chat.id === chatRoomId);\n      if (acceptedChat) {\n        console.log('Found accepted chat in active chats:', acceptedChat);\n        // Set this as the current chat\n        setCurrentChat(acceptedChat);\n\n        // Fetch messages for this chat\n        await fetchMessages(chatRoomId);\n      } else {\n        console.warn('Accepted chat not found in active chats list');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      setError('Failed to accept chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      const response = await api.post('/chat/decline', {\n        chatRoomId\n      });\n\n      // Update the notification list\n      await fetchNotifications();\n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    try {\n      const response = await api.post('/chat/send', {\n        chatRoomId,\n        message\n      });\n\n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {\n        ...newMessage,\n        profiles: {\n          username: user.username\n        }\n      }]);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      setMessages(response.data.messages || []);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Open a chat\n  // Replace the existing openChat function\n\n  const openChat = async chatRoomId => {\n    try {\n      console.log('Opening chat room:', chatRoomId);\n\n      // Check if it's already in active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      if (!chat) {\n        // If not found in current state, try to fetch fresh data\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats();\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n        await fetchMessages(chatRoomId);\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found');\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat');\n    }\n  };\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      activeChats,\n      notifications,\n      currentChat,\n      messages,\n      loading,\n      error,\n      sendChatRequest,\n      acceptChatRequest,\n      declineChatRequest,\n      sendMessage,\n      fetchMessages,\n      openChat,\n      closeChat,\n      fetchActiveChats,\n      fetchNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"8cOsFBxRZw2gGP3VD0m8+47QWsw=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","activeChats","setActiveChats","notifications","setNotifications","currentChat","setCurrentChat","messages","setMessages","loading","setLoading","error","setError","pollingInterval","setPollingInterval","fetchNotifications","fetchActiveChats","interval","setInterval","fetchMessages","id","clearInterval","then","length","acceptedChat","find","n","type","console","log","chat_room_id","openChat","markNotificationRead","notificationId","post","response","get","data","chats","sendChatRequest","recipientId","_error$response","_error$response$data","message","acceptChatRequest","chatRoomId","updatedChats","chat","warn","declineChatRequest","sendMessage","newMessage","chatMessage","prev","profiles","username","c","closeChat","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  // Start polling when user is authenticated\n  useEffect(() => {\n    if (user && !pollingInterval) {\n      // Initial load\n      fetchNotifications();\n      fetchActiveChats();\n      \n      // Set up polling every 10 seconds\n      const interval = setInterval(() => {\n        fetchNotifications();\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, 10000);\n      \n      setPollingInterval(interval);\n      \n      return () => {\n        clearInterval(interval);\n        setPollingInterval(null);\n      };\n    }\n  }, [user, currentChat]);\n\n\n  // Add this to your useEffect in ChatContext.js where you set up polling\n\nuseEffect(() => {\n  if (user && !pollingInterval) {\n    // Initial load\n    fetchNotifications();\n    fetchActiveChats();\n    \n    // Set up polling every 10 seconds\n    const interval = setInterval(() => {\n      // Fetch notifications and check for chat_accepted types\n      fetchNotifications().then(notifications => {\n        if (notifications && notifications.length > 0) {\n          // Look for any chat_accepted notifications to auto-open chat\n          const acceptedChat = notifications.find(n => n.type === 'chat_accepted');\n          if (acceptedChat) {\n            console.log('Found chat_accepted notification, opening chat:', acceptedChat.chat_room_id);\n            openChat(acceptedChat.chat_room_id);\n            \n            // Mark this notification as read since we've acted on it\n            markNotificationRead(acceptedChat.id);\n          }\n        }\n      });\n      \n      if (currentChat) {\n        fetchMessages(currentChat.id);\n      }\n    }, 5000); // Reduced to 5 seconds for better responsiveness\n    \n    setPollingInterval(interval);\n    \n    return () => {\n      clearInterval(interval);\n      setPollingInterval(null);\n    };\n  }\n}, [user, currentChat]);\n\n// Add this new function to mark notifications as read\nconst markNotificationRead = async (notificationId) => {\n  if (!user || !notificationId) return;\n  \n  try {\n    await api.post('/chat/markNotificationRead', { notificationId });\n    // Refresh notifications after marking one as read\n    fetchNotifications();\n  } catch (error) {\n    console.error('Error marking notification as read:', error);\n  }\n};\n\n  // Fetch active chats for the current user\n  const fetchActiveChats = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.get('/chat/active');\n      setActiveChats(response.data.chats || []);\n      return response.data.chats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch chat notifications\n  const fetchNotifications = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await api.get('/chat/notifications');\n      setNotifications(response.data.notifications || []);\n      return response.data.notifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n\n  // Send a chat request to another user\n  const sendChatRequest = async (recipientId) => {\n    if (!user || !recipientId) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.post('/chat/request', { recipientId });\n      \n      // Refresh active chats to include the new chat\n      await fetchActiveChats();\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (error.response?.data?.message || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request\n // Replace the existing acceptChatRequest function in ChatContext.js\n\nconst acceptChatRequest = async (chatRoomId) => {\n  if (!user || !chatRoomId) return;\n  \n  try {\n    console.log('Starting accept request process for chat room:', chatRoomId);\n    setLoading(true);\n    \n    const response = await api.post('/chat/accept', { chatRoomId });\n    console.log('Chat acceptance API response:', response.data);\n    \n    // Update the notification list\n    await fetchNotifications();\n    \n    // Update active chats\n    const updatedChats = await fetchActiveChats();\n    \n    // Find the accepted chat in the updated active chats\n    const acceptedChat = updatedChats.find(chat => chat.id === chatRoomId);\n    \n    if (acceptedChat) {\n      console.log('Found accepted chat in active chats:', acceptedChat);\n      // Set this as the current chat\n      setCurrentChat(acceptedChat);\n      \n      // Fetch messages for this chat\n      await fetchMessages(chatRoomId);\n    } else {\n      console.warn('Accepted chat not found in active chats list');\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error accepting chat request:', error);\n    setError('Failed to accept chat request');\n    throw error;\n  } finally {\n    setLoading(false);\n  }\n};\n\n  // Decline a chat request\n  const declineChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.post('/chat/decline', { chatRoomId });\n      \n      // Update the notification list\n      await fetchNotifications();\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    \n    try {\n      const response = await api.post('/chat/send', { chatRoomId, message });\n      \n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {...newMessage, profiles: { username: user.username }}]);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      setMessages(response.data.messages || []);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Open a chat\n  // Replace the existing openChat function\n\nconst openChat = async (chatRoomId) => {\n  try {\n    console.log('Opening chat room:', chatRoomId);\n    \n    // Check if it's already in active chats\n    let chat = activeChats.find(c => c.id === chatRoomId);\n    \n    if (!chat) {\n      // If not found in current state, try to fetch fresh data\n      console.log('Chat not found in current state, fetching fresh data');\n      const updatedChats = await fetchActiveChats();\n      chat = updatedChats.find(c => c.id === chatRoomId);\n    }\n    \n    if (chat) {\n      console.log('Setting current chat:', chat);\n      setCurrentChat(chat);\n      await fetchMessages(chatRoomId);\n    } else {\n      console.error('Chat not found in active chats');\n      setError('Chat not found');\n    }\n  } catch (error) {\n    console.error('Error opening chat:', error);\n    setError('Failed to open chat');\n  }\n};\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        activeChats,\n        notifications,\n        currentChat,\n        messages,\n        loading,\n        error,\n        sendChatRequest,\n        acceptChatRequest,\n        declineChatRequest,\n        sendMessage,\n        fetchMessages,\n        openChat,\n        closeChat,\n        fetchActiveChats,\n        fetchNotifications\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}