{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  // Start polling when user is authenticated\n  useEffect(() => {\n    if (user && !pollingInterval) {\n      // Initial load\n      fetchNotifications();\n      fetchActiveChats();\n\n      // Set up polling every 10 seconds\n      const interval = setInterval(() => {\n        fetchNotifications();\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, 10000);\n      setPollingInterval(interval);\n      return () => {\n        clearInterval(interval);\n        setPollingInterval(null);\n      };\n    }\n  }, [user, currentChat]);\n\n  // Fetch active chats for the current user\n  const fetchActiveChats = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      const response = await api.get('/chat/active');\n      setActiveChats(response.data.chats || []);\n      return response.data.chats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch chat notifications\n  const fetchNotifications = async () => {\n    if (!user) return;\n    try {\n      const response = await api.get('/chat/notifications');\n      setNotifications(response.data.notifications || []);\n      return response.data.notifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n\n  // Send a chat request to another user\n  const sendChatRequest = async recipientId => {\n    if (!user || !recipientId) return;\n    try {\n      setLoading(true);\n      const response = await api.post('/chat/request', {\n        recipientId\n      });\n\n      // Refresh active chats to include the new chat\n      await fetchActiveChats();\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request\n  // Replace the existing acceptChatRequest function in ChatContext.js\n\n  const acceptChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      console.log('Starting accept request process for chat room:', chatRoomId);\n      setLoading(true);\n      const response = await api.post('/chat/accept', {\n        chatRoomId\n      });\n      console.log('Chat acceptance API response:', response.data);\n\n      // Update the notification list\n      await fetchNotifications();\n\n      // Update active chats\n      const updatedChats = await fetchActiveChats();\n\n      // Find the accepted chat in the updated active chats\n      const acceptedChat = updatedChats.find(chat => chat.id === chatRoomId);\n      if (acceptedChat) {\n        console.log('Found accepted chat in active chats:', acceptedChat);\n        // Set this as the current chat\n        setCurrentChat(acceptedChat);\n\n        // Fetch messages for this chat\n        await fetchMessages(chatRoomId);\n      } else {\n        console.warn('Accepted chat not found in active chats list');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error accepting chat request:', error);\n      setError('Failed to accept chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      const response = await api.post('/chat/decline', {\n        chatRoomId\n      });\n\n      // Update the notification list\n      await fetchNotifications();\n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    try {\n      const response = await api.post('/chat/send', {\n        chatRoomId,\n        message\n      });\n\n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {\n        ...newMessage,\n        profiles: {\n          username: user.username\n        }\n      }]);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      setMessages(response.data.messages || []);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Open a chat\n  const openChat = async chatRoomId => {\n    try {\n      console.log('Opening chat room:', chatRoomId);\n\n      // Check if it's already in active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      if (!chat) {\n        // If not found in current state, try to fetch fresh data\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats();\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n        await fetchMessages(chatRoomId);\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found');\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      activeChats,\n      notifications,\n      currentChat,\n      messages,\n      loading,\n      error,\n      sendChatRequest,\n      acceptChatRequest,\n      declineChatRequest,\n      sendMessage,\n      fetchMessages,\n      openChat,\n      closeChat,\n      fetchActiveChats,\n      fetchNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"/8P3DcA8y4pfa8uczAAlG8ROazg=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","activeChats","setActiveChats","notifications","setNotifications","currentChat","setCurrentChat","messages","setMessages","loading","setLoading","error","setError","pollingInterval","setPollingInterval","fetchNotifications","fetchActiveChats","interval","setInterval","fetchMessages","id","clearInterval","response","get","data","chats","console","sendChatRequest","recipientId","post","_error$response","_error$response$data","message","acceptChatRequest","chatRoomId","log","updatedChats","acceptedChat","find","chat","warn","declineChatRequest","sendMessage","newMessage","chatMessage","prev","profiles","username","openChat","c","Provider","value","closeChat","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  // Start polling when user is authenticated\n  useEffect(() => {\n    if (user && !pollingInterval) {\n      // Initial load\n      fetchNotifications();\n      fetchActiveChats();\n      \n      // Set up polling every 10 seconds\n      const interval = setInterval(() => {\n        fetchNotifications();\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        }\n      }, 10000);\n      \n      setPollingInterval(interval);\n      \n      return () => {\n        clearInterval(interval);\n        setPollingInterval(null);\n      };\n    }\n  }, [user, currentChat]);\n\n  // Fetch active chats for the current user\n  const fetchActiveChats = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.get('/chat/active');\n      setActiveChats(response.data.chats || []);\n      return response.data.chats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch chat notifications\n  const fetchNotifications = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await api.get('/chat/notifications');\n      setNotifications(response.data.notifications || []);\n      return response.data.notifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n\n  // Send a chat request to another user\n  const sendChatRequest = async (recipientId) => {\n    if (!user || !recipientId) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.post('/chat/request', { recipientId });\n      \n      // Refresh active chats to include the new chat\n      await fetchActiveChats();\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending chat request:', error);\n      setError('Failed to send chat request: ' + (error.response?.data?.message || error.message));\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request\n // Replace the existing acceptChatRequest function in ChatContext.js\n\nconst acceptChatRequest = async (chatRoomId) => {\n  if (!user || !chatRoomId) return;\n  \n  try {\n    console.log('Starting accept request process for chat room:', chatRoomId);\n    setLoading(true);\n    \n    const response = await api.post('/chat/accept', { chatRoomId });\n    console.log('Chat acceptance API response:', response.data);\n    \n    // Update the notification list\n    await fetchNotifications();\n    \n    // Update active chats\n    const updatedChats = await fetchActiveChats();\n    \n    // Find the accepted chat in the updated active chats\n    const acceptedChat = updatedChats.find(chat => chat.id === chatRoomId);\n    \n    if (acceptedChat) {\n      console.log('Found accepted chat in active chats:', acceptedChat);\n      // Set this as the current chat\n      setCurrentChat(acceptedChat);\n      \n      // Fetch messages for this chat\n      await fetchMessages(chatRoomId);\n    } else {\n      console.warn('Accepted chat not found in active chats list');\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error accepting chat request:', error);\n    setError('Failed to accept chat request');\n    throw error;\n  } finally {\n    setLoading(false);\n  }\n};\n\n  // Decline a chat request\n  const declineChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.post('/chat/decline', { chatRoomId });\n      \n      // Update the notification list\n      await fetchNotifications();\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setError('Failed to decline chat request');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    \n    try {\n      const response = await api.post('/chat/send', { chatRoomId, message });\n      \n      // Add the new message to the state\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {...newMessage, profiles: { username: user.username }}]);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      setMessages(response.data.messages || []);\n      return response.data.messages;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError('Failed to fetch messages');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Open a chat\n  const openChat = async (chatRoomId) => {\n    try {\n      console.log('Opening chat room:', chatRoomId);\n      \n      // Check if it's already in active chats\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      \n      if (!chat) {\n        // If not found in current state, try to fetch fresh data\n        console.log('Chat not found in current state, fetching fresh data');\n        const updatedChats = await fetchActiveChats();\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      \n      if (chat) {\n        console.log('Setting current chat:', chat);\n        setCurrentChat(chat);\n        await fetchMessages(chatRoomId);\n      } else {\n        console.error('Chat not found in active chats');\n        setError('Chat not found');\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setError('Failed to open chat');\n    }\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        activeChats,\n        notifications,\n        currentChat,\n        messages,\n        loading,\n        error,\n        sendChatRequest,\n        acceptChatRequest,\n        declineChatRequest,\n        sendMessage,\n        fetchMessages,\n        openChat,\n        closeChat,\n        fetchActiveChats,\n        fetchNotifications\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}