{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport { LocationContext } from '../context/LocationContext';\nimport { PREDEFINED_LOCATIONS } from '../utils/locationData';\nimport api from '../utils/api';\nimport './LocationSelector.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationSelector = () => {\n  _s();\n  const {\n    updateLocation,\n    position\n  } = useContext(LocationContext);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [selectedDestination, setSelectedDestination] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [updateStage, setUpdateStage] = useState('idle'); // Track the current update stage\n  const [message, setMessage] = useState(null);\n  const [debugInfo, setDebugInfo] = useState('');\n\n  // Set current position as selected source when available\n  useEffect(() => {\n    if (position && !selectedSource) {\n      const matchingLocation = findNearestPredefinedLocation(position.latitude, position.longitude);\n      if (matchingLocation) {\n        setSelectedSource(matchingLocation);\n      }\n    }\n  }, [position]);\n\n  // Helper to find the nearest predefined location to given coordinates\n  const findNearestPredefinedLocation = (lat, lng) => {\n    const threshold = 0.01; // ~1km threshold for \"near\" locations\n    return PREDEFINED_LOCATIONS.find(loc => Math.abs(loc.latitude - lat) < threshold && Math.abs(loc.longitude - lng) < threshold);\n  };\n\n  // Filter locations using search term\n  const filteredLocations = searchTerm ? PREDEFINED_LOCATIONS.filter(loc => loc.name.toLowerCase().includes(searchTerm.toLowerCase()) || loc.description.toLowerCase().includes(searchTerm.toLowerCase())) : PREDEFINED_LOCATIONS;\n  const handleSourceSelect = location => {\n    setSelectedSource(location);\n    setMessage(null);\n  };\n  const handleDestinationSelect = location => {\n    setSelectedDestination(location);\n    setMessage(null);\n  };\n  const handleSearchChange = e => {\n    setSearchTerm(e.target.value);\n  };\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Updated function to create a path with proper sequencing\n  const sendPathToServer = async (source, destination) => {\n    setDebugInfo(`[${new Date().toISOString()}] Preparing to send path data to server...`);\n    try {\n      console.log('Sending path data:', {\n        endpoint: '/path/set',\n        payload: {\n          source,\n          destination\n        }\n      });\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/path/set', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          source,\n          destination\n        })\n      });\n      const data = await response.json();\n      console.log('Path API response:', data);\n      setDebugInfo(`[${new Date().toISOString()}] API response received: ${response.status} - ${JSON.stringify(data)}`);\n      if (!response.ok) {\n        throw {\n          response: {\n            data\n          }\n        };\n      }\n      return data;\n    } catch (error) {\n      console.error('Path API error details:', error);\n      setDebugInfo(`[${new Date().toISOString()}] Error: ${error.message || 'Unknown error'}`);\n      throw error;\n    }\n  };\n\n  // UPDATED: Modified handleSubmit to properly sequence the operations\n  // First set location, wait for completion, then update path\n  const handleSubmit = async () => {\n    if (!selectedSource || !selectedDestination) {\n      setMessage({\n        type: 'error',\n        text: 'Please select both your current location and destination.'\n      });\n      return;\n    }\n    setIsUpdating(true);\n    setUpdateStage('location');\n    setDebugInfo(`[${new Date().toISOString()}] Starting update process...`);\n    try {\n      // STEP 1: First update the user's current location\n      setDebugInfo(`[${new Date().toISOString()}] Updating location to ${selectedSource.name}...`);\n\n      // Update location and wait for it to complete\n      await updateLocation(selectedSource.latitude, selectedSource.longitude);\n\n      // Add a short delay to ensure the location update is processed on the server\n      setDebugInfo(`[${new Date().toISOString()}] Location updated. Waiting 3 seconds before creating path...`);\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // STEP 2: Now that location is set, update the path\n      setUpdateStage('path');\n\n      // Prepare the path data\n      const sourcePoint = {\n        lat: selectedSource.latitude,\n        lng: selectedSource.longitude\n      };\n      const destPoint = {\n        lat: selectedDestination.latitude,\n        lng: selectedDestination.longitude\n      };\n      setDebugInfo(`[${new Date().toISOString()}] Location update complete. Sending path data to server...`);\n\n      // Send path request to the server\n      const response = await sendPathToServer(sourcePoint, destPoint);\n      if (response.routeWKT) {\n        setDebugInfo(`[${new Date().toISOString()}] Server calculated route with ${response.routeWKT.split(',').length} points`);\n      }\n      setUpdateStage('complete');\n      setDebugInfo(`[${new Date().toISOString()}] Update completed successfully - ${selectedSource.name} to ${selectedDestination.name}`);\n      setMessage({\n        type: 'success',\n        text: `Location updated to ${selectedSource.name} and route to ${selectedDestination.name} created.`\n      });\n    } catch (error) {\n      console.error('Failed to update location/path:', error);\n\n      // Better error handling\n      let errorMessage = 'Failed to update. Please try again.';\n      if (error.response && error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n\n        // Special handling for inactive user error\n        if (errorMessage.includes('Only active users')) {\n          errorMessage = 'Your location needs to be updated first. Please try again in a moment.';\n        }\n      }\n      setDebugInfo(`[${new Date().toISOString()}] Error: ${errorMessage}`);\n      setMessage({\n        type: 'error',\n        text: errorMessage\n      });\n      setUpdateStage('error');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  // For debugging - directly test API call\n  const testApiCall = async () => {\n    setDebugInfo(`[${new Date().toISOString()}] Testing API call...`);\n    try {\n      // Test basic authentication\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setDebugInfo('No auth token found! Please log in first.');\n        return;\n      }\n      setDebugInfo(`Token found: ${token.substring(0, 10)}...`);\n\n      // Test both with axios and fetch to compare\n      const axiosResponse = await api.get('/auth/profile');\n      setDebugInfo(`Axios API test successful. Status: ${axiosResponse.status}`);\n\n      // Now try a direct fetch to the path endpoint\n      const response = await fetch('http://localhost:5000/api/path/live', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setDebugInfo(`Direct fetch to /path/live successful. Status: ${response.status}`);\n      console.log('API test response:', {\n        axios: axiosResponse.data,\n        fetch: data\n      });\n    } catch (error) {\n      setDebugInfo(`API test failed: ${error.message}`);\n      console.error('API test error:', error);\n    }\n  };\n\n  // Get button text based on update stage\n  const getButtonText = () => {\n    if (!isUpdating) return 'Update Location & Set Path';\n    switch (updateStage) {\n      case 'location':\n        return 'Updating Location...';\n      case 'path':\n        return 'Creating Path...';\n      case 'complete':\n        return 'Update Complete!';\n      case 'error':\n        return 'Update Failed';\n      default:\n        return 'Updating...';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"location-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-selector-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Your Location & Destination\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Choose your current location and a destination for path calculation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-time\",\n        children: [new Date().toISOString().slice(0, 19).replace('T', ' '), \" UTC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-user\",\n        children: [\"Logged in as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"itsanubhav009\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.type}`,\n      children: [message.text, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-message\",\n        onClick: () => setMessage(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this), debugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Debug:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), \" \", debugInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchTerm,\n        onChange: handleSearchChange,\n        placeholder: \"Search locations...\",\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), searchTerm && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-search\",\n        onClick: handleClearSearch,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Your Current Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), selectedSource ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-location\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"selected-name\",\n          children: selectedSource.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"selected-coords\",\n          children: [selectedSource.latitude.toFixed(4), \", \", selectedSource.longitude.toFixed(4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-selection\",\n        children: \"No location selected.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"locations-list\",\n        children: filteredLocations.map(location => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `location-item ${(selectedSource === null || selectedSource === void 0 ? void 0 : selectedSource.id) === location.id ? 'selected' : ''}`,\n          onClick: () => handleSourceSelect(location),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: location.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"coordinates\",\n            children: [location.latitude.toFixed(4), \", \", location.longitude.toFixed(4)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, `source-${location.id}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Destination\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), selectedDestination ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-location\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"selected-name\",\n          children: selectedDestination.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"selected-coords\",\n          children: [selectedDestination.latitude.toFixed(4), \", \", selectedDestination.longitude.toFixed(4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-selection\",\n        children: \"No destination selected.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"locations-list\",\n        children: filteredLocations.map(location => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `location-item ${(selectedDestination === null || selectedDestination === void 0 ? void 0 : selectedDestination.id) === location.id ? 'selected' : ''}`,\n          onClick: () => handleDestinationSelect(location),\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: location.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"coordinates\",\n            children: [location.latitude.toFixed(4), \", \", location.longitude.toFixed(4)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this)]\n        }, `dest-${location.id}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `update-button ${updateStage !== 'idle' ? updateStage : ''}`,\n        onClick: handleSubmit,\n        disabled: !selectedSource || !selectedDestination || isUpdating,\n        children: getButtonText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"test-api-button\",\n        onClick: testApiCall,\n        disabled: isUpdating,\n        children: \"Test API Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"route-info\",\n      children: selectedSource && selectedDestination && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"route-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Route Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"From: \", selectedSource.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"To: \", selectedDestination.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hint\",\n          children: \"Click \\\"Update Location & Set Path\\\" to create a route between these points\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"note\",\n          children: \"Note: Location will be updated first, then path will be created after a short delay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationSelector, \"0CpjJzlgpG0Ge4HgCKtcQ8hyZrw=\");\n_c = LocationSelector;\nexport default LocationSelector;\nvar _c;\n$RefreshReg$(_c, \"LocationSelector\");","map":{"version":3,"names":["React","useState","useContext","useEffect","LocationContext","PREDEFINED_LOCATIONS","api","jsxDEV","_jsxDEV","LocationSelector","_s","updateLocation","position","selectedSource","setSelectedSource","selectedDestination","setSelectedDestination","searchTerm","setSearchTerm","isUpdating","setIsUpdating","updateStage","setUpdateStage","message","setMessage","debugInfo","setDebugInfo","matchingLocation","findNearestPredefinedLocation","latitude","longitude","lat","lng","threshold","find","loc","Math","abs","filteredLocations","filter","name","toLowerCase","includes","description","handleSourceSelect","location","handleDestinationSelect","handleSearchChange","e","target","value","handleClearSearch","sendPathToServer","source","destination","Date","toISOString","console","log","endpoint","payload","token","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","data","json","status","ok","error","handleSubmit","type","text","Promise","resolve","setTimeout","sourcePoint","destPoint","routeWKT","split","length","errorMessage","testApiCall","substring","axiosResponse","get","axios","getButtonText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","replace","onClick","onChange","placeholder","toFixed","map","id","disabled","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { LocationContext } from '../context/LocationContext';\nimport { PREDEFINED_LOCATIONS } from '../utils/locationData';\nimport api from '../utils/api';\nimport './LocationSelector.css';\n\nconst LocationSelector = () => {\n  const { updateLocation, position } = useContext(LocationContext);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [selectedDestination, setSelectedDestination] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [updateStage, setUpdateStage] = useState('idle'); // Track the current update stage\n  const [message, setMessage] = useState(null);\n  const [debugInfo, setDebugInfo] = useState('');\n\n  // Set current position as selected source when available\n  useEffect(() => {\n    if (position && !selectedSource) {\n      const matchingLocation = findNearestPredefinedLocation(position.latitude, position.longitude);\n      if (matchingLocation) {\n        setSelectedSource(matchingLocation);\n      }\n    }\n  }, [position]);\n\n  // Helper to find the nearest predefined location to given coordinates\n  const findNearestPredefinedLocation = (lat, lng) => {\n    const threshold = 0.01; // ~1km threshold for \"near\" locations\n    return PREDEFINED_LOCATIONS.find(loc => \n      Math.abs(loc.latitude - lat) < threshold && \n      Math.abs(loc.longitude - lng) < threshold\n    );\n  };\n\n  // Filter locations using search term\n  const filteredLocations = searchTerm \n    ? PREDEFINED_LOCATIONS.filter(loc => \n        loc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        loc.description.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    : PREDEFINED_LOCATIONS;\n\n  const handleSourceSelect = (location) => {\n    setSelectedSource(location);\n    setMessage(null);\n  };\n\n  const handleDestinationSelect = (location) => {\n    setSelectedDestination(location);\n    setMessage(null);\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  // Updated function to create a path with proper sequencing\n  const sendPathToServer = async (source, destination) => {\n    setDebugInfo(`[${new Date().toISOString()}] Preparing to send path data to server...`);\n    \n    try {\n      console.log('Sending path data:', {\n        endpoint: '/path/set',\n        payload: { source, destination }\n      });\n      \n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/path/set', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          source,\n          destination\n        })\n      });\n      \n      const data = await response.json();\n      \n      console.log('Path API response:', data);\n      setDebugInfo(`[${new Date().toISOString()}] API response received: ${response.status} - ${JSON.stringify(data)}`);\n      \n      if (!response.ok) {\n        throw { response: { data } };\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Path API error details:', error);\n      setDebugInfo(`[${new Date().toISOString()}] Error: ${error.message || 'Unknown error'}`);\n      throw error;\n    }\n  };\n\n  // UPDATED: Modified handleSubmit to properly sequence the operations\n  // First set location, wait for completion, then update path\n  const handleSubmit = async () => {\n    if (!selectedSource || !selectedDestination) {\n      setMessage({ type: 'error', text: 'Please select both your current location and destination.' });\n      return;\n    }\n    \n    setIsUpdating(true);\n    setUpdateStage('location');\n    setDebugInfo(`[${new Date().toISOString()}] Starting update process...`);\n    \n    try {\n      // STEP 1: First update the user's current location\n      setDebugInfo(`[${new Date().toISOString()}] Updating location to ${selectedSource.name}...`);\n      \n      // Update location and wait for it to complete\n      await updateLocation(selectedSource.latitude, selectedSource.longitude);\n      \n      // Add a short delay to ensure the location update is processed on the server\n      setDebugInfo(`[${new Date().toISOString()}] Location updated. Waiting 3 seconds before creating path...`);\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // STEP 2: Now that location is set, update the path\n      setUpdateStage('path');\n      \n      // Prepare the path data\n      const sourcePoint = {\n        lat: selectedSource.latitude,\n        lng: selectedSource.longitude\n      };\n      \n      const destPoint = {\n        lat: selectedDestination.latitude,\n        lng: selectedDestination.longitude\n      };\n      \n      setDebugInfo(`[${new Date().toISOString()}] Location update complete. Sending path data to server...`);\n      \n      // Send path request to the server\n      const response = await sendPathToServer(sourcePoint, destPoint);\n      \n      if (response.routeWKT) {\n        setDebugInfo(`[${new Date().toISOString()}] Server calculated route with ${response.routeWKT.split(',').length} points`);\n      }\n      \n      setUpdateStage('complete');\n      setDebugInfo(`[${new Date().toISOString()}] Update completed successfully - ${selectedSource.name} to ${selectedDestination.name}`);\n      setMessage({ \n        type: 'success', \n        text: `Location updated to ${selectedSource.name} and route to ${selectedDestination.name} created.`\n      });\n    } catch (error) {\n      console.error('Failed to update location/path:', error);\n      \n      // Better error handling\n      let errorMessage = 'Failed to update. Please try again.';\n      \n      if (error.response && error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n        \n        // Special handling for inactive user error\n        if (errorMessage.includes('Only active users')) {\n          errorMessage = 'Your location needs to be updated first. Please try again in a moment.';\n        }\n      }\n      \n      setDebugInfo(`[${new Date().toISOString()}] Error: ${errorMessage}`);\n      setMessage({ type: 'error', text: errorMessage });\n      setUpdateStage('error');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  // For debugging - directly test API call\n  const testApiCall = async () => {\n    setDebugInfo(`[${new Date().toISOString()}] Testing API call...`);\n    try {\n      // Test basic authentication\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        setDebugInfo('No auth token found! Please log in first.');\n        return;\n      }\n      \n      setDebugInfo(`Token found: ${token.substring(0, 10)}...`);\n      \n      // Test both with axios and fetch to compare\n      const axiosResponse = await api.get('/auth/profile');\n      \n      setDebugInfo(`Axios API test successful. Status: ${axiosResponse.status}`);\n      \n      // Now try a direct fetch to the path endpoint\n      const response = await fetch('http://localhost:5000/api/path/live', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      const data = await response.json();\n      setDebugInfo(`Direct fetch to /path/live successful. Status: ${response.status}`);\n      \n      console.log('API test response:', { axios: axiosResponse.data, fetch: data });\n    } catch (error) {\n      setDebugInfo(`API test failed: ${error.message}`);\n      console.error('API test error:', error);\n    }\n  };\n\n  // Get button text based on update stage\n  const getButtonText = () => {\n    if (!isUpdating) return 'Update Location & Set Path';\n    \n    switch (updateStage) {\n      case 'location':\n        return 'Updating Location...';\n      case 'path':\n        return 'Creating Path...';\n      case 'complete':\n        return 'Update Complete!';\n      case 'error':\n        return 'Update Failed';\n      default:\n        return 'Updating...';\n    }\n  };\n\n  return (\n    <div className=\"location-selector\">\n      <div className=\"location-selector-header\">\n        <h3>Select Your Location &amp; Destination</h3>\n        <p>Choose your current location and a destination for path calculation</p>\n        <div className=\"current-time\">\n          {new Date().toISOString().slice(0, 19).replace('T', ' ')} UTC\n        </div>\n        <div className=\"current-user\">\n          Logged in as: <strong>itsanubhav009</strong>\n        </div>\n      </div>\n      \n      {message && (\n        <div className={`message ${message.type}`}>\n          {message.text}\n          <button className=\"close-message\" onClick={() => setMessage(null)}>×</button>\n        </div>\n      )}\n      \n      {/* Debug information */}\n      {debugInfo && (\n        <div className=\"debug-info\">\n          <strong>Debug:</strong> {debugInfo}\n        </div>\n      )}\n      \n      {/* Search functionality */}\n      <div className=\"search-container\">\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={handleSearchChange}\n          placeholder=\"Search locations...\"\n          className=\"search-input\"\n        />\n        {searchTerm && (\n          <button className=\"clear-search\" onClick={handleClearSearch}>×</button>\n        )}\n      </div>\n      \n      <div className=\"location-group\">\n        <h4>Your Current Location</h4>\n        {selectedSource ? (\n          <div className=\"selected-location\">\n            <p className=\"selected-name\">{selectedSource.name}</p>\n            <p className=\"selected-coords\">\n              {selectedSource.latitude.toFixed(4)}, {selectedSource.longitude.toFixed(4)}\n            </p>\n          </div>\n        ) : (\n          <p className=\"no-selection\">No location selected.</p>\n        )}\n        <div className=\"locations-list\">\n          {filteredLocations.map(location => (\n            <div \n              key={`source-${location.id}`}\n              className={`location-item ${selectedSource?.id === location.id ? 'selected' : ''}`}\n              onClick={() => handleSourceSelect(location)}\n            >\n              <h4>{location.name}</h4>\n              <p>{location.description}</p>\n              <div className=\"coordinates\">\n                {location.latitude.toFixed(4)}, {location.longitude.toFixed(4)}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"location-group\">\n        <h4>Select Destination</h4>\n        {selectedDestination ? (\n          <div className=\"selected-location\">\n            <p className=\"selected-name\">{selectedDestination.name}</p>\n            <p className=\"selected-coords\">\n              {selectedDestination.latitude.toFixed(4)}, {selectedDestination.longitude.toFixed(4)}\n            </p>\n          </div>\n        ) : (\n          <p className=\"no-selection\">No destination selected.</p>\n        )}\n        <div className=\"locations-list\">\n          {filteredLocations.map(location => (\n            <div \n              key={`dest-${location.id}`}\n              className={`location-item ${selectedDestination?.id === location.id ? 'selected' : ''}`}\n              onClick={() => handleDestinationSelect(location)}\n            >\n              <h4>{location.name}</h4>\n              <p>{location.description}</p>\n              <div className=\"coordinates\">\n                {location.latitude.toFixed(4)}, {location.longitude.toFixed(4)}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"location-actions\">\n        <button \n          className={`update-button ${updateStage !== 'idle' ? updateStage : ''}`}\n          onClick={handleSubmit}\n          disabled={!selectedSource || !selectedDestination || isUpdating}\n        >\n          {getButtonText()}\n        </button>\n        \n        {/* Debug button */}\n        <button \n          className=\"test-api-button\"\n          onClick={testApiCall}\n          disabled={isUpdating}\n        >\n          Test API Connection\n        </button>\n      </div>\n      \n      <div className=\"route-info\">\n        {selectedSource && selectedDestination && (\n          <div className=\"route-summary\">\n            <h4>Route Summary</h4>\n            <p>From: {selectedSource.name}</p>\n            <p>To: {selectedDestination.name}</p>\n            <p className=\"hint\">Click \"Update Location & Set Path\" to create a route between these points</p>\n            <p className=\"note\">Note: Location will be updated first, then path will be created after a short delay</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LocationSelector;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM;IAAEC,cAAc;IAAEC;EAAS,CAAC,GAAGV,UAAU,CAACE,eAAe,CAAC;EAChE,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACc,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACxD,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAE,SAAS,CAAC,MAAM;IACd,IAAIS,QAAQ,IAAI,CAACC,cAAc,EAAE;MAC/B,MAAMc,gBAAgB,GAAGC,6BAA6B,CAAChB,QAAQ,CAACiB,QAAQ,EAAEjB,QAAQ,CAACkB,SAAS,CAAC;MAC7F,IAAIH,gBAAgB,EAAE;QACpBb,iBAAiB,CAACa,gBAAgB,CAAC;MACrC;IACF;EACF,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMgB,6BAA6B,GAAGA,CAACG,GAAG,EAAEC,GAAG,KAAK;IAClD,MAAMC,SAAS,GAAG,IAAI,CAAC,CAAC;IACxB,OAAO5B,oBAAoB,CAAC6B,IAAI,CAACC,GAAG,IAClCC,IAAI,CAACC,GAAG,CAACF,GAAG,CAACN,QAAQ,GAAGE,GAAG,CAAC,GAAGE,SAAS,IACxCG,IAAI,CAACC,GAAG,CAACF,GAAG,CAACL,SAAS,GAAGE,GAAG,CAAC,GAAGC,SAClC,CAAC;EACH,CAAC;;EAED;EACA,MAAMK,iBAAiB,GAAGrB,UAAU,GAChCZ,oBAAoB,CAACkC,MAAM,CAACJ,GAAG,IAC7BA,GAAG,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACzB,UAAU,CAACwB,WAAW,CAAC,CAAC,CAAC,IACzDN,GAAG,CAACQ,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACzB,UAAU,CAACwB,WAAW,CAAC,CAAC,CACjE,CAAC,GACDpC,oBAAoB;EAExB,MAAMuC,kBAAkB,GAAIC,QAAQ,IAAK;IACvC/B,iBAAiB,CAAC+B,QAAQ,CAAC;IAC3BrB,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMsB,uBAAuB,GAAID,QAAQ,IAAK;IAC5C7B,sBAAsB,CAAC6B,QAAQ,CAAC;IAChCrB,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMuB,kBAAkB,GAAIC,CAAC,IAAK;IAChC9B,aAAa,CAAC8B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BjC,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;;EAED;EACA,MAAMkC,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IACtD5B,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,4CAA4C,CAAC;IAEtF,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;QAChCC,QAAQ,EAAE,WAAW;QACrBC,OAAO,EAAE;UAAEP,MAAM;UAAEC;QAAY;MACjC,CAAC,CAAC;MAEF,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUN,KAAK;QAClC,CAAC;QACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBjB,MAAM;UACNC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAMiB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElCf,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEa,IAAI,CAAC;MACvC7C,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,4BAA4BQ,QAAQ,CAACS,MAAM,MAAMJ,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,EAAE,CAAC;MAEjH,IAAI,CAACP,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM;UAAEV,QAAQ,EAAE;YAAEO;UAAK;QAAE,CAAC;MAC9B;MAEA,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CjD,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,YAAYmB,KAAK,CAACpD,OAAO,IAAI,eAAe,EAAE,CAAC;MACxF,MAAMoD,KAAK;IACb;EACF,CAAC;;EAED;EACA;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAC/D,cAAc,IAAI,CAACE,mBAAmB,EAAE;MAC3CS,UAAU,CAAC;QAAEqD,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAA4D,CAAC,CAAC;MAChG;IACF;IAEA1D,aAAa,CAAC,IAAI,CAAC;IACnBE,cAAc,CAAC,UAAU,CAAC;IAC1BI,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,8BAA8B,CAAC;IAExE,IAAI;MACF;MACA9B,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,0BAA0B3C,cAAc,CAAC2B,IAAI,KAAK,CAAC;;MAE5F;MACA,MAAM7B,cAAc,CAACE,cAAc,CAACgB,QAAQ,EAAEhB,cAAc,CAACiB,SAAS,CAAC;;MAEvE;MACAJ,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,+DAA+D,CAAC;MACzG,MAAM,IAAIuB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA1D,cAAc,CAAC,MAAM,CAAC;;MAEtB;MACA,MAAM4D,WAAW,GAAG;QAClBnD,GAAG,EAAElB,cAAc,CAACgB,QAAQ;QAC5BG,GAAG,EAAEnB,cAAc,CAACiB;MACtB,CAAC;MAED,MAAMqD,SAAS,GAAG;QAChBpD,GAAG,EAAEhB,mBAAmB,CAACc,QAAQ;QACjCG,GAAG,EAAEjB,mBAAmB,CAACe;MAC3B,CAAC;MAEDJ,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,4DAA4D,CAAC;;MAEtG;MACA,MAAMQ,QAAQ,GAAG,MAAMZ,gBAAgB,CAAC8B,WAAW,EAAEC,SAAS,CAAC;MAE/D,IAAInB,QAAQ,CAACoB,QAAQ,EAAE;QACrB1D,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,kCAAkCQ,QAAQ,CAACoB,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,SAAS,CAAC;MAC1H;MAEAhE,cAAc,CAAC,UAAU,CAAC;MAC1BI,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,qCAAqC3C,cAAc,CAAC2B,IAAI,OAAOzB,mBAAmB,CAACyB,IAAI,EAAE,CAAC;MACnIhB,UAAU,CAAC;QACTqD,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,uBAAuBjE,cAAc,CAAC2B,IAAI,iBAAiBzB,mBAAmB,CAACyB,IAAI;MAC3F,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOmC,KAAK,EAAE;MACdlB,OAAO,CAACkB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;;MAEvD;MACA,IAAIY,YAAY,GAAG,qCAAqC;MAExD,IAAIZ,KAAK,CAACX,QAAQ,IAAIW,KAAK,CAACX,QAAQ,CAACO,IAAI,IAAII,KAAK,CAACX,QAAQ,CAACO,IAAI,CAAChD,OAAO,EAAE;QACxEgE,YAAY,GAAGZ,KAAK,CAACX,QAAQ,CAACO,IAAI,CAAChD,OAAO;;QAE1C;QACA,IAAIgE,YAAY,CAAC7C,QAAQ,CAAC,mBAAmB,CAAC,EAAE;UAC9C6C,YAAY,GAAG,wEAAwE;QACzF;MACF;MAEA7D,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,YAAY+B,YAAY,EAAE,CAAC;MACpE/D,UAAU,CAAC;QAAEqD,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAES;MAAa,CAAC,CAAC;MACjDjE,cAAc,CAAC,OAAO,CAAC;IACzB,CAAC,SAAS;MACRF,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAMoE,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B9D,YAAY,CAAC,IAAI,IAAI6B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,uBAAuB,CAAC;IACjE,IAAI;MACF;MACA,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAI,CAACF,KAAK,EAAE;QACVnC,YAAY,CAAC,2CAA2C,CAAC;QACzD;MACF;MAEAA,YAAY,CAAC,gBAAgBmC,KAAK,CAAC4B,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC;;MAEzD;MACA,MAAMC,aAAa,GAAG,MAAMpF,GAAG,CAACqF,GAAG,CAAC,eAAe,CAAC;MAEpDjE,YAAY,CAAC,sCAAsCgE,aAAa,CAACjB,MAAM,EAAE,CAAC;;MAE1E;MACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUN,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC9C,YAAY,CAAC,kDAAkDsC,QAAQ,CAACS,MAAM,EAAE,CAAC;MAEjFhB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;QAAEkC,KAAK,EAAEF,aAAa,CAACnB,IAAI;QAAEN,KAAK,EAAEM;MAAK,CAAC,CAAC;IAC/E,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdjD,YAAY,CAAC,oBAAoBiD,KAAK,CAACpD,OAAO,EAAE,CAAC;MACjDkC,OAAO,CAACkB,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACzC;EACF,CAAC;;EAED;EACA,MAAMkB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAC1E,UAAU,EAAE,OAAO,4BAA4B;IAEpD,QAAQE,WAAW;MACjB,KAAK,UAAU;QACb,OAAO,sBAAsB;MAC/B,KAAK,MAAM;QACT,OAAO,kBAAkB;MAC3B,KAAK,UAAU;QACb,OAAO,kBAAkB;MAC3B,KAAK,OAAO;QACV,OAAO,eAAe;MACxB;QACE,OAAO,aAAa;IACxB;EACF,CAAC;EAED,oBACEb,OAAA;IAAKsF,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCvF,OAAA;MAAKsF,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACvCvF,OAAA;QAAAuF,QAAA,EAAI;MAAsC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/C3F,OAAA;QAAAuF,QAAA,EAAG;MAAmE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC1E3F,OAAA;QAAKsF,SAAS,EAAC,cAAc;QAAAC,QAAA,GAC1B,IAAIxC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC4C,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,MAC3D;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN3F,OAAA;QAAKsF,SAAS,EAAC,cAAc;QAAAC,QAAA,GAAC,gBACd,eAAAvF,OAAA;UAAAuF,QAAA,EAAQ;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL5E,OAAO,iBACNf,OAAA;MAAKsF,SAAS,EAAE,WAAWvE,OAAO,CAACsD,IAAI,EAAG;MAAAkB,QAAA,GACvCxE,OAAO,CAACuD,IAAI,eACbtE,OAAA;QAAQsF,SAAS,EAAC,eAAe;QAACQ,OAAO,EAAEA,CAAA,KAAM9E,UAAU,CAAC,IAAI,CAAE;QAAAuE,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CACN,EAGA1E,SAAS,iBACRjB,OAAA;MAAKsF,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBvF,OAAA;QAAAuF,QAAA,EAAQ;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAAC1E,SAAS;IAAA;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CACN,eAGD3F,OAAA;MAAKsF,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BvF,OAAA;QACEqE,IAAI,EAAC,MAAM;QACX3B,KAAK,EAAEjC,UAAW;QAClBsF,QAAQ,EAAExD,kBAAmB;QAC7ByD,WAAW,EAAC,qBAAqB;QACjCV,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,EACDlF,UAAU,iBACTT,OAAA;QAAQsF,SAAS,EAAC,cAAc;QAACQ,OAAO,EAAEnD,iBAAkB;QAAA4C,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACvE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEN3F,OAAA;MAAKsF,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BvF,OAAA;QAAAuF,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC7BtF,cAAc,gBACbL,OAAA;QAAKsF,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCvF,OAAA;UAAGsF,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAElF,cAAc,CAAC2B;QAAI;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtD3F,OAAA;UAAGsF,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAC3BlF,cAAc,CAACgB,QAAQ,CAAC4E,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC5F,cAAc,CAACiB,SAAS,CAAC2E,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,gBAEN3F,OAAA;QAAGsF,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACrD,eACD3F,OAAA;QAAKsF,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC5BzD,iBAAiB,CAACoE,GAAG,CAAC7D,QAAQ,iBAC7BrC,OAAA;UAEEsF,SAAS,EAAE,iBAAiB,CAAAjF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE8F,EAAE,MAAK9D,QAAQ,CAAC8D,EAAE,GAAG,UAAU,GAAG,EAAE,EAAG;UACnFL,OAAO,EAAEA,CAAA,KAAM1D,kBAAkB,CAACC,QAAQ,CAAE;UAAAkD,QAAA,gBAE5CvF,OAAA;YAAAuF,QAAA,EAAKlD,QAAQ,CAACL;UAAI;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxB3F,OAAA;YAAAuF,QAAA,EAAIlD,QAAQ,CAACF;UAAW;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7B3F,OAAA;YAAKsF,SAAS,EAAC,aAAa;YAAAC,QAAA,GACzBlD,QAAQ,CAAChB,QAAQ,CAAC4E,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC5D,QAAQ,CAACf,SAAS,CAAC2E,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC;QAAA,GARD,UAAUtD,QAAQ,CAAC8D,EAAE,EAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASzB,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN3F,OAAA;MAAKsF,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BvF,OAAA;QAAAuF,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC1BpF,mBAAmB,gBAClBP,OAAA;QAAKsF,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCvF,OAAA;UAAGsF,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAEhF,mBAAmB,CAACyB;QAAI;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3D3F,OAAA;UAAGsF,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAC3BhF,mBAAmB,CAACc,QAAQ,CAAC4E,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC1F,mBAAmB,CAACe,SAAS,CAAC2E,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,gBAEN3F,OAAA;QAAGsF,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACxD,eACD3F,OAAA;QAAKsF,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC5BzD,iBAAiB,CAACoE,GAAG,CAAC7D,QAAQ,iBAC7BrC,OAAA;UAEEsF,SAAS,EAAE,iBAAiB,CAAA/E,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAE4F,EAAE,MAAK9D,QAAQ,CAAC8D,EAAE,GAAG,UAAU,GAAG,EAAE,EAAG;UACxFL,OAAO,EAAEA,CAAA,KAAMxD,uBAAuB,CAACD,QAAQ,CAAE;UAAAkD,QAAA,gBAEjDvF,OAAA;YAAAuF,QAAA,EAAKlD,QAAQ,CAACL;UAAI;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxB3F,OAAA;YAAAuF,QAAA,EAAIlD,QAAQ,CAACF;UAAW;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7B3F,OAAA;YAAKsF,SAAS,EAAC,aAAa;YAAAC,QAAA,GACzBlD,QAAQ,CAAChB,QAAQ,CAAC4E,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC5D,QAAQ,CAACf,SAAS,CAAC2E,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC;QAAA,GARD,QAAQtD,QAAQ,CAAC8D,EAAE,EAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASvB,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN3F,OAAA;MAAKsF,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BvF,OAAA;QACEsF,SAAS,EAAE,iBAAiBzE,WAAW,KAAK,MAAM,GAAGA,WAAW,GAAG,EAAE,EAAG;QACxEiF,OAAO,EAAE1B,YAAa;QACtBgC,QAAQ,EAAE,CAAC/F,cAAc,IAAI,CAACE,mBAAmB,IAAII,UAAW;QAAA4E,QAAA,EAE/DF,aAAa,CAAC;MAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAGT3F,OAAA;QACEsF,SAAS,EAAC,iBAAiB;QAC3BQ,OAAO,EAAEd,WAAY;QACrBoB,QAAQ,EAAEzF,UAAW;QAAA4E,QAAA,EACtB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN3F,OAAA;MAAKsF,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBlF,cAAc,IAAIE,mBAAmB,iBACpCP,OAAA;QAAKsF,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BvF,OAAA;UAAAuF,QAAA,EAAI;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtB3F,OAAA;UAAAuF,QAAA,GAAG,QAAM,EAAClF,cAAc,CAAC2B,IAAI;QAAA;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClC3F,OAAA;UAAAuF,QAAA,GAAG,MAAI,EAAChF,mBAAmB,CAACyB,IAAI;QAAA;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrC3F,OAAA;UAAGsF,SAAS,EAAC,MAAM;UAAAC,QAAA,EAAC;QAAyE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACjG3F,OAAA;UAAGsF,SAAS,EAAC,MAAM;UAAAC,QAAA,EAAC;QAAmF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxG;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzF,EAAA,CApWID,gBAAgB;AAAAoG,EAAA,GAAhBpG,gBAAgB;AAsWtB,eAAeA,gBAAgB;AAAC,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}