{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    user\n  } = useContext(AuthContext);\n  const [locationStatus, setLocationStatus] = useState({\n    permission: 'unknown',\n    // unknown, granted, denied, unavailable\n    tracking: false,\n    lastUpdated: null,\n    error: null\n  });\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [locationTrackingId, setLocationTrackingId] = useState(null);\n\n  // Function to handle geolocation errors\n  const handleGeolocationError = error => {\n    let errorMessage;\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = \"Location permission denied\";\n        setLocationStatus(prev => ({\n          ...prev,\n          permission: 'denied',\n          error: errorMessage\n        }));\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = \"Location information is unavailable\";\n        setLocationStatus(prev => ({\n          ...prev,\n          permission: 'unavailable',\n          error: errorMessage\n        }));\n        break;\n      case error.TIMEOUT:\n        errorMessage = \"Location request timed out\";\n        setLocationStatus(prev => ({\n          ...prev,\n          error: errorMessage\n        }));\n        break;\n      default:\n        errorMessage = \"An unknown error occurred while getting location\";\n        setLocationStatus(prev => ({\n          ...prev,\n          error: errorMessage\n        }));\n        break;\n    }\n    console.warn(errorMessage);\n  };\n\n  // Function to update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setLocationStatus(prev => ({\n        ...prev,\n        lastUpdated: new Date(),\n        error: null\n      }));\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      setLocationStatus(prev => ({\n        ...prev,\n        error: 'Failed to update location on server'\n      }));\n      return null;\n    }\n  };\n\n  // Function to get current position and update server\n  const getCurrentPosition = () => {\n    if (!navigator.geolocation) {\n      setLocationStatus(prev => ({\n        ...prev,\n        permission: 'unavailable',\n        error: 'Geolocation is not supported by this browser'\n      }));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setPosition({\n        latitude,\n        longitude\n      });\n      await updateLocation(latitude, longitude);\n      setLocationStatus(prev => ({\n        ...prev,\n        permission: 'granted',\n        tracking: true,\n        error: null\n      }));\n    }, handleGeolocationError, {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 0\n    });\n  };\n\n  // Start tracking location\n  const startLocationTracking = () => {\n    if (!isAuthenticated) return;\n\n    // Update status to online first\n    updateOnlineStatus(true);\n\n    // Get position immediately\n    getCurrentPosition();\n\n    // Then set up interval for tracking\n    const intervalId = setInterval(() => {\n      getCurrentPosition();\n    }, 60000); // Update every minute\n\n    setLocationTrackingId(intervalId);\n    return () => {\n      if (locationTrackingId) {\n        clearInterval(locationTrackingId);\n      }\n    };\n  };\n\n  // Stop tracking location\n  const stopLocationTracking = () => {\n    if (locationTrackingId) {\n      clearInterval(locationTrackingId);\n      setLocationTrackingId(null);\n\n      // Update status to offline\n      updateOnlineStatus(false);\n      setLocationStatus(prev => ({\n        ...prev,\n        tracking: false\n      }));\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async isOnline => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', {\n        isOnline\n      });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch all live users\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Start tracking when authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      startLocationTracking();\n    } else {\n      stopLocationTracking();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      stopLocationTracking();\n    };\n  }, [isAuthenticated]);\n\n  // Handle beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      updateOnlineStatus(false);\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      locationStatus,\n      position,\n      liveUsers,\n      loadingUsers,\n      getCurrentPosition,\n      startLocationTracking,\n      stopLocationTracking,\n      updateOnlineStatus,\n      fetchLiveUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"yrzstmbC1FZRGS1P2LrVzZjzRHY=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","isAuthenticated","user","locationStatus","setLocationStatus","permission","tracking","lastUpdated","error","position","setPosition","liveUsers","setLiveUsers","loadingUsers","setLoadingUsers","locationTrackingId","setLocationTrackingId","handleGeolocationError","errorMessage","code","PERMISSION_DENIED","prev","POSITION_UNAVAILABLE","TIMEOUT","console","warn","updateLocation","latitude","longitude","response","post","Date","data","getCurrentPosition","navigator","geolocation","coords","enableHighAccuracy","timeout","maximumAge","startLocationTracking","updateOnlineStatus","intervalId","setInterval","clearInterval","stopLocationTracking","isOnline","fetchLiveUsers","get","handleBeforeUnload","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { isAuthenticated, user } = useContext(AuthContext);\n  const [locationStatus, setLocationStatus] = useState({\n    permission: 'unknown',  // unknown, granted, denied, unavailable\n    tracking: false,\n    lastUpdated: null,\n    error: null\n  });\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [locationTrackingId, setLocationTrackingId] = useState(null);\n\n  // Function to handle geolocation errors\n  const handleGeolocationError = (error) => {\n    let errorMessage;\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = \"Location permission denied\";\n        setLocationStatus(prev => ({\n          ...prev,\n          permission: 'denied',\n          error: errorMessage\n        }));\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = \"Location information is unavailable\";\n        setLocationStatus(prev => ({\n          ...prev,\n          permission: 'unavailable',\n          error: errorMessage\n        }));\n        break;\n      case error.TIMEOUT:\n        errorMessage = \"Location request timed out\";\n        setLocationStatus(prev => ({\n          ...prev,\n          error: errorMessage\n        }));\n        break;\n      default:\n        errorMessage = \"An unknown error occurred while getting location\";\n        setLocationStatus(prev => ({\n          ...prev,\n          error: errorMessage\n        }));\n        break;\n    }\n    console.warn(errorMessage);\n  };\n\n  // Function to update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n\n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      \n      setLocationStatus(prev => ({\n        ...prev,\n        lastUpdated: new Date(),\n        error: null\n      }));\n\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      setLocationStatus(prev => ({\n        ...prev,\n        error: 'Failed to update location on server'\n      }));\n      return null;\n    }\n  };\n\n  // Function to get current position and update server\n  const getCurrentPosition = () => {\n    if (!navigator.geolocation) {\n      setLocationStatus(prev => ({\n        ...prev,\n        permission: 'unavailable',\n        error: 'Geolocation is not supported by this browser'\n      }));\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        setPosition({ latitude, longitude });\n        await updateLocation(latitude, longitude);\n        \n        setLocationStatus(prev => ({\n          ...prev, \n          permission: 'granted',\n          tracking: true,\n          error: null\n        }));\n      },\n      handleGeolocationError,\n      { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n    );\n  };\n\n  // Start tracking location\n  const startLocationTracking = () => {\n    if (!isAuthenticated) return;\n    \n    // Update status to online first\n    updateOnlineStatus(true);\n    \n    // Get position immediately\n    getCurrentPosition();\n    \n    // Then set up interval for tracking\n    const intervalId = setInterval(() => {\n      getCurrentPosition();\n    }, 60000); // Update every minute\n    \n    setLocationTrackingId(intervalId);\n    \n    return () => {\n      if (locationTrackingId) {\n        clearInterval(locationTrackingId);\n      }\n    };\n  };\n\n  // Stop tracking location\n  const stopLocationTracking = () => {\n    if (locationTrackingId) {\n      clearInterval(locationTrackingId);\n      setLocationTrackingId(null);\n      \n      // Update status to offline\n      updateOnlineStatus(false);\n      \n      setLocationStatus(prev => ({\n        ...prev,\n        tracking: false\n      }));\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async (isOnline) => {\n    if (!isAuthenticated) return;\n    \n    try {\n      await api.post('/location/status', { isOnline });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch all live users\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    \n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Start tracking when authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      startLocationTracking();\n    } else {\n      stopLocationTracking();\n    }\n    \n    // Cleanup on unmount\n    return () => {\n      stopLocationTracking();\n    };\n  }, [isAuthenticated]);\n\n  // Handle beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      updateOnlineStatus(false);\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        locationStatus,\n        position,\n        liveUsers,\n        loadingUsers,\n        getCurrentPosition,\n        startLocationTracking,\n        stopLocationTracking,\n        updateOnlineStatus,\n        fetchLiveUsers\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}