{"ast":null,"code":"var _jsxFileName = \"/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n\n  // Add this fetchTimers ref to solve the undefined error\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('Creating path between:', source, destination);\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths(newValue);\n    return newValue;\n  };\n\n  // Fetch paths data for online users, with optional intersection filtering\n  const fetchLivePaths = async (intersectOnly = showIntersectingOnly) => {\n    setIsLoading(true);\n    try {\n      var _response$data$data;\n      console.log(`Fetching paths with intersection filter: ${intersectOnly}`);\n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      console.log(`Fetched ${((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0} paths`);\n      if (intersectOnly) {\n        console.log('Intersection filter active, showing only paths that cross your route');\n      }\n      const now = Date.now();\n      fetchTimers.current.paths = now;\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    // Prevent calling too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.users < 20000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users) / 1000)}s)`);\n      return liveUsers;\n    }\n    setIsLoading(true);\n    try {\n      var _response$data$data2;\n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      console.log(`Fetched ${((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.length) || 0} online users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n\n      // Set up polling with the reduced 30-second interval\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 30000); // Use 30 seconds to reduce refreshing frequency\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n  const forceRefreshData = async () => {\n    console.log(\"Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Clear the timers to bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0\n      };\n\n      // First get users\n      const usersResponse = await api.get('/location/live');\n      const userData = usersResponse.data.data || [];\n      console.log(\"Users data:\", userData);\n\n      // Then get paths\n      const pathsResponse = await api.get(`/path/live?intersectOnly=${showIntersectingOnly}`);\n      const pathsData = pathsResponse.data.data || [];\n      console.log(\"Paths data:\", pathsData);\n\n      // Update states\n      setLiveUsers(userData);\n      setLivePaths(pathsData);\n      setLastUpdated(new Date());\n\n      // Return data for any additional processing\n      return {\n        users: userData,\n        paths: pathsData\n      };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      toggleIntersectionFilter,\n      getCurrentPosition,\n      forceRefreshData // Add this new function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"LGRrg3PD0h5IBoWNrfUZfdlABFU=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","fetchTimers","users","paths","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","status","warn","_error$response","_error$response$data","message","toggleIntersectionFilter","newValue","intersectOnly","_response$data$data","get","length","now","current","fetchLiveUsers","Math","round","_response$data$data2","getCurrentPosition","navigator","geolocation","coords","catch","err","intervalId","setInterval","clearInterval","forceRefreshData","usersResponse","userData","pathsResponse","pathsData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  \n  // Add this fetchTimers ref to solve the undefined error\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log('Creating path between:', source, destination);\n      \n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      setLastUpdated(new Date());\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths(newValue);\n    \n    return newValue;\n  };\n\n  // Fetch paths data for online users, with optional intersection filtering\n  const fetchLivePaths = async (intersectOnly = showIntersectingOnly) => {\n    setIsLoading(true);\n    try {\n      console.log(`Fetching paths with intersection filter: ${intersectOnly}`);\n      \n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      \n      console.log(`Fetched ${response.data.data?.length || 0} paths`);\n      if (intersectOnly) {\n        console.log('Intersection filter active, showing only paths that cross your route');\n      }\n      \n      const now = Date.now();\n      fetchTimers.current.paths = now;\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date());\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    // Prevent calling too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.users < 20000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users)/1000)}s)`);\n      return liveUsers;\n    }\n    \n    setIsLoading(true);\n    try {\n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      console.log(`Fetched ${response.data.data?.length || 0} online users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n      \n      // Set up polling with the reduced 30-second interval\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 30000); // Use 30 seconds to reduce refreshing frequency\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n\n  const forceRefreshData = async () => {\n    console.log(\"Force refreshing location data...\");\n    setIsLoading(true);\n    try {\n      // Clear the timers to bypass throttling\n      fetchTimers.current = {\n        users: 0,\n        paths: 0\n      };\n      \n      // First get users\n      const usersResponse = await api.get('/location/live');\n      const userData = usersResponse.data.data || [];\n      console.log(\"Users data:\", userData);\n      \n      // Then get paths\n      const pathsResponse = await api.get(`/path/live?intersectOnly=${showIntersectingOnly}`);\n      const pathsData = pathsResponse.data.data || [];\n      console.log(\"Paths data:\", pathsData);\n      \n      // Update states\n      setLiveUsers(userData);\n      setLivePaths(pathsData);\n      setLastUpdated(new Date());\n      \n      // Return data for any additional processing\n      return { users: userData, paths: pathsData };\n    } catch (error) {\n      console.error(\"Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        toggleIntersectionFilter,\n        getCurrentPosition,\n        forceRefreshData  // Add this new function\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACrF,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,eAAe,gBAAGT,aAAa,CAAC,CAAC;AAE9C,OAAO,MAAMU,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM;IAAEC;EAAK,CAAC,GAAGV,UAAU,CAACG,WAAW,CAAC;EACxC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,IAAIyB,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAEvE;EACA,MAAM4B,WAAW,GAAGzB,MAAM,CAAC;IACzB0B,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;IACpD,IAAI,CAACrB,IAAI,EAAE;IAEX,IAAI;MACF,MAAMsB,QAAQ,GAAG,MAAM9B,GAAG,CAAC+B,IAAI,CAAC,kBAAkB,EAAE;QAAEH,QAAQ;QAAEC;MAAU,CAAC,CAAC;MAC5EnB,WAAW,CAAC;QAAEkB,QAAQ;QAAEC;MAAU,CAAC,CAAC;MACpCT,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAOS,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdgB,OAAO,CAAChB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAAC,2BAA2B,CAAC;MACrC,MAAMD,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMiB,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IAChD,IAAI,CAAC5B,IAAI,EAAE;IAEX,IAAI;MACFyB,OAAO,CAACI,GAAG,CAAC,wBAAwB,EAAEF,MAAM,EAAEC,WAAW,CAAC;MAE1D,MAAMN,QAAQ,GAAG,MAAM9B,GAAG,CAAC+B,IAAI,CAAC,WAAW,EAAE;QAC3CI,MAAM;QACNC;MACF,CAAC,CAAC;;MAEF;MACA,MAAME,cAAc,CAAC,CAAC;MACtBlB,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAE1B,OAAOS,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOf,KAAK,EAAE;MACd,IAAIA,KAAK,CAACa,QAAQ,IAAIb,KAAK,CAACa,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QACnDN,OAAO,CAACO,IAAI,CAAC,2CAA2C,CAAC;QACzDtB,QAAQ,CAAC,kDAAkD,CAAC;MAC9D,CAAC,MAAM;QAAA,IAAAuB,eAAA,EAAAC,oBAAA;QACLT,OAAO,CAAChB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAAC,yBAAyB,IAAI,EAAAuB,eAAA,GAAAxB,KAAK,CAACa,QAAQ,cAAAW,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBT,IAAI,cAAAU,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI1B,KAAK,CAAC0B,OAAO,CAAC,CAAC;MACxF;MACA,MAAM1B,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM2B,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,QAAQ,GAAG,CAACvB,oBAAoB;IACtCC,uBAAuB,CAACsB,QAAQ,CAAC;;IAEjC;IACAP,cAAc,CAACO,QAAQ,CAAC;IAExB,OAAOA,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMP,cAAc,GAAG,MAAAA,CAAOQ,aAAa,GAAGxB,oBAAoB,KAAK;IACrEN,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MAAA,IAAA+B,mBAAA;MACFd,OAAO,CAACI,GAAG,CAAC,4CAA4CS,aAAa,EAAE,CAAC;MAExE,MAAMhB,QAAQ,GAAG,MAAM9B,GAAG,CAACgD,GAAG,CAAC,4BAA4BF,aAAa,EAAE,CAAC;MAE3Eb,OAAO,CAACI,GAAG,CAAC,WAAW,EAAAU,mBAAA,GAAAjB,QAAQ,CAACE,IAAI,CAACA,IAAI,cAAAe,mBAAA,uBAAlBA,mBAAA,CAAoBE,MAAM,KAAI,CAAC,QAAQ,CAAC;MAC/D,IAAIH,aAAa,EAAE;QACjBb,OAAO,CAACI,GAAG,CAAC,sEAAsE,CAAC;MACrF;MAEA,MAAMa,GAAG,GAAG7B,IAAI,CAAC6B,GAAG,CAAC,CAAC;MACtB1B,WAAW,CAAC2B,OAAO,CAACzB,KAAK,GAAGwB,GAAG;MAC/BpC,YAAY,CAACgB,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;MACtCZ,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1B,OAAOS,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdgB,OAAO,CAAChB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMoC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,MAAMF,GAAG,GAAG7B,IAAI,CAAC6B,GAAG,CAAC,CAAC;IACtB,IAAIA,GAAG,GAAG1B,WAAW,CAAC2B,OAAO,CAAC1B,KAAK,GAAG,KAAK,EAAE;MAC3CQ,OAAO,CAACI,GAAG,CAAC,uCAAuCgB,IAAI,CAACC,KAAK,CAAC,CAACJ,GAAG,GAAG1B,WAAW,CAAC2B,OAAO,CAAC1B,KAAK,IAAE,IAAI,CAAC,IAAI,CAAC;MAC1G,OAAOd,SAAS;IAClB;IAEAK,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MAAA,IAAAuC,oBAAA;MACF,MAAMzB,QAAQ,GAAG,MAAM9B,GAAG,CAACgD,GAAG,CAAC,gBAAgB,CAAC;MAChDxB,WAAW,CAAC2B,OAAO,CAAC1B,KAAK,GAAGyB,GAAG;MAC/BtC,YAAY,CAACkB,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;MACtCZ,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1BY,OAAO,CAACI,GAAG,CAAC,WAAW,EAAAkB,oBAAA,GAAAzB,QAAQ,CAACE,IAAI,CAACA,IAAI,cAAAuB,oBAAA,uBAAlBA,oBAAA,CAAoBN,MAAM,KAAI,CAAC,eAAe,CAAC;MACtE,OAAOnB,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdgB,OAAO,CAAChB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMwC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACF,kBAAkB,CACrC/C,QAAQ,IAAK;QACZ,MAAM;UAAEmB,QAAQ;UAAEC;QAAU,CAAC,GAAGpB,QAAQ,CAACkD,MAAM;QAC/CjD,WAAW,CAAC;UAAEkB,QAAQ;UAAEC;QAAU,CAAC,CAAC;;QAEpC;QACA,IAAIrB,IAAI,EAAE;UACRmB,cAAc,CAACC,QAAQ,EAAEC,SAAS,CAAC,CAChC+B,KAAK,CAACC,GAAG,IAAI5B,OAAO,CAAChB,KAAK,CAAC,oCAAoC,EAAE4C,GAAG,CAAC,CAAC;QAC3E;MACF,CAAC,EACA5C,KAAK,IAAK;QACTgB,OAAO,CAAChB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1CC,QAAQ,CAAC,wBAAwB,CAAC;MACpC,CACF,CAAC;IACH,CAAC,MAAM;MACLA,QAAQ,CAAC,8CAA8C,CAAC;IAC1D;EACF,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd,IAAIW,IAAI,EAAE;MACRgD,kBAAkB,CAAC,CAAC;;MAEpB;MACA,MAAMM,UAAU,GAAGC,WAAW,CAAC,MAAM;QACnCX,cAAc,CAAC,CAAC,CAACQ,KAAK,CAACC,GAAG,IAAI5B,OAAO,CAAChB,KAAK,CAAC,wBAAwB,EAAE4C,GAAG,CAAC,CAAC;QAC3EvB,cAAc,CAAC,CAAC,CAACsB,KAAK,CAACC,GAAG,IAAI5B,OAAO,CAAChB,KAAK,CAAC,wBAAwB,EAAE4C,GAAG,CAAC,CAAC;MAC7E,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAEX,OAAO,MAAMG,aAAa,CAACF,UAAU,CAAC;IACxC;EACF,CAAC,EAAE,CAACtD,IAAI,CAAC,CAAC;EAGV,MAAMyD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnChC,OAAO,CAACI,GAAG,CAAC,mCAAmC,CAAC;IAChDrB,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACAQ,WAAW,CAAC2B,OAAO,GAAG;QACpB1B,KAAK,EAAE,CAAC;QACRC,KAAK,EAAE;MACT,CAAC;;MAED;MACA,MAAMwC,aAAa,GAAG,MAAMlE,GAAG,CAACgD,GAAG,CAAC,gBAAgB,CAAC;MACrD,MAAMmB,QAAQ,GAAGD,aAAa,CAAClC,IAAI,CAACA,IAAI,IAAI,EAAE;MAC9CC,OAAO,CAACI,GAAG,CAAC,aAAa,EAAE8B,QAAQ,CAAC;;MAEpC;MACA,MAAMC,aAAa,GAAG,MAAMpE,GAAG,CAACgD,GAAG,CAAC,4BAA4B1B,oBAAoB,EAAE,CAAC;MACvF,MAAM+C,SAAS,GAAGD,aAAa,CAACpC,IAAI,CAACA,IAAI,IAAI,EAAE;MAC/CC,OAAO,CAACI,GAAG,CAAC,aAAa,EAAEgC,SAAS,CAAC;;MAErC;MACAzD,YAAY,CAACuD,QAAQ,CAAC;MACtBrD,YAAY,CAACuD,SAAS,CAAC;MACvBjD,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;;MAE1B;MACA,OAAO;QAAEI,KAAK,EAAE0C,QAAQ;QAAEzC,KAAK,EAAE2C;MAAU,CAAC;IAC9C,CAAC,CAAC,OAAOpD,KAAK,EAAE;MACdgB,OAAO,CAAChB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,QAAQ,CAAC,mCAAmC,GAAGD,KAAK,CAAC0B,OAAO,CAAC;MAC7D,MAAM1B,KAAK;IACb,CAAC,SAAS;MACRD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEb,OAAA,CAACC,eAAe,CAACkE,QAAQ;IACvBC,KAAK,EAAE;MACL9D,QAAQ;MACRE,SAAS;MACTE,SAAS;MACTE,SAAS;MACTE,KAAK;MACLE,WAAW;MACXG,oBAAoB;MACpBK,cAAc;MACdO,UAAU;MACVkB,cAAc;MACdd,cAAc;MACdM,wBAAwB;MACxBY,kBAAkB;MAClBS,gBAAgB,CAAE;IACpB,CAAE;IAAA3D,QAAA,EAEDA;EAAQ;IAAAkE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACpE,EAAA,CA7NWF,gBAAgB;AAAAuE,EAAA,GAAhBvE,gBAAgB;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}