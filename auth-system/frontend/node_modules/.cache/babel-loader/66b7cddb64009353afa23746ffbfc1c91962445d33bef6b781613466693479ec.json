{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, useMapEvents } from 'react-leaflet';\nimport { LocationContext } from '../context/LocationContext';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport ChatDialog from './ChatDialog';\nimport NotificationsPanel from './NotificationsPanel';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './UserLocationMap.css';\nimport NotificationButton from './NotificationButton';\n// Fix for default icons\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments, faSync } from '@fortawesome/free-solid-svg-icons';\n\n// Define default Leaflet icon\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// Helper to parse route data from PostGIS or OSRM\nconst parseRouteData = routeData => {\n  if (!routeData) return [];\n\n  // LINESTRING parsing\n  if (typeof routeData === 'string' && routeData.startsWith('LINESTRING')) {\n    try {\n      // Extract coordinates from LINESTRING(lng lat, lng lat, ...)\n      const coordsStr = routeData.substring(routeData.indexOf('(') + 1, routeData.lastIndexOf(')'));\n      return coordsStr.split(',').map(pair => {\n        const [lng, lat] = pair.trim().split(' ').map(parseFloat);\n        // Return [lat, lng] for Leaflet\n        return [lat, lng];\n      });\n    } catch (e) {\n      console.error('Error parsing LINESTRING:', e, routeData);\n      return [];\n    }\n  }\n\n  // If it's already an array, return it (assuming it's in Leaflet's [lat, lng] format)\n  if (Array.isArray(routeData)) {\n    return routeData;\n  }\n  return [];\n};\n\n// Component to update map bounds based on users' positions and routes\nfunction MapBoundsUpdater({\n  users,\n  paths\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (!users.length && !paths.length) return;\n    try {\n      const points = [];\n\n      // Add user points\n      users.forEach(user => {\n        if (user.latitude && user.longitude) {\n          points.push([user.latitude, user.longitude]);\n        }\n      });\n\n      // Add path points (with better handling for complex routes)\n      paths.forEach(path => {\n        if (path.parsedRoute && Array.isArray(path.parsedRoute)) {\n          // Don't add every point - just add first, last, and some in between\n          // to avoid overloading the bounds calculation with too many points\n          const routePoints = path.parsedRoute;\n          if (routePoints.length > 0) {\n            points.push(routePoints[0]); // Add first point\n\n            if (routePoints.length > 10) {\n              // Add a few points in the middle for long routes\n              points.push(routePoints[Math.floor(routePoints.length / 3)]);\n              points.push(routePoints[Math.floor(routePoints.length * 2 / 3)]);\n            }\n            if (routePoints.length > 1) {\n              points.push(routePoints[routePoints.length - 1]); // Add last point\n            }\n          }\n        }\n      });\n      if (points.length > 0) {\n        const bounds = L.latLngBounds(points);\n        map.fitBounds(bounds, {\n          padding: [50, 50]\n        });\n      }\n    } catch (error) {\n      console.error('Error updating map bounds:', error);\n    }\n  }, [users, paths, map]);\n  return null;\n}\n\n// Component to handle map clicks for route creation\n_s(MapBoundsUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapBoundsUpdater;\nfunction MapClickHandler({\n  routeMode,\n  selectedSource,\n  setSelectedSource,\n  createPath\n}) {\n  _s2();\n  useMapEvents({\n    click: e => {\n      if (!routeMode) return;\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      if (!selectedSource) {\n        // Set source\n        setSelectedSource({\n          lat,\n          lng\n        });\n      } else {\n        // Set destination and create path\n        const destination = {\n          lat,\n          lng\n        };\n        createPath(selectedSource, destination);\n\n        // Reset route mode (this will be handled by parent component)\n      }\n    }\n  });\n  return null;\n}\n_s2(MapClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c2 = MapClickHandler;\nconst UserLocationMap = () => {\n  _s3();\n  const {\n    liveUsers,\n    fetchLiveUsers,\n    livePaths,\n    fetchLivePaths,\n    createPath,\n    showIntersectingOnly,\n    toggleIntersectionFilter,\n    forceRefreshData\n  } = useContext(LocationContext);\n  const {\n    user\n  } = useContext(AuthContext);\n  const {\n    sendChatRequest,\n    notifications,\n    currentChat,\n    openChat,\n    activeChats,\n    fetchActiveChats,\n    fetchNotifications\n  } = useContext(ChatContext);\n  const [debugContent, setDebugContent] = useState('');\n  const [usersWithLocation, setUsersWithLocation] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [pathsWithCoordinates, setPathsWithCoordinates] = useState([]);\n  const [routeMode, setRouteMode] = useState(false);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const mapRef = useRef(null);\n  const mapCenter = useRef([37.7749, -122.4194]); // Default to San Francisco\n\n  // Fixed createCustomIcon function - moved inside component\n  const createCustomIcon = color => {\n    return L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div class=\"marker-pin\" style=\"background-color: ${color};\"></div>`,\n      iconSize: [30, 42],\n      iconAnchor: [15, 42]\n    });\n  };\n\n  // Add a debug effect to log user data for troubleshooting\n  useEffect(() => {\n    console.log('FULL LIVE USER DATA:', liveUsers);\n    if (liveUsers && liveUsers.length > 0) {\n      // Display first 3 users' raw data for debugging\n      const userSample = liveUsers.slice(0, 3).map(u => ({\n        id: u.id,\n        username: u.username,\n        latitude: u.latitude,\n        longitude: u.longitude,\n        type: typeof u.latitude\n      }));\n      setDebugContent(JSON.stringify(userSample, null, 2));\n    }\n  }, [liveUsers]);\n\n  // Chat request handler\n  const handleChatRequest = userId => {\n    if (userId === user.id) {\n      // Don't allow chatting with yourself\n      return;\n    }\n    sendChatRequest(userId).then(response => {\n      console.log('Chat request sent successfully:', response);\n    }).catch(error => {\n      console.error('Failed to send chat request:', error);\n    });\n  };\n\n  // Handle refresh button click\n  const handleRefresh = async () => {\n    try {\n      setIsLoading(true);\n      console.log('Manually refreshing map data...');\n\n      // Refresh notifications too\n      if (fetchNotifications) {\n        await fetchNotifications(true);\n      }\n\n      // Only use forceRefreshData if it exists, otherwise fall back to the individual fetch functions\n      if (forceRefreshData) {\n        await forceRefreshData();\n      } else {\n        await Promise.all([fetchLiveUsers(), fetchLivePaths()]);\n      }\n      setLastUpdated(new Date());\n      console.log('Map data refreshed manually');\n    } catch (error) {\n      console.error('Manual refresh failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Enhanced notification toggle with debugging\n  const toggleNotifications = () => {\n    console.log('Toggling notifications panel. Current state:', showNotifications);\n    // Refresh notifications when opening panel\n    if (!showNotifications && fetchNotifications) {\n      fetchNotifications(true).catch(err => console.error('Failed to refresh notifications:', err));\n    }\n    setShowNotifications(!showNotifications);\n  };\n\n  // Fetch active chats on component mount\n  useEffect(() => {\n    if (user && fetchActiveChats) {\n      fetchActiveChats();\n    }\n  }, [user, fetchActiveChats]);\n\n  // Effect for initial data load and periodic updates\n  useEffect(() => {\n    if (!user) return;\n\n    // Initial load - force immediate fetch\n    setIsLoading(true);\n    console.log('Initial data load...');\n\n    // Use Promise.all to load both data types in parallel\n    Promise.all([fetchLiveUsers(), fetchLivePaths()]).then(([users, paths]) => {\n      console.log(`Initial load complete: ${(users === null || users === void 0 ? void 0 : users.length) || 0} users, ${(paths === null || paths === void 0 ? void 0 : paths.length) || 0} paths`);\n      setLastUpdated(new Date());\n    }).catch(error => {\n      console.error('Error in initial data load:', error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n\n    // Then set up regular polling\n    let isMounted = true;\n    const loadMapData = async () => {\n      if (!isMounted || isLoading) return;\n      console.log(`Map data refresh at ${new Date().toLocaleTimeString()}`);\n      try {\n        // Only update if too much time has passed since last update\n        const timeSinceUpdate = new Date() - lastUpdated;\n        if (timeSinceUpdate > 25000) {\n          // 25 seconds minimum\n          setIsLoading(true);\n          await fetchLiveUsers();\n          await fetchLivePaths();\n          setLastUpdated(new Date());\n        } else {\n          console.log(`Skipping refresh - only ${Math.round(timeSinceUpdate / 1000)}s since last update`);\n        }\n      } catch (error) {\n        console.error('Error refreshing map data:', error);\n      } finally {\n        if (isMounted) {\n          setIsLoading(false);\n        }\n      }\n    };\n    const intervalId = setInterval(loadMapData, 60000); // Increased to 60 seconds to reduce load\n\n    return () => {\n      isMounted = false;\n      clearInterval(intervalId);\n    };\n  }, [user, fetchLiveUsers, fetchLivePaths, isLoading, lastUpdated]);\n\n  // Effect to process user data\n  useEffect(() => {\n    if (liveUsers && Array.isArray(liveUsers)) {\n      console.log(`Processing ${liveUsers.length} users`);\n\n      // Filter users with valid coordinates and process them\n      const filtered = liveUsers.filter(u => {\n        // Ensure the coordinates are valid numbers within range\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        return !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      });\n      console.log(`Found ${filtered.length} users with valid coordinates`);\n\n      // Update center point if we have valid users\n      if (filtered.length > 0) {\n        // Calculate average position for map center\n        const totalLat = filtered.reduce((sum, u) => sum + parseFloat(u.latitude), 0);\n        const totalLng = filtered.reduce((sum, u) => sum + parseFloat(u.longitude), 0);\n        mapCenter.current = [totalLat / filtered.length, totalLng / filtered.length];\n        console.log(`Map center set to: [${mapCenter.current[0]}, ${mapCenter.current[1]}]`);\n      }\n      setUsersWithLocation(filtered);\n    } else {\n      console.warn('liveUsers is not valid array:', liveUsers);\n      setUsersWithLocation([]);\n    }\n  }, [liveUsers]);\n\n  // Effect to process path data\n  useEffect(() => {\n    if (livePaths) {\n      console.log(`Processing ${livePaths.length} paths`);\n      const parsed = livePaths.map(path => ({\n        ...path,\n        parsedRoute: parseRouteData(path.route)\n      })).filter(path => {\n        const isValid = path.parsedRoute && path.parsedRoute.length > 0;\n        if (!isValid) {\n          console.log(`Path ${path.id} has invalid route data`);\n        }\n        return isValid;\n      });\n      console.log(`Found ${parsed.length} paths with valid route data`);\n      setPathsWithCoordinates(parsed);\n    } else {\n      console.log('No live paths data available');\n      setPathsWithCoordinates([]);\n    }\n  }, [livePaths]);\n  const toggleRouteMode = () => {\n    setRouteMode(!routeMode);\n    if (routeMode) {\n      // If turning off, clear selected source\n      setSelectedSource(null);\n    }\n  };\n  const handleCreatePath = (source, destination) => {\n    createPath(source, destination);\n    setRouteMode(false);\n    setSelectedSource(null);\n  };\n  const handleToggleIntersectionFilter = () => {\n    toggleIntersectionFilter();\n  };\n  const formatTime = date => {\n    if (!(date instanceof Date)) {\n      try {\n        date = new Date(date);\n      } catch (e) {\n        return 'Unknown';\n      }\n    }\n    return date.toLocaleTimeString();\n  };\n\n  // Calculate center point for map display or use a default\n  let centerLat = 0,\n    centerLng = 0;\n  if (usersWithLocation.length > 0) {\n    centerLat = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.latitude || 0), 0) / usersWithLocation.length;\n    centerLng = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.longitude || 0), 0) / usersWithLocation.length;\n  } else {\n    // Default to a central location if no users\n    centerLat = 37.7749; // San Francisco as a default\n    centerLng = -122.4194;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Live User Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-controls\",\n          children: [/*#__PURE__*/_jsxDEV(NotificationButton, {\n            notificationCount: notifications ? notifications.length : 0,\n            onClick: toggleNotifications\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"refresh-button\",\n            onClick: handleRefresh,\n            title: \"Refresh map data\",\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faSync\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `filter-button ${showIntersectingOnly ? 'active' : ''}`,\n            onClick: handleToggleIntersectionFilter,\n            title: \"Show only paths that intersect with your route\",\n            children: showIntersectingOnly ? 'Show All Paths' : 'Show Intersecting Only'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `route-button ${routeMode ? 'active' : ''}`,\n          onClick: toggleRouteMode,\n          children: routeMode ? 'Cancel Route' : 'Create Route'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), routeMode && !selectedSource && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-instructions\",\n          children: \"Click on map to set starting point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this), routeMode && selectedSource && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"route-instructions\",\n          children: \"Click on map to set destination\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"last-updated\",\n          children: [\"Last updated: \", formatTime(lastUpdated)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), showNotifications && /*#__PURE__*/_jsxDEV(NotificationsPanel, {\n      onClose: () => setShowNotifications(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }, this), showIntersectingOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"intersection-filter-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-info-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this), \"Showing only paths that intersect with your route.\", pathsWithCoordinates.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-intersections\",\n        children: \" No intersecting paths found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [centerLat || 37.7749, centerLng || -122.4194],\n      zoom: 4,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapClickHandler, {\n        routeMode: routeMode,\n        selectedSource: selectedSource,\n        setSelectedSource: setSelectedSource,\n        createPath: handleCreatePath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), usersWithLocation && usersWithLocation.length > 0 ? usersWithLocation.map(u => {\n        try {\n          // Ensure coordinates are valid numbers\n          const lat = parseFloat(u.latitude);\n          const lng = parseFloat(u.longitude);\n\n          // Skip invalid coordinates\n          if (isNaN(lat) || isNaN(lng) || Math.abs(lat) > 90 || Math.abs(lng) > 180) {\n            console.warn(`Invalid coordinates for user ${u.username}: [${u.latitude}, ${u.longitude}]`);\n            return null;\n          }\n          console.log(`Rendering marker for ${u.username} at [${lat}, ${lng}]`);\n\n          // Use default icon for more reliability\n          const markerIcon = u.id === (user === null || user === void 0 ? void 0 : user.id) ? createCustomIcon('#4285F4') : createCustomIcon('#FF5722');\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: [lat, lng],\n            icon: markerIcon,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-popup\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: u.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 523,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"user-status\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"status-dot\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 525,\n                    columnNumber: 25\n                  }, this), \"Online\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 524,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"user-location\",\n                  children: [\"Coordinates: \", lat.toFixed(4), \", \", lng.toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"user-last-active\",\n                  children: [\"Last active: \", formatTime(u.last_active)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 23\n                }, this), u.id === (user === null || user === void 0 ? void 0 : user.id) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"current-user-tag\",\n                  children: \"This is you\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-button-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"chat-request-button\",\n                    onClick: () => handleChatRequest(u.id),\n                    children: [\"Chat with \", u.username]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 538,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 537,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 19\n            }, this)\n          }, `user-${u.id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 17\n          }, this);\n        } catch (error) {\n          console.error(`Error rendering marker for user ${u.username}:`, error);\n          return null;\n        }\n      }) : null, routeMode && selectedSource && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [selectedSource.lat, selectedSource.lng],\n        icon: createCustomIcon('#00C853'),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Starting point\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this), pathsWithCoordinates.map((path, idx) => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: path.parsedRoute\n        // Use a special color for intersecting paths\n        ,\n        color: path.user_id === (user === null || user === void 0 ? void 0 : user.id) ? '#2196F3' : path.intersects_with_user ? '#4CAF50' : '#FF5722',\n        weight: 4,\n        opacity: 0.7,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"path-popup\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Route Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"User:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 20\n              }, this), \" \", path.username || 'Unknown']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Created:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 581,\n                columnNumber: 20\n              }, this), \" \", formatTime(path.created_at)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 17\n            }, this), path.intersects_with_user && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"intersecting-path-notice\",\n              children: \"This path intersects with your route!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 19\n            }, this), path.parsedRoute.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"From:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 587,\n                  columnNumber: 24\n                }, this), \" \", path.parsedRoute[0][0].toFixed(4), \", \", path.parsedRoute[0][1].toFixed(4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"To:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 24\n                }, this), \" \", path.parsedRoute[path.parsedRoute.length - 1][0].toFixed(4), \", \", path.parsedRoute[path.parsedRoute.length - 1][1].toFixed(4)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Points:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 589,\n                  columnNumber: 24\n                }, this), \" \", path.parsedRoute.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this)\n      }, `path-${path.id || idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(MapBoundsUpdater, {\n        users: usersWithLocation,\n        paths: pathsWithCoordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Map Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#4285F4'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#FF5722'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Other users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#2196F3'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your path\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#4CAF50'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Intersecting paths\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-line\",\n            style: {\n              backgroundColor: '#FF5722'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Other users' paths\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), routeMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-marker\",\n            style: {\n              backgroundColor: '#00C853'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Selected starting point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-info-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Active Users:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 13\n          }, this), \" \", usersWithLocation.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Active Paths:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 13\n          }, this), \" \", pathsWithCoordinates.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Last Updated:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 13\n          }, this), \" \", formatTime(lastUpdated)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), showIntersectingOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Filter:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this), \" Showing intersecting paths only\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"active-chats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faComments\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 13\n          }, this), \" Active Chats\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chats-list\",\n          children: activeChats && activeChats.length > 0 ? activeChats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-item\",\n            onClick: () => openChat(chat.id),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-user\",\n              children: chat.otherParticipants && chat.otherParticipants.length > 0 ? chat.otherParticipants[0].username : 'Unknown User'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 19\n            }, this), chat.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unread-badge\",\n              children: chat.unreadCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 21\n            }, this)]\n          }, chat.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-chats\",\n            children: \"No active chats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), pathsWithCoordinates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-paths\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Paths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paths-list\",\n          children: pathsWithCoordinates.slice(0, 5).map((path, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `path-item ${path.intersects_with_user ? 'intersecting' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: path.username || 'Unknown user'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: formatTime(path.created_at)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 694,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"path-details\",\n              children: [path.intersects_with_user && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"intersect-badge\",\n                children: \"Intersects with your route\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 23\n              }, this), path.parsedRoute.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"From: \", path.parsedRoute[0][0].toFixed(4), \", \", path.parsedRoute[0][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"To: \", path.parsedRoute[path.parsedRoute.length - 1][0].toFixed(4), \", \", path.parsedRoute[path.parsedRoute.length - 1][1].toFixed(4)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 705,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"Route Points: \", path.parsedRoute.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 19\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }, this), currentChat && /*#__PURE__*/_jsxDEV(ChatDialog, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n};\n_s3(UserLocationMap, \"/bnC7Q6DANxXaQ24waCsXWPNnyM=\");\n_c3 = UserLocationMap;\nexport default UserLocationMap;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MapBoundsUpdater\");\n$RefreshReg$(_c2, \"MapClickHandler\");\n$RefreshReg$(_c3, \"UserLocationMap\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useRef","MapContainer","TileLayer","Marker","Popup","Polyline","useMap","useMapEvents","LocationContext","AuthContext","ChatContext","ChatDialog","NotificationsPanel","L","NotificationButton","icon","iconShadow","FontAwesomeIcon","faComments","faSync","jsxDEV","_jsxDEV","Fragment","_Fragment","DefaultIcon","iconUrl","shadowUrl","iconSize","iconAnchor","prototype","options","parseRouteData","routeData","startsWith","coordsStr","substring","indexOf","lastIndexOf","split","map","pair","lng","lat","trim","parseFloat","e","console","error","Array","isArray","MapBoundsUpdater","users","paths","_s","length","points","forEach","user","latitude","longitude","push","path","parsedRoute","routePoints","Math","floor","bounds","latLngBounds","fitBounds","padding","_c","MapClickHandler","routeMode","selectedSource","setSelectedSource","createPath","_s2","click","latlng","destination","_c2","UserLocationMap","_s3","liveUsers","fetchLiveUsers","livePaths","fetchLivePaths","showIntersectingOnly","toggleIntersectionFilter","forceRefreshData","sendChatRequest","notifications","currentChat","openChat","activeChats","fetchActiveChats","fetchNotifications","debugContent","setDebugContent","usersWithLocation","setUsersWithLocation","isLoading","setIsLoading","lastUpdated","setLastUpdated","Date","pathsWithCoordinates","setPathsWithCoordinates","setRouteMode","showNotifications","setShowNotifications","mapRef","mapCenter","createCustomIcon","color","divIcon","className","html","log","userSample","slice","u","id","username","type","JSON","stringify","handleChatRequest","userId","then","response","catch","handleRefresh","Promise","all","toggleNotifications","err","finally","isMounted","loadMapData","toLocaleTimeString","timeSinceUpdate","round","intervalId","setInterval","clearInterval","filtered","filter","isNaN","abs","totalLat","reduce","sum","totalLng","current","warn","parsed","route","isValid","toggleRouteMode","handleCreatePath","source","handleToggleIntersectionFilter","formatTime","date","centerLat","centerLng","children","fileName","_jsxFileName","lineNumber","columnNumber","notificationCount","onClick","title","onClose","center","zoom","style","height","width","ref","attribution","url","markerIcon","position","toFixed","last_active","idx","positions","user_id","intersects_with_user","weight","opacity","created_at","backgroundColor","chat","otherParticipants","unreadCount","_c3","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, useMapEvents } from 'react-leaflet';\nimport { LocationContext } from '../context/LocationContext';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport ChatDialog from './ChatDialog';\nimport NotificationsPanel from './NotificationsPanel';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './UserLocationMap.css';\nimport NotificationButton from './NotificationButton';\n// Fix for default icons\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments, faSync } from '@fortawesome/free-solid-svg-icons';\n\n// Define default Leaflet icon\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\n// Helper to parse route data from PostGIS or OSRM\nconst parseRouteData = (routeData) => {\n  if (!routeData) return [];\n  \n  // LINESTRING parsing\n  if (typeof routeData === 'string' && routeData.startsWith('LINESTRING')) {\n    try {\n      // Extract coordinates from LINESTRING(lng lat, lng lat, ...)\n      const coordsStr = routeData.substring(routeData.indexOf('(') + 1, routeData.lastIndexOf(')'));\n      return coordsStr.split(',').map(pair => {\n        const [lng, lat] = pair.trim().split(' ').map(parseFloat);\n        // Return [lat, lng] for Leaflet\n        return [lat, lng]; \n      });\n    } catch (e) {\n      console.error('Error parsing LINESTRING:', e, routeData);\n      return [];\n    }\n  }\n  \n  // If it's already an array, return it (assuming it's in Leaflet's [lat, lng] format)\n  if (Array.isArray(routeData)) {\n    return routeData;\n  }\n  \n  return [];\n};\n\n// Component to update map bounds based on users' positions and routes\nfunction MapBoundsUpdater({ users, paths }) {\n  const map = useMap();\n  \n  useEffect(() => {\n    if (!users.length && !paths.length) return;\n    \n    try {\n      const points = [];\n      \n      // Add user points\n      users.forEach(user => {\n        if (user.latitude && user.longitude) {\n          points.push([user.latitude, user.longitude]);\n        }\n      });\n      \n      // Add path points (with better handling for complex routes)\n      paths.forEach(path => {\n        if (path.parsedRoute && Array.isArray(path.parsedRoute)) {\n          // Don't add every point - just add first, last, and some in between\n          // to avoid overloading the bounds calculation with too many points\n          const routePoints = path.parsedRoute;\n          if (routePoints.length > 0) {\n            points.push(routePoints[0]); // Add first point\n            \n            if (routePoints.length > 10) {\n              // Add a few points in the middle for long routes\n              points.push(routePoints[Math.floor(routePoints.length / 3)]);\n              points.push(routePoints[Math.floor(routePoints.length * 2 / 3)]);\n            }\n            \n            if (routePoints.length > 1) {\n              points.push(routePoints[routePoints.length - 1]); // Add last point\n            }\n          }\n        }\n      });\n      \n      if (points.length > 0) {\n        const bounds = L.latLngBounds(points);\n        map.fitBounds(bounds, { padding: [50, 50] });\n      }\n    } catch (error) {\n      console.error('Error updating map bounds:', error);\n    }\n  }, [users, paths, map]);\n  \n  return null;\n}\n\n// Component to handle map clicks for route creation\nfunction MapClickHandler({ routeMode, selectedSource, setSelectedSource, createPath }) {\n  useMapEvents({\n    click: (e) => {\n      if (!routeMode) return;\n      \n      const { lat, lng } = e.latlng;\n      \n      if (!selectedSource) {\n        // Set source\n        setSelectedSource({ lat, lng });\n      } else {\n        // Set destination and create path\n        const destination = { lat, lng };\n        createPath(selectedSource, destination);\n        \n        // Reset route mode (this will be handled by parent component)\n      }\n    }\n  });\n  \n  return null;\n}\n\nconst UserLocationMap = () => {\n  const { \n    liveUsers, \n    fetchLiveUsers, \n    livePaths, \n    fetchLivePaths, \n    createPath, \n    showIntersectingOnly, \n    toggleIntersectionFilter,\n    forceRefreshData\n  } = useContext(LocationContext);\n  \n  const { user } = useContext(AuthContext);\n  const { \n    sendChatRequest, \n    notifications, \n    currentChat, \n    openChat,\n    activeChats,\n    fetchActiveChats,\n    fetchNotifications\n  } = useContext(ChatContext);\n  \n  const [debugContent, setDebugContent] = useState('');\n  const [usersWithLocation, setUsersWithLocation] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [pathsWithCoordinates, setPathsWithCoordinates] = useState([]);\n  const [routeMode, setRouteMode] = useState(false);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const mapRef = useRef(null);\n  const mapCenter = useRef([37.7749, -122.4194]); // Default to San Francisco\n\n  // Fixed createCustomIcon function - moved inside component\n  const createCustomIcon = (color) => {\n    return L.divIcon({\n      className: 'custom-div-icon',\n      html: `<div class=\"marker-pin\" style=\"background-color: ${color};\"></div>`,\n      iconSize: [30, 42],\n      iconAnchor: [15, 42]\n    });\n  };\n\n  // Add a debug effect to log user data for troubleshooting\n  useEffect(() => {\n    console.log('FULL LIVE USER DATA:', liveUsers);\n    if (liveUsers && liveUsers.length > 0) {\n      // Display first 3 users' raw data for debugging\n      const userSample = liveUsers.slice(0, 3).map(u => ({\n        id: u.id,\n        username: u.username,\n        latitude: u.latitude,\n        longitude: u.longitude,\n        type: typeof u.latitude\n      }));\n      setDebugContent(JSON.stringify(userSample, null, 2));\n    }\n  }, [liveUsers]);\n\n  // Chat request handler\n  const handleChatRequest = (userId) => {\n    if (userId === user.id) {\n      // Don't allow chatting with yourself\n      return;\n    }\n    \n    sendChatRequest(userId)\n      .then((response) => {\n        console.log('Chat request sent successfully:', response);\n      })\n      .catch((error) => {\n        console.error('Failed to send chat request:', error);\n      });\n  };\n\n  // Handle refresh button click\n  const handleRefresh = async () => {\n    try {\n      setIsLoading(true);\n      console.log('Manually refreshing map data...');\n      \n      // Refresh notifications too\n      if (fetchNotifications) {\n        await fetchNotifications(true);\n      }\n      \n      // Only use forceRefreshData if it exists, otherwise fall back to the individual fetch functions\n      if (forceRefreshData) {\n        await forceRefreshData();\n      } else {\n        await Promise.all([fetchLiveUsers(), fetchLivePaths()]);\n      }\n      \n      setLastUpdated(new Date());\n      console.log('Map data refreshed manually');\n    } catch (error) {\n      console.error('Manual refresh failed:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Enhanced notification toggle with debugging\n  const toggleNotifications = () => {\n    console.log('Toggling notifications panel. Current state:', showNotifications);\n    // Refresh notifications when opening panel\n    if (!showNotifications && fetchNotifications) {\n      fetchNotifications(true).catch(err => console.error('Failed to refresh notifications:', err));\n    }\n    setShowNotifications(!showNotifications);\n  };\n\n  // Fetch active chats on component mount\n  useEffect(() => {\n    if (user && fetchActiveChats) {\n      fetchActiveChats();\n    }\n  }, [user, fetchActiveChats]);\n\n  // Effect for initial data load and periodic updates\n  useEffect(() => {\n    if (!user) return;\n    \n    // Initial load - force immediate fetch\n    setIsLoading(true);\n    console.log('Initial data load...');\n    \n    // Use Promise.all to load both data types in parallel\n    Promise.all([fetchLiveUsers(), fetchLivePaths()])\n      .then(([users, paths]) => {\n        console.log(`Initial load complete: ${users?.length || 0} users, ${paths?.length || 0} paths`);\n        setLastUpdated(new Date());\n      })\n      .catch(error => {\n        console.error('Error in initial data load:', error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n    \n    // Then set up regular polling\n    let isMounted = true;\n    \n    const loadMapData = async () => {\n      if (!isMounted || isLoading) return;\n      \n      console.log(`Map data refresh at ${new Date().toLocaleTimeString()}`);\n      \n      try {\n        // Only update if too much time has passed since last update\n        const timeSinceUpdate = new Date() - lastUpdated;\n        if (timeSinceUpdate > 25000) { // 25 seconds minimum\n          setIsLoading(true);\n          await fetchLiveUsers();\n          await fetchLivePaths();\n          setLastUpdated(new Date());\n        } else {\n          console.log(`Skipping refresh - only ${Math.round(timeSinceUpdate/1000)}s since last update`);\n        }\n      } catch (error) {\n        console.error('Error refreshing map data:', error);\n      } finally {\n        if (isMounted) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    const intervalId = setInterval(loadMapData, 60000); // Increased to 60 seconds to reduce load\n    \n    return () => {\n      isMounted = false;\n      clearInterval(intervalId);\n    };\n  }, [user, fetchLiveUsers, fetchLivePaths, isLoading, lastUpdated]);\n\n  // Effect to process user data\n  useEffect(() => {\n    if (liveUsers && Array.isArray(liveUsers)) {\n      console.log(`Processing ${liveUsers.length} users`);\n      \n      // Filter users with valid coordinates and process them\n      const filtered = liveUsers.filter(u => {\n        // Ensure the coordinates are valid numbers within range\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        return !isNaN(lat) && !isNaN(lng) && \n               Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      });\n      \n      console.log(`Found ${filtered.length} users with valid coordinates`);\n      \n      // Update center point if we have valid users\n      if (filtered.length > 0) {\n        // Calculate average position for map center\n        const totalLat = filtered.reduce((sum, u) => sum + parseFloat(u.latitude), 0);\n        const totalLng = filtered.reduce((sum, u) => sum + parseFloat(u.longitude), 0);\n        \n        mapCenter.current = [\n          totalLat / filtered.length,\n          totalLng / filtered.length\n        ];\n        \n        console.log(`Map center set to: [${mapCenter.current[0]}, ${mapCenter.current[1]}]`);\n      }\n      \n      setUsersWithLocation(filtered);\n    } else {\n      console.warn('liveUsers is not valid array:', liveUsers);\n      setUsersWithLocation([]);\n    }\n  }, [liveUsers]);\n\n  // Effect to process path data\n  useEffect(() => {\n    if (livePaths) {\n      console.log(`Processing ${livePaths.length} paths`);\n      const parsed = livePaths.map(path => ({\n        ...path,\n        parsedRoute: parseRouteData(path.route)\n      })).filter(path => {\n        const isValid = path.parsedRoute && path.parsedRoute.length > 0;\n        if (!isValid) {\n          console.log(`Path ${path.id} has invalid route data`);\n        }\n        return isValid;\n      });\n      \n      console.log(`Found ${parsed.length} paths with valid route data`);\n      setPathsWithCoordinates(parsed);\n    } else {\n      console.log('No live paths data available');\n      setPathsWithCoordinates([]);\n    }\n  }, [livePaths]);\n\n  const toggleRouteMode = () => {\n    setRouteMode(!routeMode);\n    if (routeMode) {\n      // If turning off, clear selected source\n      setSelectedSource(null);\n    }\n  };\n\n  const handleCreatePath = (source, destination) => {\n    createPath(source, destination);\n    setRouteMode(false);\n    setSelectedSource(null);\n  };\n\n  const handleToggleIntersectionFilter = () => {\n    toggleIntersectionFilter();\n  };\n\n  const formatTime = (date) => {\n    if (!(date instanceof Date)) {\n      try {\n        date = new Date(date);\n      } catch (e) {\n        return 'Unknown';\n      }\n    }\n    return date.toLocaleTimeString();\n  };\n\n  // Calculate center point for map display or use a default\n  let centerLat = 0, centerLng = 0;\n  \n  if (usersWithLocation.length > 0) {\n    centerLat = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.latitude || 0), 0) / usersWithLocation.length;\n    centerLng = usersWithLocation.reduce((sum, u) => sum + parseFloat(u.longitude || 0), 0) / usersWithLocation.length;\n  } else {\n    // Default to a central location if no users\n    centerLat = 37.7749; // San Francisco as a default\n    centerLng = -122.4194;\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div className=\"map-header\">\n        <h3>Live User Map</h3>\n        <div className=\"map-controls\">\n          <div className=\"notification-controls\">\n            <NotificationButton \n              notificationCount={notifications ? notifications.length : 0}\n              onClick={toggleNotifications}\n            />\n            \n            {/* Manual refresh button */}\n            <button \n              className=\"refresh-button\"\n              onClick={handleRefresh}\n              title=\"Refresh map data\"\n            >\n              <FontAwesomeIcon icon={faSync} />\n            </button>\n            \n            {/* Filter button */}\n            <button\n              className={`filter-button ${showIntersectingOnly ? 'active' : ''}`}\n              onClick={handleToggleIntersectionFilter}\n              title=\"Show only paths that intersect with your route\"\n            >\n              {showIntersectingOnly ? 'Show All Paths' : 'Show Intersecting Only'}\n            </button>\n          </div>\n          \n          <button \n            className={`route-button ${routeMode ? 'active' : ''}`} \n            onClick={toggleRouteMode}\n          >\n            {routeMode ? 'Cancel Route' : 'Create Route'}\n          </button>\n          \n          {routeMode && !selectedSource && (\n            <div className=\"route-instructions\">Click on map to set starting point</div>\n          )}\n          \n          {routeMode && selectedSource && (\n            <div className=\"route-instructions\">Click on map to set destination</div>\n          )}\n          \n          <span className=\"last-updated\">\n            Last updated: {formatTime(lastUpdated)}\n          </span>\n        </div>\n      </div>\n      \n      {/* Show notifications panel when toggled */}\n      {showNotifications && (\n        <NotificationsPanel onClose={() => setShowNotifications(false)} />\n      )}\n      \n      {/* Intersection filter info message */}\n      {showIntersectingOnly && (\n        <div className=\"intersection-filter-info\">\n          <i className=\"fas fa-info-circle\"></i> \n          Showing only paths that intersect with your route. \n          {pathsWithCoordinates.length === 0 && (\n            <span className=\"no-intersections\"> No intersecting paths found.</span>\n          )}\n        </div>\n      )}\n      \n      <MapContainer \n        center={[centerLat || 37.7749, centerLng || -122.4194]} \n        zoom={4} \n        style={{ height: '600px', width: '100%' }}\n        ref={mapRef}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        {/* Map click handler for route creation */}\n        <MapClickHandler \n          routeMode={routeMode} \n          selectedSource={selectedSource} \n          setSelectedSource={setSelectedSource} \n          createPath={handleCreatePath}\n        />\n        \n        {/* Display user markers with better error handling */}\n        {usersWithLocation && usersWithLocation.length > 0 ? (\n          usersWithLocation.map(u => {\n            try {\n              // Ensure coordinates are valid numbers\n              const lat = parseFloat(u.latitude);\n              const lng = parseFloat(u.longitude);\n              \n              // Skip invalid coordinates\n              if (isNaN(lat) || isNaN(lng) || Math.abs(lat) > 90 || Math.abs(lng) > 180) {\n                console.warn(`Invalid coordinates for user ${u.username}: [${u.latitude}, ${u.longitude}]`);\n                return null;\n              }\n              \n              console.log(`Rendering marker for ${u.username} at [${lat}, ${lng}]`);\n              \n              // Use default icon for more reliability\n              const markerIcon = u.id === user?.id ? \n                createCustomIcon('#4285F4') : createCustomIcon('#FF5722');\n              \n              return (\n                <Marker \n                  key={`user-${u.id}`} \n                  position={[lat, lng]}\n                  icon={markerIcon}\n                >\n                  <Popup>\n                    <div className=\"user-popup\">\n                      <h3>{u.username}</h3>\n                      <div className=\"user-status\">\n                        <span className=\"status-dot\"></span>\n                        Online\n                      </div>\n                      <div className=\"user-location\">\n                        Coordinates: {lat.toFixed(4)}, {lng.toFixed(4)}\n                      </div>\n                      <div className=\"user-last-active\">\n                        Last active: {formatTime(u.last_active)}\n                      </div>\n                      {u.id === user?.id ? (\n                        <div className=\"current-user-tag\">This is you</div>\n                      ) : (\n                        <div className=\"chat-button-container\">\n                          <button \n                            className=\"chat-request-button\"\n                            onClick={() => handleChatRequest(u.id)}\n                          >\n                            Chat with {u.username}\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  </Popup>\n                </Marker>\n              );\n            } catch (error) {\n              console.error(`Error rendering marker for user ${u.username}:`, error);\n              return null;\n            }\n          })\n        ) : null}\n\n        {/* Display route source marker if in route mode */}\n        {routeMode && selectedSource && (\n          <Marker \n            position={[selectedSource.lat, selectedSource.lng]}\n            icon={createCustomIcon('#00C853')}\n          >\n            <Popup>Starting point</Popup>\n          </Marker>\n        )}\n        \n        {/* Display paths as polylines */}\n        {pathsWithCoordinates.map((path, idx) => (\n          <Polyline \n            key={`path-${path.id || idx}`} \n            positions={path.parsedRoute} \n            // Use a special color for intersecting paths\n            color={path.user_id === user?.id ? '#2196F3' : (path.intersects_with_user ? '#4CAF50' : '#FF5722')} \n            weight={4}\n            opacity={0.7}\n          >\n            <Popup>\n              <div className=\"path-popup\">\n                <h4>Route Information</h4>\n                <p><strong>User:</strong> {path.username || 'Unknown'}</p>\n                <p><strong>Created:</strong> {formatTime(path.created_at)}</p>\n                {path.intersects_with_user && (\n                  <p className=\"intersecting-path-notice\">This path intersects with your route!</p>\n                )}\n                {path.parsedRoute.length > 0 && (\n                  <>\n                    <p><strong>From:</strong> {path.parsedRoute[0][0].toFixed(4)}, {path.parsedRoute[0][1].toFixed(4)}</p>\n                    <p><strong>To:</strong> {path.parsedRoute[path.parsedRoute.length-1][0].toFixed(4)}, {path.parsedRoute[path.parsedRoute.length-1][1].toFixed(4)}</p>\n                    <p><strong>Points:</strong> {path.parsedRoute.length}</p>\n                  </>\n                )}\n              </div>\n            </Popup>\n          </Polyline>\n        ))}\n\n        {/* Map bounds updater component */}\n        <MapBoundsUpdater \n          users={usersWithLocation} \n          paths={pathsWithCoordinates} \n        />\n      </MapContainer>\n      \n      <div className=\"map-legend\">\n        <h4>Map Legend</h4>\n        <div className=\"legend-items\">\n          <div className=\"legend-item\">\n            <div className=\"legend-marker\" style={{ backgroundColor: '#4285F4' }}></div>\n            <span>Your location</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-marker\" style={{ backgroundColor: '#FF5722' }}></div>\n            <span>Other users</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#2196F3' }}></div>\n            <span>Your path</span>\n          </div>\n          {/* New legend item for intersecting paths */}\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#4CAF50' }}></div>\n            <span>Intersecting paths</span>\n          </div>\n          <div className=\"legend-item\">\n            <div className=\"legend-line\" style={{ backgroundColor: '#FF5722' }}></div>\n            <span>Other users' paths</span>\n          </div>\n          {routeMode && (\n            <div className=\"legend-item\">\n              <div className=\"legend-marker\" style={{ backgroundColor: '#00C853' }}></div>\n              <span>Selected starting point</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Display path information and active chats panel */}\n      <div className=\"map-info-panel\">\n        <h4>Statistics</h4>\n        <div className=\"map-stats\">\n          <div className=\"stat-item\">\n            <strong>Active Users:</strong> {usersWithLocation.length}\n          </div>\n          <div className=\"stat-item\">\n            <strong>Active Paths:</strong> {pathsWithCoordinates.length}\n          </div>\n          <div className=\"stat-item\">\n            <strong>Last Updated:</strong> {formatTime(lastUpdated)}\n          </div>\n          {showIntersectingOnly && (\n            <div className=\"stat-item\">\n              <strong>Filter:</strong> Showing intersecting paths only\n            </div>\n          )}\n        </div>\n        \n        {/* Active Chats Panel */}\n        <div className=\"active-chats\">\n          <h4>\n            <FontAwesomeIcon icon={faComments} /> Active Chats\n          </h4>\n          <div className=\"chats-list\">\n            {activeChats && activeChats.length > 0 ? (\n              activeChats.map(chat => (\n                <div \n                  key={chat.id} \n                  className=\"chat-item\"\n                  onClick={() => openChat(chat.id)}\n                >\n                  <div className=\"chat-user\">\n                    {chat.otherParticipants && chat.otherParticipants.length > 0 \n                      ? chat.otherParticipants[0].username \n                      : 'Unknown User'}\n                  </div>\n                  {chat.unreadCount > 0 && (\n                    <span className=\"unread-badge\">{chat.unreadCount}</span>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"no-chats\">No active chats</div>\n            )}\n          </div>\n        </div>\n        \n        {pathsWithCoordinates.length > 0 && (\n          <div className=\"recent-paths\">\n            <h4>Recent Paths</h4>\n            <div className=\"paths-list\">\n              {pathsWithCoordinates.slice(0, 5).map((path, idx) => (\n                <div key={idx} className={`path-item ${path.intersects_with_user ? 'intersecting' : ''}`}>\n                  <div className=\"path-header\">\n                    <strong>{path.username || 'Unknown user'}</strong>\n                    <span>{formatTime(path.created_at)}</span>\n                  </div>\n                  <div className=\"path-details\">\n                    {path.intersects_with_user && (\n                      <div className=\"intersect-badge\">Intersects with your route</div>\n                    )}\n                    {path.parsedRoute.length > 0 && (\n                      <>\n                        <small>\n                          From: {path.parsedRoute[0][0].toFixed(4)}, {path.parsedRoute[0][1].toFixed(4)}\n                        </small>\n                        <small>\n                          To: {path.parsedRoute[path.parsedRoute.length-1][0].toFixed(4)}, {path.parsedRoute[path.parsedRoute.length-1][1].toFixed(4)}\n                        </small>\n                        <small>\n                          Route Points: {path.parsedRoute.length}\n                        </small>\n                      </>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Chat dialog */}\n      {currentChat && <ChatDialog />}\n    </div>\n  );\n};\n\nexport default UserLocationMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}