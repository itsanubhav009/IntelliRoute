{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useRef } from 'react';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userSession, setUserSession] = useState(null);\n  const locationIntervalRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const response = await api.get('/auth/profile');\n          setUser(response.data);\n          if (response.data.session) {\n            setUserSession(response.data.session);\n          }\n\n          // Start tracking location and heartbeat\n          startTracking();\n        }\n      } catch (error) {\n        // Token might be expired or invalid\n        localStorage.removeItem('token');\n        setUser(null);\n        setUserSession(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n\n    // Cleanup function to handle component unmount\n    return () => {\n      stopTracking();\n    };\n  }, []);\n\n  // Start tracking user's location and heartbeat\n  const startTracking = () => {\n    // Clear any existing intervals\n    stopTracking();\n\n    // Start location tracking if geolocation is available\n    if (navigator.geolocation) {\n      // Update location immediately\n      updateCurrentLocation();\n\n      // Set user as online\n      updateOnlineStatus(true);\n\n      // Then update location every 60 seconds\n      locationIntervalRef.current = setInterval(() => {\n        updateCurrentLocation();\n      }, 60000); // 60 seconds\n\n      // Set heartbeat interval (every 30 seconds)\n      heartbeatIntervalRef.current = setInterval(() => {\n        sendHeartbeat();\n      }, 30000); // 30 seconds\n    }\n  };\n\n  // Stop tracking user's location and heartbeat\n  const stopTracking = () => {\n    if (locationIntervalRef.current) {\n      clearInterval(locationIntervalRef.current);\n      locationIntervalRef.current = null;\n    }\n    if (heartbeatIntervalRef.current) {\n      clearInterval(heartbeatIntervalRef.current);\n      heartbeatIntervalRef.current = null;\n    }\n  };\n\n  // Send a heartbeat to keep the session active\n  const sendHeartbeat = async () => {\n    try {\n      const response = await api.post('/location/status', {\n        isOnline: true\n      });\n      setUserSession(response.data);\n    } catch (error) {\n      console.error('Error sending heartbeat:', error);\n    }\n  };\n\n  // Update the current location\n  const updateCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      try {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const response = await api.post('/location/update', {\n          latitude,\n          longitude\n        });\n        setUserSession(response.data);\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    }, error => {\n      console.error('Geolocation error:', error);\n    });\n  };\n\n  // Update online status\n  const updateOnlineStatus = async isOnline => {\n    try {\n      const response = await api.post('/location/status', {\n        isOnline\n      });\n      setUserSession(response.data);\n    } catch (error) {\n      console.error('Error updating online status:', error);\n    }\n  };\n\n  // Register user\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/register', userData);\n      localStorage.setItem('token', response.data.token);\n      setUser(response.data);\n\n      // Get the initial session\n      await fetchSession();\n\n      // Start tracking location and heartbeat\n      startTracking();\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/login', userData);\n      localStorage.setItem('token', response.data.token);\n      setUser(response.data);\n\n      // Get the initial session\n      await fetchSession();\n\n      // Start tracking location and heartbeat\n      startTracking();\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch current session\n  const fetchSession = async () => {\n    try {\n      const response = await api.get('/location/session');\n      setUserSession(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching session:', error);\n      return null;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      // Stop tracking\n      stopTracking();\n\n      // Call logout API\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      setUser(null);\n      setUserSession(null);\n    } catch (error) {\n      console.error('Error during logout:', error);\n      // Still remove token and user state even if the API call fails\n      localStorage.removeItem('token');\n      setUser(null);\n      setUserSession(null);\n    }\n  };\n\n  // Handle window beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (user) {\n        // Use synchronous API call to ensure it completes before unload\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${api.defaults.baseURL}/location/status`, false);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.setRequestHeader('Authorization', `Bearer ${localStorage.getItem('token')}`);\n        xhr.send(JSON.stringify({\n          isOnline: false\n        }));\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated: !!user,\n      user,\n      userSession,\n      loading,\n      error,\n      register,\n      login,\n      logout,\n      updateCurrentLocation,\n      sendHeartbeat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"0yMq5gHb8Lt8jbC3CJhL4OcCGxc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useRef","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","userSession","setUserSession","locationIntervalRef","heartbeatIntervalRef","checkLoggedIn","token","localStorage","getItem","response","get","data","session","startTracking","removeItem","stopTracking","navigator","geolocation","updateCurrentLocation","updateOnlineStatus","current","setInterval","sendHeartbeat","clearInterval","post","isOnline","console","getCurrentPosition","position","latitude","longitude","coords","register","userData","setItem","fetchSession","_error$response","_error$response$data","message","login","_error$response2","_error$response2$data","logout","handleBeforeUnload","xhr","XMLHttpRequest","open","defaults","baseURL","setRequestHeader","send","JSON","stringify","window","addEventListener","removeEventListener","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useRef } from 'react';\nimport api from '../utils/api';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userSession, setUserSession] = useState(null);\n  const locationIntervalRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        \n        if (token) {\n          const response = await api.get('/auth/profile');\n          setUser(response.data);\n          if (response.data.session) {\n            setUserSession(response.data.session);\n          }\n          \n          // Start tracking location and heartbeat\n          startTracking();\n        }\n      } catch (error) {\n        // Token might be expired or invalid\n        localStorage.removeItem('token');\n        setUser(null);\n        setUserSession(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkLoggedIn();\n    \n    // Cleanup function to handle component unmount\n    return () => {\n      stopTracking();\n    };\n  }, []);\n  \n  // Start tracking user's location and heartbeat\n  const startTracking = () => {\n    // Clear any existing intervals\n    stopTracking();\n    \n    // Start location tracking if geolocation is available\n    if (navigator.geolocation) {\n      // Update location immediately\n      updateCurrentLocation();\n      \n      // Set user as online\n      updateOnlineStatus(true);\n      \n      // Then update location every 60 seconds\n      locationIntervalRef.current = setInterval(() => {\n        updateCurrentLocation();\n      }, 60000); // 60 seconds\n      \n      // Set heartbeat interval (every 30 seconds)\n      heartbeatIntervalRef.current = setInterval(() => {\n        sendHeartbeat();\n      }, 30000); // 30 seconds\n    }\n  };\n  \n  // Stop tracking user's location and heartbeat\n  const stopTracking = () => {\n    if (locationIntervalRef.current) {\n      clearInterval(locationIntervalRef.current);\n      locationIntervalRef.current = null;\n    }\n    \n    if (heartbeatIntervalRef.current) {\n      clearInterval(heartbeatIntervalRef.current);\n      heartbeatIntervalRef.current = null;\n    }\n  };\n  \n  // Send a heartbeat to keep the session active\n  const sendHeartbeat = async () => {\n    try {\n      const response = await api.post('/location/status', { isOnline: true });\n      setUserSession(response.data);\n    } catch (error) {\n      console.error('Error sending heartbeat:', error);\n    }\n  };\n  \n  // Update the current location\n  const updateCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          \n          const response = await api.post('/location/update', {\n            latitude,\n            longitude\n          });\n          \n          setUserSession(response.data);\n        } catch (error) {\n          console.error('Error updating location:', error);\n        }\n      },\n      (error) => {\n        console.error('Geolocation error:', error);\n      }\n    );\n  };\n  \n  // Update online status\n  const updateOnlineStatus = async (isOnline) => {\n    try {\n      const response = await api.post('/location/status', { isOnline });\n      setUserSession(response.data);\n    } catch (error) {\n      console.error('Error updating online status:', error);\n    }\n  };\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await api.post('/auth/register', userData);\n      localStorage.setItem('token', response.data.token);\n      setUser(response.data);\n      \n      // Get the initial session\n      await fetchSession();\n      \n      // Start tracking location and heartbeat\n      startTracking();\n      \n      return response.data;\n    } catch (error) {\n      setError(error.response?.data?.message || 'Registration failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await api.post('/auth/login', userData);\n      localStorage.setItem('token', response.data.token);\n      setUser(response.data);\n      \n      // Get the initial session\n      await fetchSession();\n      \n      // Start tracking location and heartbeat\n      startTracking();\n      \n      return response.data;\n    } catch (error) {\n      setError(error.response?.data?.message || 'Login failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch current session\n  const fetchSession = async () => {\n    try {\n      const response = await api.get('/location/session');\n      setUserSession(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching session:', error);\n      return null;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      // Stop tracking\n      stopTracking();\n      \n      // Call logout API\n      await api.post('/auth/logout');\n      \n      localStorage.removeItem('token');\n      setUser(null);\n      setUserSession(null);\n    } catch (error) {\n      console.error('Error during logout:', error);\n      // Still remove token and user state even if the API call fails\n      localStorage.removeItem('token');\n      setUser(null);\n      setUserSession(null);\n    }\n  };\n\n  // Handle window beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (user) {\n        // Use synchronous API call to ensure it completes before unload\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', `${api.defaults.baseURL}/location/status`, false);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.setRequestHeader('Authorization', `Bearer ${localStorage.getItem('token')}`);\n        xhr.send(JSON.stringify({ isOnline: false }));\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [user]);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated: !!user,\n        user,\n        userSession,\n        loading,\n        error,\n        register,\n        login,\n        logout,\n        updateCurrentLocation,\n        sendHeartbeat\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}