{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [chatStatus, setChatStatus] = useState(null);\n\n  // Add these to track last request times\n  const lastRequest = useRef({\n    chat: 0,\n    notifications: 0,\n    messages: 0\n  });\n\n  // Add this to prevent concurrent requests\n  const pendingRequests = useRef({\n    chat: false,\n    notifications: false,\n    messages: false\n  });\n\n  // Enforce API delay function\n  const enforceApiDelay = useCallback(async (requestType, minDelay = 2000) => {\n    if (pendingRequests.current[requestType]) {\n      console.log(`${requestType} request already in progress, skipping`);\n      return false;\n    }\n    const now = Date.now();\n    if (now - lastRequest.current[requestType] < minDelay) {\n      console.log(`Throttling ${requestType} request, too soon`);\n      return false;\n    }\n    pendingRequests.current[requestType] = true;\n    lastRequest.current[requestType] = now;\n    return true;\n  }, []);\n\n  // Throttled fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n    if (pendingRequests.current.notifications) {\n      return notifications;\n    }\n    const now = Date.now();\n    if (!force && now - lastRequest.current.notifications < 10000) {\n      return notifications;\n    }\n    try {\n      pendingRequests.current.notifications = true;\n      const response = await api.get('/chat/notifications');\n      lastRequest.current.notifications = now;\n      const newNotifications = response.data.notifications || [];\n      if (JSON.stringify(newNotifications) !== JSON.stringify(notifications)) {\n        setNotifications(newNotifications);\n      }\n      return newNotifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Throttled fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n    if (pendingRequests.current.chat) {\n      return activeChats;\n    }\n    const now = Date.now();\n    if (!force && now - lastRequest.current.chat < 10000) {\n      return activeChats;\n    }\n    try {\n      pendingRequests.current.chat = true;\n      setLoading(true);\n      const response = await api.get('/chat/active');\n      lastRequest.current.chat = now;\n      const newChats = response.data.chats || [];\n      if (JSON.stringify(newChats) !== JSON.stringify(activeChats)) {\n        setActiveChats(newChats);\n      }\n      return newChats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chat = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async recipientId => {\n    if (!user || !recipientId) return;\n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'sending',\n        message: 'Sending chat request...'\n      });\n      const response = await api.post('/chat/request', {\n        recipientId\n      });\n      await fetchActiveChats(true);\n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      setChatStatus({\n        type: 'success',\n        message: 'Chat request sent successfully! Waiting for acceptance.'\n      });\n      setTimeout(() => setChatStatus(null), 3000);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending chat request:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to send chat request: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message)\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request with enhanced error handling\n  // Replace the acceptChatRequest function in your ChatContext.js file with this improved version\n\n  // Accept a chat request with enhanced error handling\n  const acceptChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) {\n      console.error('Cannot accept chat: missing user or chatRoomId');\n      return {\n        success: false,\n        error: 'Missing required data'\n      };\n    }\n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'accepting',\n        message: 'Accepting chat request...'\n      });\n      console.log(`[${new Date().toISOString()}] User ${user.username || 'itsanubhav009'} is accepting chat request ${chatRoomId}`);\n\n      // Make the API call to accept the chat request\n      const response = await api.post('/chat/accept', {\n        chatRoomId\n      });\n      console.log('Accept response from server:', response.data);\n\n      // Force refresh notifications to remove the accepted notification\n      await fetchNotifications(true);\n\n      // Fetch active chats to get the updated chat list\n      const updatedChats = await fetchActiveChats(true);\n      console.log('Updated chats after acceptance:', updatedChats);\n\n      // Find the accepted chat in the updated list\n      const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n      if (acceptedChat) {\n        console.log('Found accepted chat:', acceptedChat);\n\n        // Set as current chat\n        setCurrentChat(acceptedChat);\n\n        // Try to fetch messages\n        try {\n          await fetchMessages(chatRoomId);\n        } catch (msgError) {\n          console.warn('Could not fetch messages yet, will retry:', msgError);\n        }\n        setChatStatus({\n          type: 'success',\n          message: 'Chat request accepted successfully!'\n        });\n\n        // Clear status after a delay\n        setTimeout(() => {\n          setChatStatus(null);\n        }, 3000);\n        return {\n          success: true,\n          chat: acceptedChat\n        };\n      } else {\n        console.warn('Accepted chat not found in active chats list. Will retry...');\n\n        // Update status\n        setChatStatus({\n          type: 'waiting',\n          message: 'Chat accepted. Looking for the chat room...'\n        });\n\n        // Retry after a short delay\n        return new Promise(resolve => {\n          setTimeout(async () => {\n            try {\n              // Retry fetching active chats\n              const retryChats = await fetchActiveChats(true);\n              console.log('Retry fetching chats:', retryChats);\n              const retryChat = retryChats.find(c => c.id === chatRoomId);\n              if (retryChat) {\n                console.log('Found chat on retry:', retryChat);\n                setCurrentChat(retryChat);\n                try {\n                  await fetchMessages(chatRoomId);\n                } catch (retryMsgError) {\n                  console.warn('Could not fetch messages on retry:', retryMsgError);\n                }\n                setChatStatus({\n                  type: 'success',\n                  message: 'Chat request accepted successfully!'\n                });\n                setTimeout(() => {\n                  setChatStatus(null);\n                }, 3000);\n                resolve({\n                  success: true,\n                  chat: retryChat\n                });\n              } else {\n                console.error('Chat still not found after retry');\n                setChatStatus({\n                  type: 'error',\n                  message: 'Could not find the chat room after accepting. Please try again.'\n                });\n                setTimeout(() => {\n                  setChatStatus(null);\n                }, 5000);\n                resolve({\n                  success: false,\n                  error: 'Chat room not found after acceptance'\n                });\n              }\n            } catch (retryError) {\n              console.error('Error during retry:', retryError);\n              setChatStatus({\n                type: 'error',\n                message: 'Failed to open chat after accepting: ' + (retryError.message || 'Unknown error')\n              });\n              setTimeout(() => {\n                setChatStatus(null);\n              }, 5000);\n              resolve({\n                success: false,\n                error: retryError.message || 'Failed to find chat after accepting'\n              });\n            }\n          }, 2000);\n        });\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error accepting chat request:', error);\n\n      // Set error status\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to accept chat request: ' + (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Unknown error')\n      });\n\n      // Clear status after a delay\n      setTimeout(() => {\n        setChatStatus(null);\n      }, 5000);\n      setError('Failed to accept chat request: ' + (error.message || 'Unknown error'));\n      return {\n        success: false,\n        error: error.message || 'Unknown error'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Decline a chat request\n  const declineChatRequest = async chatRoomId => {\n    if (!user || !chatRoomId) return;\n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'declining',\n        message: 'Declining chat request...'\n      });\n      await api.post('/chat/decline', {\n        chatRoomId\n      });\n      await fetchNotifications(true);\n      setChatStatus({\n        type: 'success',\n        message: 'Chat request declined'\n      });\n      setTimeout(() => setChatStatus(null), 3000);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to decline chat request: ' + (error.message || 'Unknown error')\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    try {\n      const response = await api.post('/chat/send', {\n        chatRoomId,\n        message\n      });\n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [...prev, {\n        ...newMessage,\n        profiles: {\n          username: user.username\n        }\n      }]);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data, _error$response4$data2;\n      console.error('Error sending message:', error);\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 403 && (_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && (_error$response4$data2 = _error$response4$data.message) !== null && _error$response4$data2 !== void 0 && _error$response4$data2.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'Waiting for recipient to accept your chat request...'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n      } else {\n        setError('Failed to send message: ' + error.message);\n      }\n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = useCallback(async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages;\n    }\n    try {\n      setLoading(true);\n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      if (response.data.messages) {\n        setMessages(response.data.messages);\n        return response.data.messages;\n      } else {\n        setMessages([]);\n        return [];\n      }\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response6$data, _error$response6$data2;\n      console.error('Error fetching messages:', error);\n      if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 403 && (_error$response6 = error.response) !== null && _error$response6 !== void 0 && (_error$response6$data = _error$response6.data) !== null && _error$response6$data !== void 0 && (_error$response6$data2 = _error$response6$data.message) !== null && _error$response6$data2 !== void 0 && _error$response6$data2.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'This chat room is not active yet. Waiting for acceptance...'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n        setMessages([]);\n      } else {\n        setError('Failed to fetch messages: ' + error.message);\n        setMessages([]);\n      }\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  }, [user, messages, currentChat, enforceApiDelay]);\n\n  // Open a chat with improved error handling for inactive chats\n  const openChat = useCallback(async chatRoomId => {\n    try {\n      setLoading(true);\n      let chat = activeChats.find(c => c.id === chatRoomId);\n      if (!chat) {\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      if (chat) {\n        // Check if the chat is active\n        if (!chat.isActive) {\n          // If the chat is not active, check if user has joined\n          if (chat.hasJoined) {\n            // If the user has joined, they're waiting for the other person\n            setChatStatus({\n              type: 'waiting',\n              message: 'Waiting for the other person to accept your chat request...'\n            });\n            setCurrentChat(chat);\n            setMessages([]);\n            setTimeout(() => setChatStatus(null), 5000);\n            return {\n              success: true,\n              chat,\n              status: 'waiting'\n            };\n          } else {\n            // If the user hasn't joined, they need to accept the request first\n            setChatStatus({\n              type: 'pending',\n              message: 'You need to accept this chat request first'\n            });\n            await acceptChatRequest(chatRoomId);\n            return {\n              success: true,\n              chat,\n              status: 'accepted'\n            };\n          }\n        } else {\n          // Chat is active, proceed normally\n          setCurrentChat(chat);\n          await fetchMessages(chatRoomId);\n          return {\n            success: true,\n            chat,\n            status: 'active'\n          };\n        }\n      } else {\n        setChatStatus({\n          type: 'error',\n          message: 'Chat room not found'\n        });\n        setTimeout(() => setChatStatus(null), 5000);\n        return {\n          success: false,\n          error: 'Chat not found'\n        };\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to open chat: ' + error.message\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChats, fetchActiveChats, fetchMessages, acceptChatRequest]);\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n\n  // Handle notification click\n  const handleNotificationClick = useCallback(async notification => {\n    if (!notification) return;\n    try {\n      // Mark notification as read\n      await api.post('/chat/markNotificationRead', {\n        notificationId: notification.id\n      });\n\n      // If it's a chat request, open the chat (which will handle acceptance if needed)\n      if (notification.type === 'chat_request' || notification.type === 'chat_accepted' || notification.type === 'new_message') {\n        await openChat(notification.chat_room_id);\n      }\n\n      // Refresh notifications to remove the read one\n      await fetchNotifications(true);\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to process notification: ' + error.message\n      });\n      setTimeout(() => setChatStatus(null), 5000);\n    }\n  }, [openChat, fetchNotifications]);\n\n  // Check for pending chat requests on mount\n  useEffect(() => {\n    if (user) {\n      // Initial load\n      fetchNotifications(true);\n      fetchActiveChats(true);\n\n      // Check for pending chat requests\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.isActive) {\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n\n      // Set up polling interval\n      const intervalId = setInterval(() => {\n        fetchNotifications();\n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        } else {\n          fetchActiveChats();\n        }\n      }, 10000);\n      return () => clearInterval(intervalId);\n    }\n  }, [user, currentChat, fetchNotifications, fetchActiveChats, fetchMessages, openChat]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      activeChats,\n      notifications,\n      currentChat,\n      messages,\n      loading,\n      error,\n      chatStatus,\n      sendChatRequest,\n      acceptChatRequest,\n      declineChatRequest,\n      sendMessage,\n      fetchMessages,\n      openChat,\n      closeChat,\n      fetchActiveChats,\n      fetchNotifications,\n      handleNotificationClick\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 587,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"onV7/gASV2Be2yu/DPls9eWSR0A=\");\n_c = ChatProvider;\nexport default ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","useRef","api","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","activeChats","setActiveChats","notifications","setNotifications","currentChat","setCurrentChat","messages","setMessages","loading","setLoading","error","setError","chatStatus","setChatStatus","lastRequest","chat","pendingRequests","enforceApiDelay","requestType","minDelay","current","console","log","now","Date","fetchNotifications","force","response","get","newNotifications","data","JSON","stringify","fetchActiveChats","newChats","chats","sendChatRequest","recipientId","type","message","post","localStorage","setItem","chatRoomId","setTimeout","_error$response","_error$response$data","acceptChatRequest","success","toISOString","username","updatedChats","acceptedChat","find","c","id","fetchMessages","msgError","warn","Promise","resolve","retryChats","retryChat","retryMsgError","retryError","_error$response2","_error$response2$data","declineChatRequest","sendMessage","newMessage","chatMessage","prev","profiles","_error$response3","_error$response4","_error$response4$data","_error$response4$data2","status","includes","_error$response5","_error$response6","_error$response6$data","_error$response6$data2","openChat","isActive","hasJoined","closeChat","handleNotificationClick","notification","notificationId","chat_room_id","pendingChatId","getItem","then","pendingChat","removeItem","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [activeChats, setActiveChats] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [chatStatus, setChatStatus] = useState(null);\n  \n  // Add these to track last request times\n  const lastRequest = useRef({\n    chat: 0,\n    notifications: 0,\n    messages: 0\n  });\n  \n  // Add this to prevent concurrent requests\n  const pendingRequests = useRef({\n    chat: false,\n    notifications: false,\n    messages: false\n  });\n\n  // Enforce API delay function\n  const enforceApiDelay = useCallback(async (requestType, minDelay = 2000) => {\n    if (pendingRequests.current[requestType]) {\n      console.log(`${requestType} request already in progress, skipping`);\n      return false;\n    }\n    \n    const now = Date.now();\n    if (now - lastRequest.current[requestType] < minDelay) {\n      console.log(`Throttling ${requestType} request, too soon`);\n      return false;\n    }\n    \n    pendingRequests.current[requestType] = true;\n    lastRequest.current[requestType] = now;\n    return true;\n  }, []);\n\n  // Throttled fetch notifications\n  const fetchNotifications = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    if (pendingRequests.current.notifications) {\n      return notifications;\n    }\n    \n    const now = Date.now();\n    if (!force && now - lastRequest.current.notifications < 10000) {\n      return notifications;\n    }\n    \n    try {\n      pendingRequests.current.notifications = true;\n      const response = await api.get('/chat/notifications');\n      lastRequest.current.notifications = now;\n      \n      const newNotifications = response.data.notifications || [];\n      if (JSON.stringify(newNotifications) !== JSON.stringify(notifications)) {\n        setNotifications(newNotifications);\n      }\n      \n      return newNotifications;\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    } finally {\n      pendingRequests.current.notifications = false;\n    }\n  }, [user, notifications]);\n\n  // Throttled fetch active chats\n  const fetchActiveChats = useCallback(async (force = false) => {\n    if (!user) return [];\n    \n    if (pendingRequests.current.chat) {\n      return activeChats;\n    }\n    \n    const now = Date.now();\n    if (!force && now - lastRequest.current.chat < 10000) {\n      return activeChats;\n    }\n    \n    try {\n      pendingRequests.current.chat = true;\n      setLoading(true);\n      \n      const response = await api.get('/chat/active');\n      lastRequest.current.chat = now;\n      \n      const newChats = response.data.chats || [];\n      \n      if (JSON.stringify(newChats) !== JSON.stringify(activeChats)) {\n        setActiveChats(newChats);\n      }\n      \n      return newChats;\n    } catch (error) {\n      console.error('Error fetching active chats:', error);\n      setError('Failed to fetch active chats');\n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.chat = false;\n    }\n  }, [user, activeChats]);\n\n  // Send a chat request to another user\n  const sendChatRequest = async (recipientId) => {\n    if (!user || !recipientId) return;\n    \n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'sending',\n        message: 'Sending chat request...'\n      });\n      \n      const response = await api.post('/chat/request', { recipientId });\n      \n      await fetchActiveChats(true);\n      \n      localStorage.setItem('pendingChatRequest', response.data.chatRoomId);\n      \n      setChatStatus({\n        type: 'success',\n        message: 'Chat request sent successfully! Waiting for acceptance.'\n      });\n      \n      setTimeout(() => setChatStatus(null), 3000);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending chat request:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to send chat request: ' + (error.response?.data?.message || error.message)\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Accept a chat request with enhanced error handling\n // Replace the acceptChatRequest function in your ChatContext.js file with this improved version\n\n// Accept a chat request with enhanced error handling\nconst acceptChatRequest = async (chatRoomId) => {\n  if (!user || !chatRoomId) {\n    console.error('Cannot accept chat: missing user or chatRoomId');\n    return { success: false, error: 'Missing required data' };\n  }\n  \n  try {\n    setLoading(true);\n    setChatStatus({\n      type: 'accepting',\n      message: 'Accepting chat request...'\n    });\n    \n    console.log(`[${new Date().toISOString()}] User ${user.username || 'itsanubhav009'} is accepting chat request ${chatRoomId}`);\n    \n    // Make the API call to accept the chat request\n    const response = await api.post('/chat/accept', { chatRoomId });\n    console.log('Accept response from server:', response.data);\n    \n    // Force refresh notifications to remove the accepted notification\n    await fetchNotifications(true);\n    \n    // Fetch active chats to get the updated chat list\n    const updatedChats = await fetchActiveChats(true);\n    console.log('Updated chats after acceptance:', updatedChats);\n    \n    // Find the accepted chat in the updated list\n    const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n    \n    if (acceptedChat) {\n      console.log('Found accepted chat:', acceptedChat);\n      \n      // Set as current chat\n      setCurrentChat(acceptedChat);\n      \n      // Try to fetch messages\n      try {\n        await fetchMessages(chatRoomId);\n      } catch (msgError) {\n        console.warn('Could not fetch messages yet, will retry:', msgError);\n      }\n      \n      setChatStatus({\n        type: 'success',\n        message: 'Chat request accepted successfully!'\n      });\n      \n      // Clear status after a delay\n      setTimeout(() => {\n        setChatStatus(null);\n      }, 3000);\n      \n      return { success: true, chat: acceptedChat };\n    } else {\n      console.warn('Accepted chat not found in active chats list. Will retry...');\n      \n      // Update status\n      setChatStatus({\n        type: 'waiting',\n        message: 'Chat accepted. Looking for the chat room...'\n      });\n      \n      // Retry after a short delay\n      return new Promise((resolve) => {\n        setTimeout(async () => {\n          try {\n            // Retry fetching active chats\n            const retryChats = await fetchActiveChats(true);\n            console.log('Retry fetching chats:', retryChats);\n            \n            const retryChat = retryChats.find(c => c.id === chatRoomId);\n            \n            if (retryChat) {\n              console.log('Found chat on retry:', retryChat);\n              setCurrentChat(retryChat);\n              \n              try {\n                await fetchMessages(chatRoomId);\n              } catch (retryMsgError) {\n                console.warn('Could not fetch messages on retry:', retryMsgError);\n              }\n              \n              setChatStatus({\n                type: 'success',\n                message: 'Chat request accepted successfully!'\n              });\n              \n              setTimeout(() => {\n                setChatStatus(null);\n              }, 3000);\n              \n              resolve({ success: true, chat: retryChat });\n            } else {\n              console.error('Chat still not found after retry');\n              \n              setChatStatus({\n                type: 'error',\n                message: 'Could not find the chat room after accepting. Please try again.'\n              });\n              \n              setTimeout(() => {\n                setChatStatus(null);\n              }, 5000);\n              \n              resolve({\n                success: false,\n                error: 'Chat room not found after acceptance'\n              });\n            }\n          } catch (retryError) {\n            console.error('Error during retry:', retryError);\n            \n            setChatStatus({\n              type: 'error',\n              message: 'Failed to open chat after accepting: ' + (retryError.message || 'Unknown error')\n            });\n            \n            setTimeout(() => {\n              setChatStatus(null);\n            }, 5000);\n            \n            resolve({\n              success: false,\n              error: retryError.message || 'Failed to find chat after accepting'\n            });\n          }\n        }, 2000);\n      });\n    }\n  } catch (error) {\n    console.error('Error accepting chat request:', error);\n    \n    // Set error status\n    setChatStatus({\n      type: 'error',\n      message: 'Failed to accept chat request: ' + (error.response?.data?.message || error.message || 'Unknown error')\n    });\n    \n    // Clear status after a delay\n    setTimeout(() => {\n      setChatStatus(null);\n    }, 5000);\n    \n    setError('Failed to accept chat request: ' + (error.message || 'Unknown error'));\n    return {\n      success: false,\n      error: error.message || 'Unknown error'\n    };\n  } finally {\n    setLoading(false);\n  }\n};\n\n  // Decline a chat request\n  const declineChatRequest = async (chatRoomId) => {\n    if (!user || !chatRoomId) return;\n    \n    try {\n      setLoading(true);\n      setChatStatus({\n        type: 'declining',\n        message: 'Declining chat request...'\n      });\n      \n      await api.post('/chat/decline', { chatRoomId });\n      \n      await fetchNotifications(true);\n      \n      setChatStatus({\n        type: 'success',\n        message: 'Chat request declined'\n      });\n      \n      setTimeout(() => setChatStatus(null), 3000);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error declining chat request:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to decline chat request: ' + (error.message || 'Unknown error')\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message in a chat\n  const sendMessage = async (chatRoomId, message) => {\n    if (!user || !chatRoomId || !message) return;\n    \n    try {\n      const response = await api.post('/chat/send', { chatRoomId, message });\n      \n      const newMessage = response.data.chatMessage;\n      setMessages(prev => [\n        ...prev, \n        {...newMessage, profiles: { username: user.username }}\n      ]);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      if (error.response?.status === 403 && error.response?.data?.message?.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'Waiting for recipient to accept your chat request...'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n      } else {\n        setError('Failed to send message: ' + error.message);\n      }\n      \n      throw error;\n    }\n  };\n\n  // Fetch messages for a chat\n  const fetchMessages = useCallback(async (chatRoomId, force = false) => {\n    if (!user || !chatRoomId) return;\n    \n    if (currentChat && !force && !(await enforceApiDelay('messages'))) {\n      return messages;\n    }\n    \n    try {\n      setLoading(true);\n      \n      const response = await api.get(`/chat/messages/${chatRoomId}`);\n      \n      if (response.data.messages) {\n        setMessages(response.data.messages);\n        return response.data.messages;\n      } else {\n        setMessages([]);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      \n      if (error.response?.status === 403 && error.response?.data?.message?.includes('not active')) {\n        setChatStatus({\n          type: 'waiting',\n          message: 'This chat room is not active yet. Waiting for acceptance...'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n        setMessages([]);\n      } else {\n        setError('Failed to fetch messages: ' + error.message);\n        setMessages([]);\n      }\n      \n      return [];\n    } finally {\n      setLoading(false);\n      pendingRequests.current.messages = false;\n    }\n  }, [user, messages, currentChat, enforceApiDelay]);\n\n  // Open a chat with improved error handling for inactive chats\n  const openChat = useCallback(async (chatRoomId) => {\n    try {\n      setLoading(true);\n      \n      let chat = activeChats.find(c => c.id === chatRoomId);\n      \n      if (!chat) {\n        const updatedChats = await fetchActiveChats(true);\n        chat = updatedChats.find(c => c.id === chatRoomId);\n      }\n      \n      if (chat) {\n        // Check if the chat is active\n        if (!chat.isActive) {\n          // If the chat is not active, check if user has joined\n          if (chat.hasJoined) {\n            // If the user has joined, they're waiting for the other person\n            setChatStatus({\n              type: 'waiting',\n              message: 'Waiting for the other person to accept your chat request...'\n            });\n            \n            setCurrentChat(chat);\n            setMessages([]);\n            \n            setTimeout(() => setChatStatus(null), 5000);\n            \n            return { \n              success: true, \n              chat, \n              status: 'waiting' \n            };\n          } else {\n            // If the user hasn't joined, they need to accept the request first\n            setChatStatus({\n              type: 'pending',\n              message: 'You need to accept this chat request first'\n            });\n            \n            await acceptChatRequest(chatRoomId);\n            return { \n              success: true, \n              chat, \n              status: 'accepted' \n            };\n          }\n        } else {\n          // Chat is active, proceed normally\n          setCurrentChat(chat);\n          await fetchMessages(chatRoomId);\n          \n          return { \n            success: true, \n            chat, \n            status: 'active' \n          };\n        }\n      } else {\n        setChatStatus({\n          type: 'error',\n          message: 'Chat room not found'\n        });\n        \n        setTimeout(() => setChatStatus(null), 5000);\n        \n        return { \n          success: false, \n          error: 'Chat not found' \n        };\n      }\n    } catch (error) {\n      console.error('Error opening chat:', error);\n      \n      setChatStatus({\n        type: 'error',\n        message: 'Failed to open chat: ' + error.message\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      \n      return { \n        success: false, \n        error: error.message \n      };\n    } finally {\n      setLoading(false);\n    }\n  }, [activeChats, fetchActiveChats, fetchMessages, acceptChatRequest]);\n\n  // Close the current chat\n  const closeChat = () => {\n    setCurrentChat(null);\n    setMessages([]);\n  };\n  \n  // Handle notification click\n  const handleNotificationClick = useCallback(async (notification) => {\n    if (!notification) return;\n    \n    try {\n      // Mark notification as read\n      await api.post('/chat/markNotificationRead', { notificationId: notification.id });\n      \n      // If it's a chat request, open the chat (which will handle acceptance if needed)\n      if (notification.type === 'chat_request' || notification.type === 'chat_accepted' || notification.type === 'new_message') {\n        await openChat(notification.chat_room_id);\n      }\n      \n      // Refresh notifications to remove the read one\n      await fetchNotifications(true);\n    } catch (error) {\n      console.error('Error handling notification click:', error);\n      setChatStatus({\n        type: 'error',\n        message: 'Failed to process notification: ' + error.message\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n    }\n  }, [openChat, fetchNotifications]);\n\n  // Check for pending chat requests on mount\n  useEffect(() => {\n    if (user) {\n      // Initial load\n      fetchNotifications(true);\n      fetchActiveChats(true);\n      \n      // Check for pending chat requests\n      const pendingChatId = localStorage.getItem('pendingChatRequest');\n      if (pendingChatId) {\n        fetchActiveChats(true).then(chats => {\n          const pendingChat = chats.find(c => c.id === pendingChatId);\n          if (pendingChat && pendingChat.isActive) {\n            openChat(pendingChatId);\n            localStorage.removeItem('pendingChatRequest');\n          }\n        });\n      }\n      \n      // Set up polling interval\n      const intervalId = setInterval(() => {\n        fetchNotifications();\n        \n        if (currentChat) {\n          fetchMessages(currentChat.id);\n        } else {\n          fetchActiveChats();\n        }\n      }, 10000);\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user, currentChat, fetchNotifications, fetchActiveChats, fetchMessages, openChat]);\n  \n  return (\n    <ChatContext.Provider\n      value={{\n        activeChats,\n        notifications,\n        currentChat,\n        messages,\n        loading,\n        error,\n        chatStatus,\n        sendChatRequest,\n        acceptChatRequest,\n        declineChatRequest,\n        sendMessage,\n        fetchMessages,\n        openChat,\n        closeChat,\n        fetchActiveChats,\n        fetchNotifications,\n        handleNotificationClick\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}