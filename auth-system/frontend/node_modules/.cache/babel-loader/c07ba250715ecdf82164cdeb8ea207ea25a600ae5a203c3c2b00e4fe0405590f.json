{"ast":null,"code":"// Central file for predefined locations\nexport const PREDEFINED_LOCATIONS = [{\n  id: 1,\n  name: \"New York City\",\n  latitude: 40.7128,\n  longitude: -74.0060,\n  description: \"The Big Apple\"\n}, {\n  id: 2,\n  name: \"London\",\n  latitude: 51.5074,\n  longitude: -0.1278,\n  description: \"Capital of England\"\n}, {\n  id: 3,\n  name: \"Tokyo\",\n  latitude: 35.6762,\n  longitude: 139.6503,\n  description: \"Japan's capital\"\n}, {\n  id: 4,\n  name: \"Paris\",\n  latitude: 48.8566,\n  longitude: 2.3522,\n  description: \"City of Love\"\n}, {\n  id: 5,\n  name: \"Sydney\",\n  latitude: -33.8688,\n  longitude: 151.2093,\n  description: \"Australia's largest city\"\n}, {\n  id: 6,\n  name: \"Dubai\",\n  latitude: 25.2048,\n  longitude: 55.2708,\n  description: \"UAE's business hub\"\n}, {\n  id: 7,\n  name: \"Mumbai\",\n  latitude: 19.0760,\n  longitude: 72.8777,\n  description: \"India's financial center\"\n}, {\n  id: 8,\n  name: \"Rio de Janeiro\",\n  latitude: -22.9068,\n  longitude: -43.1729,\n  description: \"Brazil's iconic city\"\n}, {\n  id: 9,\n  name: \"Cairo\",\n  latitude: 30.0444,\n  longitude: 31.2357,\n  description: \"Egypt's capital\"\n}, {\n  id: 10,\n  name: \"San Francisco\",\n  latitude: 37.7749,\n  longitude: -122.4194,\n  description: \"Home of Silicon Valley\"\n}, {\n  id: 11,\n  name: \"Berlin\",\n  latitude: 52.5200,\n  longitude: 13.4050,\n  description: \"Germany's capital\"\n}, {\n  id: 12,\n  name: \"Singapore\",\n  latitude: 1.3521,\n  longitude: 103.8198,\n  description: \"The Lion City\"\n}];\n\n// Helper function to get location name by coordinates\nexport const getLocationNameByCoordinates = (latitude, longitude) => {\n  if (!latitude || !longitude) return null;\n  const location = PREDEFINED_LOCATIONS.find(loc => Math.abs(loc.latitude - latitude) < 0.01 && Math.abs(loc.longitude - longitude) < 0.01);\n  return location ? location.name : \"Custom Location\";\n};","map":{"version":3,"names":["PREDEFINED_LOCATIONS","id","name","latitude","longitude","description","getLocationNameByCoordinates","location","find","loc","Math","abs"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/utils/locationData.js"],"sourcesContent":["// Central file for predefined locations\nexport const PREDEFINED_LOCATIONS = [\n    { id: 1, name: \"New York City\", latitude: 40.7128, longitude: -74.0060, description: \"The Big Apple\" },\n    { id: 2, name: \"London\", latitude: 51.5074, longitude: -0.1278, description: \"Capital of England\" },\n    { id: 3, name: \"Tokyo\", latitude: 35.6762, longitude: 139.6503, description: \"Japan's capital\" },\n    { id: 4, name: \"Paris\", latitude: 48.8566, longitude: 2.3522, description: \"City of Love\" },\n    { id: 5, name: \"Sydney\", latitude: -33.8688, longitude: 151.2093, description: \"Australia's largest city\" },\n    { id: 6, name: \"Dubai\", latitude: 25.2048, longitude: 55.2708, description: \"UAE's business hub\" },\n    { id: 7, name: \"Mumbai\", latitude: 19.0760, longitude: 72.8777, description: \"India's financial center\" },\n    { id: 8, name: \"Rio de Janeiro\", latitude: -22.9068, longitude: -43.1729, description: \"Brazil's iconic city\" },\n    { id: 9, name: \"Cairo\", latitude: 30.0444, longitude: 31.2357, description: \"Egypt's capital\" },\n    { id: 10, name: \"San Francisco\", latitude: 37.7749, longitude: -122.4194, description: \"Home of Silicon Valley\" },\n    { id: 11, name: \"Berlin\", latitude: 52.5200, longitude: 13.4050, description: \"Germany's capital\" },\n    { id: 12, name: \"Singapore\", latitude: 1.3521, longitude: 103.8198, description: \"The Lion City\" }\n  ];\n  \n  // Helper function to get location name by coordinates\n  export const getLocationNameByCoordinates = (latitude, longitude) => {\n    if (!latitude || !longitude) return null;\n    \n    const location = PREDEFINED_LOCATIONS.find(loc => \n      Math.abs(loc.latitude - latitude) < 0.01 && \n      Math.abs(loc.longitude - longitude) < 0.01\n    );\n    \n    return location ? location.name : \"Custom Location\";\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAG,CAChC;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,eAAe;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,CAAC,OAAO;EAAEC,WAAW,EAAE;AAAgB,CAAC,EACtG;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,CAAC,MAAM;EAAEC,WAAW,EAAE;AAAqB,CAAC,EACnG;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,OAAO;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,QAAQ;EAAEC,WAAW,EAAE;AAAkB,CAAC,EAChG;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,OAAO;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,MAAM;EAAEC,WAAW,EAAE;AAAe,CAAC,EAC3F;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE,CAAC,OAAO;EAAEC,SAAS,EAAE,QAAQ;EAAEC,WAAW,EAAE;AAA2B,CAAC,EAC3G;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,OAAO;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,OAAO;EAAEC,WAAW,EAAE;AAAqB,CAAC,EAClG;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,OAAO;EAAEC,WAAW,EAAE;AAA2B,CAAC,EACzG;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,gBAAgB;EAAEC,QAAQ,EAAE,CAAC,OAAO;EAAEC,SAAS,EAAE,CAAC,OAAO;EAAEC,WAAW,EAAE;AAAuB,CAAC,EAC/G;EAAEJ,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,OAAO;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,OAAO;EAAEC,WAAW,EAAE;AAAkB,CAAC,EAC/F;EAAEJ,EAAE,EAAE,EAAE;EAAEC,IAAI,EAAE,eAAe;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,CAAC,QAAQ;EAAEC,WAAW,EAAE;AAAyB,CAAC,EACjH;EAAEJ,EAAE,EAAE,EAAE;EAAEC,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE,OAAO;EAAEC,SAAS,EAAE,OAAO;EAAEC,WAAW,EAAE;AAAoB,CAAC,EACnG;EAAEJ,EAAE,EAAE,EAAE;EAAEC,IAAI,EAAE,WAAW;EAAEC,QAAQ,EAAE,MAAM;EAAEC,SAAS,EAAE,QAAQ;EAAEC,WAAW,EAAE;AAAgB,CAAC,CACnG;;AAED;AACA,OAAO,MAAMC,4BAA4B,GAAGA,CAACH,QAAQ,EAAEC,SAAS,KAAK;EACnE,IAAI,CAACD,QAAQ,IAAI,CAACC,SAAS,EAAE,OAAO,IAAI;EAExC,MAAMG,QAAQ,GAAGP,oBAAoB,CAACQ,IAAI,CAACC,GAAG,IAC5CC,IAAI,CAACC,GAAG,CAACF,GAAG,CAACN,QAAQ,GAAGA,QAAQ,CAAC,GAAG,IAAI,IACxCO,IAAI,CAACC,GAAG,CAACF,GAAG,CAACL,SAAS,GAAGA,SAAS,CAAC,GAAG,IACxC,CAAC;EAED,OAAOG,QAAQ,GAAGA,QAAQ,CAACL,IAAI,GAAG,iBAAiB;AACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}