{"ast":null,"code":"var _jsxFileName = \"/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date()); // Add this line\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date()); // Update timestamp\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('Creating path between:', source, destination);\n\n      // Send the source and destination to the server\n      // The server will calculate the actual route using OSRM\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      setLastUpdated(new Date()); // Update timestamp\n\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        // Special handling for inactive user error\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Fetch paths data for online users\n  const fetchLivePaths = async () => {\n    setIsLoading(true);\n    try {\n      var _response$data$data;\n      console.log('Fetching live paths with auth token:', !!localStorage.getItem('token'));\n      const response = await api.get('/path/live');\n\n      // Include timestamp in the live paths data\n      const timestamp = response.data.timestamp || new Date().toISOString();\n      console.log(`Fetched ${((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0} paths at ${timestamp}`);\n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date()); // Update timestamp\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    setIsLoading(true);\n    try {\n      var _response$data$data2;\n      console.log('Fetching live users with auth token:', !!localStorage.getItem('token'));\n      const response = await api.get('/location/live');\n      console.log('Live users response:', response.data);\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date()); // Update timestamp\n      console.log(`Fetched ${((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.length) || 0} online users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching online users:', error);\n      setError('Failed to fetch online users');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n\n      // Set up polling for live data\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 10000); // Refresh every 10 seconds\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      isLoading,\n      error,\n      lastUpdated,\n      // Add this to the exported context\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      getCurrentPosition\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"hFKZ06NffUVqovZtGIYpVRsWt0Y=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","status","warn","_error$response","_error$response$data","message","_response$data$data","localStorage","getItem","get","timestamp","toISOString","length","fetchLiveUsers","_response$data$data2","getCurrentPosition","navigator","geolocation","coords","catch","err","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date()); // Add this line\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date()); // Update timestamp\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log('Creating path between:', source, destination);\n      \n      // Send the source and destination to the server\n      // The server will calculate the actual route using OSRM\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      setLastUpdated(new Date()); // Update timestamp\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        // Special handling for inactive user error\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Fetch paths data for online users\n  const fetchLivePaths = async () => {\n    setIsLoading(true);\n    try {\n      console.log('Fetching live paths with auth token:', !!localStorage.getItem('token'));\n      const response = await api.get('/path/live');\n      \n      // Include timestamp in the live paths data\n      const timestamp = response.data.timestamp || new Date().toISOString();\n      console.log(`Fetched ${response.data.data?.length || 0} paths at ${timestamp}`);\n      \n      setLivePaths(response.data.data || []);\n      setLastUpdated(new Date()); // Update timestamp\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    setIsLoading(true);\n    try {\n      console.log('Fetching live users with auth token:', !!localStorage.getItem('token'));\n      const response = await api.get('/location/live');\n      console.log('Live users response:', response.data);\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date()); // Update timestamp\n      console.log(`Fetched ${response.data.data?.length || 0} online users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching online users:', error);\n      setError('Failed to fetch online users');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n      \n      // Set up polling for live data\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 10000); // Refresh every 10 seconds\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        isLoading,\n        error,\n        lastUpdated, // Add this to the exported context\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        getCurrentPosition\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}