{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [hasSelectedLocation, setHasSelectedLocation] = useState(false);\n\n  // Function to manually update user's location - ONLY WAY to set location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n\n      // Update position state with timestamp\n      setPosition({\n        latitude,\n        longitude,\n        lastUpdated: new Date().toISOString(),\n        isManuallySelected: true\n      });\n      setHasSelectedLocation(true);\n\n      // Also update online status\n      await updateOnlineStatus(true);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async isOnline => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', {\n        isOnline\n      });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch all live users\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Load saved location on login\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n\n      // Check if we have saved location data\n      const fetchProfile = async () => {\n        try {\n          const response = await api.get('/auth/profile');\n          if (response.data.latitude && response.data.longitude) {\n            setPosition({\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              lastUpdated: response.data.location_updated_at || new Date().toISOString(),\n              isManuallySelected: true\n            });\n            setHasSelectedLocation(true);\n          } else {\n            // No saved location, ensure position is null\n            setPosition(null);\n            setHasSelectedLocation(false);\n          }\n        } catch (error) {\n          console.error('Error fetching profile:', error);\n        }\n      };\n      fetchProfile();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n      setHasSelectedLocation(false);\n    }\n  }, [isAuthenticated]);\n\n  // Handle beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      updateOnlineStatus(false);\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      loadingUsers,\n      hasSelectedLocation,\n      updateLocation,\n      updateOnlineStatus,\n      fetchLiveUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"G4QAy2oLu7wqh2/uKEZ/ddinHlk=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","isAuthenticated","user","position","setPosition","liveUsers","setLiveUsers","loadingUsers","setLoadingUsers","hasSelectedLocation","setHasSelectedLocation","updateLocation","latitude","longitude","response","post","lastUpdated","Date","toISOString","isManuallySelected","updateOnlineStatus","data","error","console","isOnline","fetchLiveUsers","get","fetchProfile","location_updated_at","handleBeforeUnload","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/Desktop/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { isAuthenticated, user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n  const [hasSelectedLocation, setHasSelectedLocation] = useState(false);\n\n  // Function to manually update user's location - ONLY WAY to set location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n\n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      \n      // Update position state with timestamp\n      setPosition({ \n        latitude, \n        longitude, \n        lastUpdated: new Date().toISOString(),\n        isManuallySelected: true\n      });\n      \n      setHasSelectedLocation(true);\n\n      // Also update online status\n      await updateOnlineStatus(true);\n\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async (isOnline) => {\n    if (!isAuthenticated) return;\n    \n    try {\n      await api.post('/location/status', { isOnline });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch all live users\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    \n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // Load saved location on login\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n      \n      // Check if we have saved location data\n      const fetchProfile = async () => {\n        try {\n          const response = await api.get('/auth/profile');\n          if (response.data.latitude && response.data.longitude) {\n            setPosition({\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              lastUpdated: response.data.location_updated_at || new Date().toISOString(),\n              isManuallySelected: true\n            });\n            setHasSelectedLocation(true);\n          } else {\n            // No saved location, ensure position is null\n            setPosition(null);\n            setHasSelectedLocation(false);\n          }\n        } catch (error) {\n          console.error('Error fetching profile:', error);\n        }\n      };\n      \n      fetchProfile();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n      setHasSelectedLocation(false);\n    }\n  }, [isAuthenticated]);\n\n  // Handle beforeunload event to update offline status\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      updateOnlineStatus(false);\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        loadingUsers,\n        hasSelectedLocation,\n        updateLocation,\n        updateOnlineStatus,\n        fetchLiveUsers\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}