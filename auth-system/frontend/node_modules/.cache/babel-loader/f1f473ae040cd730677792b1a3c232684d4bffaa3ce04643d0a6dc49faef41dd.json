{"ast":null,"code":"var _jsxFileName = \"/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n\n  // Update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude,\n        lastUpdated: new Date()\n      });\n      // Also update online status\n      await updateOnlineStatus(true);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async isOnline => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', {\n        isOnline\n      });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch live user locations\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // New function: Update both source and destination by setting a path.\n  const updatePath = async (source, destination) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      // Optionally update live paths\n      setLivePaths(response.data.livePaths || []);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to set path:', error);\n      return null;\n    }\n  };\n\n  // Fetch live user paths from backend\n  const fetchLivePaths = async () => {\n    if (!isAuthenticated) return [];\n    try {\n      const response = await api.get('/path/live');\n      setLivePaths(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live paths:', error);\n      return [];\n    }\n  };\n\n  // When user logs in, update online status and try to load existing location from profile.\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n      const fetchProfile = async () => {\n        try {\n          const response = await api.get('/auth/profile');\n          if (response.data.latitude && response.data.longitude) {\n            setPosition({\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              lastUpdated: response.data.location_updated_at || new Date()\n            });\n          }\n        } catch (error) {\n          console.error('Error fetching profile:', error);\n        }\n      };\n      fetchProfile();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    const handleBeforeUnload = () => updateOnlineStatus(false);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      loadingUsers,\n      updateLocation,\n      updateOnlineStatus,\n      fetchLiveUsers,\n      updatePath,\n      fetchLivePaths\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"UpS3ZUWqjcn6e4IqdiZEQsAi5NY=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","isAuthenticated","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","loadingUsers","setLoadingUsers","updateLocation","latitude","longitude","response","post","lastUpdated","Date","updateOnlineStatus","data","error","console","isOnline","fetchLiveUsers","get","updatePath","source","destination","fetchLivePaths","fetchProfile","location_updated_at","handleBeforeUnload","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/projectwork/project/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { isAuthenticated } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [loadingUsers, setLoadingUsers] = useState(false);\n\n  // Update user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ \n        latitude, \n        longitude, \n        lastUpdated: new Date() \n      });\n      // Also update online status\n      await updateOnlineStatus(true);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update location on server:', error);\n      return null;\n    }\n  };\n\n  // Update online status\n  const updateOnlineStatus = async (isOnline) => {\n    if (!isAuthenticated) return;\n    try {\n      await api.post('/location/status', { isOnline });\n    } catch (error) {\n      console.error('Failed to update online status:', error);\n    }\n  };\n\n  // Fetch live user locations\n  const fetchLiveUsers = async () => {\n    if (!isAuthenticated) return [];\n    setLoadingUsers(true);\n    try {\n      const response = await api.get('/location/live');\n      setLiveUsers(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live users:', error);\n      return [];\n    } finally {\n      setLoadingUsers(false);\n    }\n  };\n\n  // New function: Update both source and destination by setting a path.\n  const updatePath = async (source, destination) => {\n    if (!isAuthenticated) return;\n    try {\n      const response = await api.post('/path/set', { source, destination });\n      // Optionally update live paths\n      setLivePaths(response.data.livePaths || []);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to set path:', error);\n      return null;\n    }\n  };\n\n  // Fetch live user paths from backend\n  const fetchLivePaths = async () => {\n    if (!isAuthenticated) return [];\n    try {\n      const response = await api.get('/path/live');\n      setLivePaths(response.data.data || []);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch live paths:', error);\n      return [];\n    }\n  };\n\n  // When user logs in, update online status and try to load existing location from profile.\n  useEffect(() => {\n    if (isAuthenticated) {\n      updateOnlineStatus(true);\n      const fetchProfile = async () => {\n        try {\n          const response = await api.get('/auth/profile');\n          if (response.data.latitude && response.data.longitude) {\n            setPosition({\n              latitude: response.data.latitude,\n              longitude: response.data.longitude,\n              lastUpdated: response.data.location_updated_at || new Date()\n            });\n          }\n        } catch (error) {\n          console.error('Error fetching profile:', error);\n        }\n      };\n      fetchProfile();\n    } else {\n      updateOnlineStatus(false);\n      setPosition(null);\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    const handleBeforeUnload = () => updateOnlineStatus(false);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        loadingUsers,\n        updateLocation,\n        updateOnlineStatus,\n        fetchLiveUsers,\n        updatePath,\n        fetchLivePaths\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}