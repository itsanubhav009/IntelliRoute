[{"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js":"1","/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js":"2","/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js":"3","/home/anubhav/project_6/auth-system/frontend/src/components/NotificationsPanel.js":"4","/home/anubhav/project_6/auth-system/frontend/src/components/NotificationButton.js":"5","/home/anubhav/project_6/auth-system/frontend/src/components/ChatNotification.js":"6","/home/anubhav/project_6/auth-system/frontend/src/utils/api.js":"7","/home/anubhav/project_6/auth-system/frontend/src/components/ChatDialog.js":"8","/home/anubhav/project_6/auth-system/frontend/src/components/LiveUsers.js":"9"},{"size":16403,"mtime":1744111048445,"results":"10","hashOfConfig":"11"},{"size":38936,"mtime":1744294040421,"results":"12","hashOfConfig":"11"},{"size":14711,"mtime":1744295161100,"results":"13","hashOfConfig":"11"},{"size":8992,"mtime":1744098450847,"results":"14","hashOfConfig":"11"},{"size":776,"mtime":1744091319687,"results":"15","hashOfConfig":"11"},{"size":3037,"mtime":1744024878317,"results":"16","hashOfConfig":"11"},{"size":429,"mtime":1744094039581,"results":"17","hashOfConfig":"11"},{"size":7473,"mtime":1744110960799,"results":"18","hashOfConfig":"11"},{"size":5832,"mtime":1744294376695,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"3xgdih",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/anubhav/project_6/auth-system/frontend/src/context/ChatContext.js",["47","48","49"],[],"/home/anubhav/project_6/auth-system/frontend/src/components/UserLocationMap.js",["50","51","52"],[],"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js",["53"],[],"/home/anubhav/project_6/auth-system/frontend/src/components/NotificationsPanel.js",["54"],[],"/home/anubhav/project_6/auth-system/frontend/src/components/NotificationButton.js",[],[],"/home/anubhav/project_6/auth-system/frontend/src/components/ChatNotification.js",[],[],"/home/anubhav/project_6/auth-system/frontend/src/utils/api.js",[],[],"/home/anubhav/project_6/auth-system/frontend/src/components/ChatDialog.js",[],[],"/home/anubhav/project_6/auth-system/frontend/src/components/LiveUsers.js",[],[],{"ruleId":"55","severity":1,"message":"56","line":162,"column":7,"nodeType":"57","messageId":"58","endLine":162,"endColumn":32},{"ruleId":"59","severity":1,"message":"60","line":198,"column":7,"nodeType":"61","endLine":264,"endColumn":2,"suggestions":"62"},{"ruleId":"55","severity":1,"message":"63","line":209,"column":11,"nodeType":"57","messageId":"58","endLine":209,"endColumn":19},{"ruleId":"55","severity":1,"message":"64","line":16,"column":49,"nodeType":"57","messageId":"58","endLine":16,"endColumn":55},{"ruleId":"55","severity":1,"message":"65","line":16,"column":101,"nodeType":"57","messageId":"58","endLine":16,"endColumn":107},{"ruleId":"59","severity":1,"message":"66","line":446,"column":25,"nodeType":"57","endLine":446,"endColumn":36},{"ruleId":"59","severity":1,"message":"67","line":419,"column":6,"nodeType":"68","endLine":419,"endColumn":12,"suggestions":"69"},{"ruleId":"55","severity":1,"message":"70","line":12,"column":5,"nodeType":"57","messageId":"58","endLine":12,"endColumn":12},"no-unused-vars","'ensureParticipantsCanChat' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'acceptChatRequest' function makes the dependencies of useCallback Hook (at line 468) change on every render. To fix this, wrap the definition of 'acceptChatRequest' in its own useCallback() Hook.","VariableDeclarator",["71"],"'response' is assigned a value but never used.","'faBell' is defined but never used.","'faInfo' is defined but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has missing dependencies: 'fetchLivePaths', 'fetchLiveUsers', 'fetchUsersAlongPath', 'forceRefreshData', 'getCurrentPosition', and 'isLoading'. Either include them or remove the dependency array.","ArrayExpression",["72"],"'loading' is assigned a value but never used.",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Wrap the definition of 'acceptChatRequest' in its own useCallback() Hook.",{"range":"77","text":"78"},"Update the dependencies array to be: [fetchLivePaths, fetchLiveUsers, fetchUsersAlongPath, forceRefreshData, getCurrentPosition, isLoading, user]",{"range":"79","text":"80"},[5996,8071],"useCallback(async (chatRoomId) => {\n  if (!user || !chatRoomId) return { success: false, error: 'Missing data' };\n  \n  try {\n    setLoading(true);\n    setChatStatus({\n      type: 'accepting',\n      message: 'Accepting chat request...'\n    });\n    \n    console.log(`[${new Date().toISOString()}] Accepting chat request ${chatRoomId}`);\n    const response = await api.post('/chat/accept', { chatRoomId });\n    \n    // Get updated notifications\n    await fetchNotifications(true);\n    \n    // Force-refresh active chats list\n    const updatedChats = await fetchActiveChats(true);\n    const acceptedChat = updatedChats.find(c => c.id === chatRoomId);\n    \n    if (acceptedChat) {\n      // Force fetch messages to verify chat is working\n      try {\n        const chatMessages = await fetchMessages(chatRoomId, true);\n        console.log('Initial messages after acceptance:', chatMessages);\n      } catch (err) {\n        console.warn('Could not fetch initial messages, will retry');\n      }\n      \n      // Important: Override the chat status locally for immediate UI update\n      acceptedChat.isActive = true;\n      acceptedChat.hasJoined = true;\n      \n      // Set as current chat\n      setCurrentChat(acceptedChat);\n      \n      setChatStatus({\n        type: 'success',\n        message: 'Chat activated successfully!'\n      });\n      \n      setTimeout(() => setChatStatus(null), 3000);\n      \n      return { success: true, chat: acceptedChat };\n    } else {\n      console.error('Chat not found after acceptance');\n      setChatStatus({\n        type: 'error',\n        message: 'Chat not found after acceptance'\n      });\n      \n      setTimeout(() => setChatStatus(null), 5000);\n      return { success: false, error: 'Chat not found' };\n    }\n  } catch (error) {\n    console.error('Error accepting chat:', error);\n    setChatStatus({\n      type: 'error',\n      message: 'Failed to accept chat: ' + (error.message || 'Unknown error')\n    });\n    \n    setTimeout(() => setChatStatus(null), 5000);\n    return { success: false, error: error.message };\n  } finally {\n    setLoading(false);\n  }\n})",[14047,14053],"[fetchLivePaths, fetchLiveUsers, fetchUsersAlongPath, forceRefreshData, getCurrentPosition, isLoading, user]"]