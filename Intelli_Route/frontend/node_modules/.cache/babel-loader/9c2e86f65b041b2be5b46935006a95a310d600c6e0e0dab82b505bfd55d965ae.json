{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n\n  // Add these refs to track fetch timing\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('Creating path between:', source, destination);\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n\n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths();\n    return newValue;\n  };\n\n  // Fetch paths data for online users\n  // This goes in your LocationContext.jsx file\n\n  const fetchLivePaths = async (intersectOnly = false) => {\n    setIsLoading(true);\n    try {\n      var _response$data$curren, _response$data$inters, _response$data$data, _response$data$curren2, _response$data$inters2;\n      console.log('Fetching live paths...');\n      const response = await axios.get(`/api/path/live?intersectOnly=${intersectOnly}`);\n      if (!response.data) {\n        console.error('No data returned from path API');\n        return;\n      }\n\n      // Log the structure of what we received\n      console.log('Path API response structure:', {\n        hasCurrentUserPath: !!((_response$data$curren = response.data.currentUser) !== null && _response$data$curren !== void 0 && _response$data$curren.path),\n        intersectingUsersCount: ((_response$data$inters = response.data.intersectingUsers) === null || _response$data$inters === void 0 ? void 0 : _response$data$inters.length) || 0,\n        dataArrayLength: ((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0\n      });\n\n      // Use the combined data array for compatibility\n      let paths = [];\n      if (Array.isArray(response.data.data)) {\n        paths = response.data.data;\n      } else if ((_response$data$curren2 = response.data.currentUser) !== null && _response$data$curren2 !== void 0 && _response$data$curren2.path || ((_response$data$inters2 = response.data.intersectingUsers) === null || _response$data$inters2 === void 0 ? void 0 : _response$data$inters2.length) > 0) {\n        var _response$data$curren3;\n        // Manually combine data from structured format\n        paths = [...((_response$data$curren3 = response.data.currentUser) !== null && _response$data$curren3 !== void 0 && _response$data$curren3.path ? [response.data.currentUser.path] : []), ...(response.data.intersectingUsers || [])];\n      }\n\n      // Ensure we include paths from both current user and others\n      console.log(`Fetched ${paths.length} total paths`);\n      if (paths.length > 0) {\n        // Log each path to help with debugging\n        paths.forEach((path, index) => {\n          console.log(`Path ${index + 1}:`, {\n            id: path.id,\n            user_id: path.user_id,\n            username: path.username || 'Unknown',\n            isCurrentUser: path.user_id === (user === null || user === void 0 ? void 0 : user.id),\n            hasRoute: !!path.route\n          });\n        });\n        setLivePaths(paths);\n      } else {\n        console.log('No paths found');\n        setLivePaths([]);\n      }\n    } catch (error) {\n      console.error('Error fetching live paths:', error);\n      setLivePaths([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    // Prevent calling too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.users < 20000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users) / 1000)}s)`);\n      return liveUsers;\n    }\n    setIsLoading(true);\n    try {\n      var _response$data$data2;\n      console.log(`Fetching live users at ${new Date().toISOString()}`);\n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      console.log(`Fetched ${((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.length) || 0} active users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n\n      // Set up polling for live data\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 10000); // Use 30-second interval\n\n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      toggleIntersectionFilter,\n      getCurrentPosition\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"LGRrg3PD0h5IBoWNrfUZfdlABFU=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","axios","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","fetchTimers","users","paths","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","status","warn","_error$response","_error$response$data","message","toggleIntersectionFilter","newValue","intersectOnly","_response$data$curren","_response$data$inters","_response$data$data","_response$data$curren2","_response$data$inters2","get","hasCurrentUserPath","currentUser","path","intersectingUsersCount","intersectingUsers","length","dataArrayLength","Array","isArray","_response$data$curren3","forEach","index","id","user_id","username","isCurrentUser","hasRoute","route","fetchLiveUsers","now","current","Math","round","_response$data$data2","toISOString","getCurrentPosition","navigator","geolocation","coords","catch","err","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios'; \n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  \n  // Add these refs to track fetch timing\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log('Creating path between:', source, destination);\n      \n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      // Refresh paths after creating a new one\n      await fetchLivePaths();\n      setLastUpdated(new Date());\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths();\n    \n    return newValue;\n  };\n\n  // Fetch paths data for online users\n // This goes in your LocationContext.jsx file\n\nconst fetchLivePaths = async (intersectOnly = false) => {\n  setIsLoading(true);\n  try {\n    console.log('Fetching live paths...');\n    const response = await axios.get(`/api/path/live?intersectOnly=${intersectOnly}`);\n    \n    if (!response.data) {\n      console.error('No data returned from path API');\n      return;\n    }\n    \n    // Log the structure of what we received\n    console.log('Path API response structure:', {\n      hasCurrentUserPath: !!response.data.currentUser?.path,\n      intersectingUsersCount: response.data.intersectingUsers?.length || 0,\n      dataArrayLength: response.data.data?.length || 0\n    });\n    \n    // Use the combined data array for compatibility\n    let paths = [];\n    \n    if (Array.isArray(response.data.data)) {\n      paths = response.data.data;\n    } else if (response.data.currentUser?.path || (response.data.intersectingUsers?.length > 0)) {\n      // Manually combine data from structured format\n      paths = [\n        ...(response.data.currentUser?.path ? [response.data.currentUser.path] : []),\n        ...(response.data.intersectingUsers || [])\n      ];\n    }\n    \n    // Ensure we include paths from both current user and others\n    console.log(`Fetched ${paths.length} total paths`);\n    \n    if (paths.length > 0) {\n      // Log each path to help with debugging\n      paths.forEach((path, index) => {\n        console.log(`Path ${index + 1}:`, {\n          id: path.id,\n          user_id: path.user_id,\n          username: path.username || 'Unknown',\n          isCurrentUser: path.user_id === user?.id,\n          hasRoute: !!path.route\n        });\n      });\n      \n      setLivePaths(paths);\n    } else {\n      console.log('No paths found');\n      setLivePaths([]);\n    }\n  } catch (error) {\n    console.error('Error fetching live paths:', error);\n    setLivePaths([]);\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    // Prevent calling too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.users < 20000) {\n      console.log(`Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users)/1000)}s)`);\n      return liveUsers;\n    }\n    \n    setIsLoading(true);\n    try {\n      console.log(`Fetching live users at ${new Date().toISOString()}`);\n      const response = await api.get('/location/live');\n      \n      fetchTimers.current.users = now;\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      \n      console.log(`Fetched ${response.data.data?.length || 0} active users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      setError('Failed to fetch users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      getCurrentPosition();\n      \n      // Set up polling for live data\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('Failed to fetch paths:', err));\n      }, 10000); // Use 30-second interval\n      \n      return () => clearInterval(intervalId);\n    }\n  }, [user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        toggleIntersectionFilter,\n        getCurrentPosition\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}