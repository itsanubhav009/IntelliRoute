{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n\n  // Add these refs to track fetch timing\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      console.log('[PATH] Creating path between:', source, destination);\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      console.log('[PATH] Path created successfully:', response.data);\n\n      // Immediately refresh paths after creating a new one\n      await fetchLivePaths(showIntersectingOnly);\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('[PATH] User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('[PATH] Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    console.log(`[PATH] Toggled intersection filter to: ${newValue}`);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths(newValue);\n    return newValue;\n  };\n\n  // Fetch paths data for online users with improved handling and debugging\n  const fetchLivePaths = async (intersectOnly = showIntersectingOnly) => {\n    // Check if we're fetching too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.paths < 20000) {\n      console.log(`[PATH] Skipping fetchLivePaths - too soon (${Math.round((now - fetchTimers.current.paths) / 1000)}s)`);\n      return livePaths;\n    }\n\n    // Update timestamp to prevent too frequent calls\n    fetchTimers.current.paths = now;\n    if (!user) {\n      console.log('[PATH] No user logged in, skipping path fetch');\n      return [];\n    }\n    setIsLoading(true);\n    console.log(`[PATH] Fetching paths with intersectOnly=${intersectOnly}`);\n    try {\n      const response = await axios.get(`/api/path/live?intersectOnly=${intersectOnly}`);\n      if (!response || !response.data) {\n        console.error('[PATH] No data returned from path API');\n        return [];\n      }\n\n      // Process the paths data regardless of format\n      let paths = [];\n\n      // Check for legacy data array format\n      if (Array.isArray(response.data.data)) {\n        console.log(`[PATH] Found ${response.data.data.length} paths in legacy data array format`);\n        paths = response.data.data;\n      }\n      // Check for structured format with currentUser and intersectingUsers\n      else if (response.data.currentUser || response.data.intersectingUsers) {\n        var _response$data$curren;\n        console.log('[PATH] Found structured response format');\n\n        // Add current user's path if available\n        if ((_response$data$curren = response.data.currentUser) !== null && _response$data$curren !== void 0 && _response$data$curren.path) {\n          console.log('[PATH] Found current user path');\n          paths.push(response.data.currentUser.path);\n        }\n\n        // Add intersecting paths if available\n        if (Array.isArray(response.data.intersectingUsers)) {\n          console.log(`[PATH] Found ${response.data.intersectingUsers.length} intersecting paths`);\n          paths = [...paths, ...response.data.intersectingUsers];\n        }\n      }\n      // Fallback if response has neither format\n      else if (Array.isArray(response.data)) {\n        console.log('[PATH] Response data is a direct array');\n        paths = response.data;\n      }\n      console.log(`[PATH] Processing ${paths.length} total paths`);\n\n      // Process each path to ensure it has all required properties\n      const processedPaths = paths.map(path => {\n        // Ensure route property exists (might be named route_wkt in some responses)\n        if (!path.route && path.route_wkt) {\n          path.route = path.route_wkt;\n        }\n\n        // Log info about each path for debugging\n        const pathInfo = {\n          id: path.id || 'unknown',\n          user_id: path.user_id || 'unknown',\n          username: path.username || 'Unknown',\n          isCurrentUser: path.user_id === user.id,\n          hasRoute: !!path.route,\n          routeLength: path.route ? path.route.length : 0\n        };\n        console.log(`[PATH] Path details:`, pathInfo);\n\n        // Return the processed path\n        return path;\n      });\n      setLivePaths(processedPaths.filter(path => path.route));\n      setLastUpdated(new Date());\n      console.log(`[PATH] Set ${processedPaths.length} paths in state (${processedPaths.filter(p => p.route).length} with routes)`);\n      return processedPaths;\n    } catch (error) {\n      console.error('[PATH] Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      return [];\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    // Prevent calling too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.users < 20000) {\n      console.log(`[USERS] Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users) / 1000)}s)`);\n      return liveUsers;\n    }\n    setIsLoading(true);\n    try {\n      var _response$data$data;\n      console.log(`[USERS] Fetching live users at ${new Date().toISOString()}`);\n      const response = await api.get('/location/live');\n      fetchTimers.current.users = now;\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      console.log(`[USERS] Fetched ${((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.length) || 0} active users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('[USERS] Error fetching users:', error);\n      setError('Failed to fetch users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Optionally update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('[LOCATION] Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('[LOCATION] Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      console.log('[INIT] User logged in, setting up location tracking');\n      getCurrentPosition();\n\n      // Initial fetch of data\n      fetchLiveUsers().catch(err => console.error('[INIT] Failed to fetch users:', err));\n      fetchLivePaths().catch(err => console.error('[INIT] Failed to fetch paths:', err));\n\n      // Set up polling for live data\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('[POLL] Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('[POLL] Failed to fetch paths:', err));\n      }, 30000); // Use 30-second interval\n\n      return () => {\n        console.log('[CLEANUP] Clearing location polling interval');\n        clearInterval(intervalId);\n      };\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      toggleIntersectionFilter,\n      getCurrentPosition\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"LGRrg3PD0h5IBoWNrfUZfdlABFU=\");\n_c = LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","axios","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","fetchTimers","users","paths","updateLocation","latitude","longitude","response","post","data","console","createPath","source","destination","log","fetchLivePaths","status","warn","_error$response","_error$response$data","message","toggleIntersectionFilter","newValue","intersectOnly","now","current","Math","round","get","Array","isArray","length","currentUser","intersectingUsers","_response$data$curren","path","push","processedPaths","map","route","route_wkt","pathInfo","id","user_id","username","isCurrentUser","hasRoute","routeLength","filter","p","fetchLiveUsers","_response$data$data","toISOString","getCurrentPosition","navigator","geolocation","coords","catch","err","intervalId","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios'; \n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(false);\n  \n  // Add these refs to track fetch timing\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0\n  });\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log('[PATH] Creating path between:', source, destination);\n      \n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      console.log('[PATH] Path created successfully:', response.data);\n      \n      // Immediately refresh paths after creating a new one\n      await fetchLivePaths(showIntersectingOnly);\n      setLastUpdated(new Date());\n      \n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.warn('[PATH] User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('[PATH] Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    console.log(`[PATH] Toggled intersection filter to: ${newValue}`);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths(newValue);\n    \n    return newValue;\n  };\n\n  // Fetch paths data for online users with improved handling and debugging\n  const fetchLivePaths = async (intersectOnly = showIntersectingOnly) => {\n    // Check if we're fetching too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.paths < 20000) {\n      console.log(`[PATH] Skipping fetchLivePaths - too soon (${Math.round((now - fetchTimers.current.paths)/1000)}s)`);\n      return livePaths;\n    }\n    \n    // Update timestamp to prevent too frequent calls\n    fetchTimers.current.paths = now;\n    \n    if (!user) {\n      console.log('[PATH] No user logged in, skipping path fetch');\n      return [];\n    }\n    \n    setIsLoading(true);\n    console.log(`[PATH] Fetching paths with intersectOnly=${intersectOnly}`);\n    \n    try {\n      const response = await axios.get(`/api/path/live?intersectOnly=${intersectOnly}`);\n      \n      if (!response || !response.data) {\n        console.error('[PATH] No data returned from path API');\n        return [];\n      }\n      \n      // Process the paths data regardless of format\n      let paths = [];\n      \n      // Check for legacy data array format\n      if (Array.isArray(response.data.data)) {\n        console.log(`[PATH] Found ${response.data.data.length} paths in legacy data array format`);\n        paths = response.data.data;\n      } \n      // Check for structured format with currentUser and intersectingUsers\n      else if (response.data.currentUser || response.data.intersectingUsers) {\n        console.log('[PATH] Found structured response format');\n        \n        // Add current user's path if available\n        if (response.data.currentUser?.path) {\n          console.log('[PATH] Found current user path');\n          paths.push(response.data.currentUser.path);\n        }\n        \n        // Add intersecting paths if available\n        if (Array.isArray(response.data.intersectingUsers)) {\n          console.log(`[PATH] Found ${response.data.intersectingUsers.length} intersecting paths`);\n          paths = [...paths, ...response.data.intersectingUsers];\n        }\n      }\n      // Fallback if response has neither format\n      else if (Array.isArray(response.data)) {\n        console.log('[PATH] Response data is a direct array');\n        paths = response.data;\n      }\n      \n      console.log(`[PATH] Processing ${paths.length} total paths`);\n      \n      // Process each path to ensure it has all required properties\n      const processedPaths = paths.map(path => {\n        // Ensure route property exists (might be named route_wkt in some responses)\n        if (!path.route && path.route_wkt) {\n          path.route = path.route_wkt;\n        }\n        \n        // Log info about each path for debugging\n        const pathInfo = {\n          id: path.id || 'unknown',\n          user_id: path.user_id || 'unknown',\n          username: path.username || 'Unknown',\n          isCurrentUser: path.user_id === user.id,\n          hasRoute: !!path.route,\n          routeLength: path.route ? path.route.length : 0\n        };\n        \n        console.log(`[PATH] Path details:`, pathInfo);\n        \n        // Return the processed path\n        return path;\n      });\n      \n      setLivePaths(processedPaths.filter(path => path.route));\n      setLastUpdated(new Date());\n      \n      console.log(`[PATH] Set ${processedPaths.length} paths in state (${processedPaths.filter(p => p.route).length} with routes)`);\n      return processedPaths;\n    } catch (error) {\n      console.error('[PATH] Error fetching paths:', error);\n      setError('Failed to fetch paths');\n      return [];\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async () => {\n    // Prevent calling too frequently\n    const now = Date.now();\n    if (now - fetchTimers.current.users < 20000) {\n      console.log(`[USERS] Skipping fetchLiveUsers - too soon (${Math.round((now - fetchTimers.current.users)/1000)}s)`);\n      return liveUsers;\n    }\n    \n    setIsLoading(true);\n    try {\n      console.log(`[USERS] Fetching live users at ${new Date().toISOString()}`);\n      const response = await api.get('/location/live');\n      \n      fetchTimers.current.users = now;\n      setLiveUsers(response.data.data || []);\n      setLastUpdated(new Date());\n      \n      console.log(`[USERS] Fetched ${response.data.data?.length || 0} active users`);\n      return response.data.data;\n    } catch (error) {\n      console.error('[USERS] Error fetching users:', error);\n      setError('Failed to fetch users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Get browser geolocation\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Optionally update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('[LOCATION] Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('[LOCATION] Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Get current location and set up polling when component mounts\n  useEffect(() => {\n    if (user) {\n      console.log('[INIT] User logged in, setting up location tracking');\n      getCurrentPosition();\n      \n      // Initial fetch of data\n      fetchLiveUsers().catch(err => console.error('[INIT] Failed to fetch users:', err));\n      fetchLivePaths().catch(err => console.error('[INIT] Failed to fetch paths:', err));\n      \n      // Set up polling for live data\n      const intervalId = setInterval(() => {\n        fetchLiveUsers().catch(err => console.error('[POLL] Failed to fetch users:', err));\n        fetchLivePaths().catch(err => console.error('[POLL] Failed to fetch paths:', err));\n      }, 30000); // Use 30-second interval\n      \n      return () => {\n        console.log('[CLEANUP] Clearing location polling interval');\n        clearInterval(intervalId);\n      };\n    }\n  }, [user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        toggleIntersectionFilter,\n        getCurrentPosition\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}