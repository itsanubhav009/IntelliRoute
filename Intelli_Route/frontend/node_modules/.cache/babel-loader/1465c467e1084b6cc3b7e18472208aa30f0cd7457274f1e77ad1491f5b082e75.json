{"ast":null,"code":"var _jsxFileName = \"/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js\",\n  _s = $RefreshSig$();\n/**\n * LocationContext.jsx - Updated with proper path handling\n * Last updated: 2025-04-10 14:23:02\n */\n\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LocationContext = /*#__PURE__*/createContext();\nexport const LocationProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]); // Paths data\n  const [usersAlongPath, setUsersAlongPath] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(true); // Default to show only intersecting paths\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius\n\n  // Add myPath state for easier tracking of current user's path\n  const [myPath, setMyPath] = useState(null);\n\n  // Cache to prevent redundant updates\n  const dataCache = useRef({\n    usersHash: null,\n    pathsHash: null,\n    usersAlongPathHash: null\n  });\n\n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0,\n    usersAlongPath: 0\n  });\n\n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false,\n    usersAlongPath: false\n  });\n\n  // Simple hash function to compare data changes\n  const hashData = data => {\n    if (!data) return 'empty';\n    return JSON.stringify(data).split('').reduce((a, b) => (a << 5) - a + b.charCodeAt(0) | 0, 0).toString();\n  };\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    try {\n      console.log(`[2025-04-10 14:23:02] Updating location for user ${user.username || '[unknown]'}: ${latitude}, ${longitude}`);\n      if (!user.username) {\n        console.error('[2025-04-10 14:23:02] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      const response = await api.post('/location/update', {\n        latitude,\n        longitude\n      });\n      setPosition({\n        latitude,\n        longitude\n      });\n      setLastUpdated(new Date());\n\n      // Refresh path-related data after updating location\n      fetchUsersAlongPath(true).catch(e => console.warn('Failed to refresh users along path:', e));\n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    try {\n      var _response$data;\n      console.log(`[2025-04-10 14:23:02] Creating path from [${source.lat}, ${source.lng}] to [${destination.lat}, ${destination.lng}]`);\n      if (!user.username) {\n        console.error('[2025-04-10 14:23:02] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      setIsLoading(true);\n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      console.log(`[2025-04-10 14:23:02] Path created successfully with ID: ${((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.pathId) || 'unknown'}`);\n\n      // Refresh paths to get new path data\n      await fetchLivePaths(true);\n\n      // Then fetch users along the new path\n      await fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      setIsLoading(false);\n      return response.data;\n    } catch (error) {\n      setIsLoading(false);\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        var _error$response, _error$response$data;\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n\n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n\n    return newValue;\n  };\n\n  // Fetch paths data with improved error handling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    if (!user) return [];\n\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      return livePaths;\n    }\n    const now = Date.now();\n    // Apply throttling for requests\n    if (!force && now - fetchTimers.current.paths < 300) {\n      return livePaths;\n    }\n    try {\n      requestInProgress.current.paths = true;\n      fetchTimers.current.paths = now;\n\n      // Only show loading if forced - reduces UI flicker\n      if (force) setIsLoading(true);\n      console.log(`[2025-04-10 14:23:02] Fetching paths with intersectOnly=${intersectOnly}`);\n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      const pathsData = response.data.data || [];\n      console.log(`[2025-04-10 14:23:02] Received ${pathsData.length} paths from API`);\n\n      // Check for and log current user's path\n      if (user && user.id) {\n        const currentUserPath = pathsData.find(path => path.user_id === user.id);\n        if (currentUserPath) {\n          console.log(`[2025-04-10 14:23:02] Found current user's path: ID=${currentUserPath.id}`);\n          setMyPath(currentUserPath);\n        } else {\n          console.log(`[2025-04-10 14:23:02] No path found for current user`);\n          setMyPath(null);\n        }\n      }\n\n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(pathsData);\n      if (force || newDataHash !== dataCache.current.pathsHash) {\n        console.log(`[2025-04-10 14:23:02] Updating paths state with ${pathsData.length} paths`);\n        dataCache.current.pathsHash = newDataHash;\n        setLivePaths(pathsData);\n        setLastUpdated(new Date());\n      }\n      if (force) setIsLoading(false);\n      return pathsData;\n    } catch (error) {\n      console.error('[2025-04-10 14:23:02] Error fetching paths:', error);\n      if (force) {\n        setError('Failed to fetch paths');\n        setIsLoading(false);\n      }\n      return livePaths;\n    } finally {\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // Fetch users who are physically located along the current user's path\n  const fetchUsersAlongPath = async (force = false) => {\n    if (!user) return [];\n\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      return usersAlongPath;\n    }\n    const now = Date.now();\n    // Apply throttling for requests\n    if (!force && now - fetchTimers.current.usersAlongPath < 300) {\n      return usersAlongPath;\n    }\n    try {\n      requestInProgress.current.usersAlongPath = true;\n      fetchTimers.current.usersAlongPath = now;\n\n      // Only show loading if forced\n      if (force) setIsLoading(true);\n      console.log(`[2025-04-10 14:23:02] Fetching users along path with radius ${proximityRadius}m`);\n      const response = await api.get(`/location/along-my-path?radius=${proximityRadius}`);\n      const usersData = response.data.data || [];\n      console.log(`[2025-04-10 14:23:02] Found ${usersData.length} users along current user's path`);\n\n      // Only update UI if data has changed\n      const newDataHash = hashData(usersData);\n      if (force || newDataHash !== dataCache.current.usersAlongPathHash) {\n        dataCache.current.usersAlongPathHash = newDataHash;\n        setUsersAlongPath(usersData);\n        setLastUpdated(new Date());\n      }\n      if (force) setIsLoading(false);\n      return usersData;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        console.log('[2025-04-10 14:23:02] No path found for current user');\n        setUsersAlongPath([]);\n        dataCache.current.usersAlongPathHash = hashData([]);\n        return [];\n      } else {\n        console.error('[2025-04-10 14:23:02] Error fetching users along path:', error);\n        if (force) {\n          setError('Failed to fetch users along path');\n          setIsLoading(false);\n        }\n        return usersAlongPath;\n      }\n    } finally {\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async (force = false) => {\n    if (!user) return [];\n\n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      return liveUsers;\n    }\n    const now = Date.now();\n    // Apply throttling for requests\n    if (!force && now - fetchTimers.current.users < 300) {\n      return liveUsers;\n    }\n    try {\n      requestInProgress.current.users = true;\n      fetchTimers.current.users = now;\n\n      // Only show loading if forced\n      if (force) setIsLoading(true);\n      const response = await api.get('/location/live');\n      const userData = response.data.data || [];\n\n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        return !isNaN(lat) && !isNaN(lng) && Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      });\n\n      // Only update UI if data has changed\n      const newDataHash = hashData(validUsers);\n      if (force || newDataHash !== dataCache.current.usersHash) {\n        dataCache.current.usersHash = newDataHash;\n        setLiveUsers(validUsers);\n        setLastUpdated(new Date());\n      }\n      if (force) setIsLoading(false);\n      return validUsers;\n    } catch (error) {\n      console.error('[2025-04-10 14:23:02] Error fetching users:', error);\n      if (force) {\n        setError('Failed to fetch users');\n        setIsLoading(false);\n      }\n      return liveUsers;\n    } finally {\n      requestInProgress.current.users = false;\n    }\n  };\n\n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setPosition({\n          latitude,\n          longitude\n        });\n\n        // Update server with this location\n        if (user) {\n          updateLocation(latitude, longitude).catch(err => console.error('Failed to update initial location:', err));\n        }\n      }, error => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get location');\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh all data\n  const forceRefreshData = async () => {\n    console.log(\"[2025-04-10 14:23:02] Force refreshing all location data...\");\n    setIsLoading(true);\n    try {\n      // Reset cache to force UI updates\n      dataCache.current = {\n        usersHash: null,\n        pathsHash: null,\n        usersAlongPathHash: null\n      };\n\n      // Fetch data in sequence to avoid race conditions\n      console.log(\"[2025-04-10 14:23:02] Refreshing paths data\");\n      const pathsData = await fetchLivePaths(true);\n      console.log(\"[2025-04-10 14:23:02] Refreshing users data\");\n      const userData = await fetchLiveUsers(true);\n      console.log(\"[2025-04-10 14:23:02] Refreshing users along path data\");\n      const usersAlongPathData = await fetchUsersAlongPath(true);\n      setLastUpdated(new Date());\n      console.log(\"[2025-04-10 14:23:02] All data refreshed successfully\");\n      return {\n        users: userData,\n        paths: pathsData,\n        usersAlongPath: usersAlongPathData\n      };\n    } catch (error) {\n      console.error(\"[2025-04-10 14:23:02] Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Update proximity radius\n  const updateProximityRadius = radius => {\n    console.log(`[2025-04-10 14:23:02] Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n\n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Initial setup and data refresh\n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n      console.log('[2025-04-10 14:23:02] Setting up initial data load and refresh cycle');\n\n      // Initial load\n      forceRefreshData().catch(e => console.error('Initial data load failed:', e));\n\n      // Regular refresh cycle\n      const intervalId = setInterval(() => {\n        if (!isLoading) {\n          console.log('[2025-04-10 14:23:02] Running periodic data refresh');\n\n          // Refresh paths first\n          fetchLivePaths().then(() => fetchUsersAlongPath()).then(() => fetchLiveUsers()).catch(e => console.error('Periodic refresh failed:', e));\n        }\n      }, 10000); // 10-second refresh interval\n\n      return () => {\n        console.log('[2025-04-10 14:23:02] Cleaning up refresh interval');\n        clearInterval(intervalId);\n      };\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(LocationContext.Provider, {\n    value: {\n      position,\n      liveUsers,\n      livePaths,\n      myPath,\n      // Added for easy access to current user's path\n      usersAlongPath,\n      isLoading,\n      error,\n      lastUpdated,\n      showIntersectingOnly,\n      proximityRadius,\n      updateLocation,\n      createPath,\n      fetchLiveUsers,\n      fetchLivePaths,\n      fetchUsersAlongPath,\n      toggleIntersectionFilter,\n      updateProximityRadius,\n      getCurrentPosition,\n      forceRefreshData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationProvider, \"STMpwu6hqG9To4aq4JSqEyarihM=\");\n_c = LocationProvider;\nexport default LocationProvider;\nvar _c;\n$RefreshReg$(_c, \"LocationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","api","AuthContext","jsxDEV","_jsxDEV","LocationContext","LocationProvider","children","_s","user","position","setPosition","liveUsers","setLiveUsers","livePaths","setLivePaths","usersAlongPath","setUsersAlongPath","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","Date","showIntersectingOnly","setShowIntersectingOnly","proximityRadius","setProximityRadius","myPath","setMyPath","dataCache","usersHash","pathsHash","usersAlongPathHash","fetchTimers","users","paths","requestInProgress","hashData","data","JSON","stringify","split","reduce","a","b","charCodeAt","toString","updateLocation","latitude","longitude","console","log","username","response","post","fetchUsersAlongPath","catch","e","warn","createPath","source","destination","_response$data","lat","lng","pathId","fetchLivePaths","status","_error$response","_error$response$data","message","toggleIntersectionFilter","newValue","force","intersectOnly","current","now","get","pathsData","length","id","currentUserPath","find","path","user_id","newDataHash","usersData","fetchLiveUsers","userData","validUsers","filter","u","parseFloat","isNaN","Math","abs","getCurrentPosition","navigator","geolocation","coords","err","forceRefreshData","usersAlongPathData","updateProximityRadius","radius","intervalId","setInterval","then","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anubhav/project_6/auth-system/frontend/src/context/LocationContext.js"],"sourcesContent":["/**\n * LocationContext.jsx - Updated with proper path handling\n * Last updated: 2025-04-10 14:23:02\n */\n\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport api from '../utils/api';\nimport { AuthContext } from './AuthContext';\n\nexport const LocationContext = createContext();\n\nexport const LocationProvider = ({ children }) => {\n  const { user } = useContext(AuthContext);\n  const [position, setPosition] = useState(null);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [livePaths, setLivePaths] = useState([]); // Paths data\n  const [usersAlongPath, setUsersAlongPath] = useState([]); \n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [showIntersectingOnly, setShowIntersectingOnly] = useState(true); // Default to show only intersecting paths\n  const [proximityRadius, setProximityRadius] = useState(500); // Default 500m radius\n  \n  // Add myPath state for easier tracking of current user's path\n  const [myPath, setMyPath] = useState(null);\n  \n  // Cache to prevent redundant updates\n  const dataCache = useRef({\n    usersHash: null,\n    pathsHash: null,\n    usersAlongPathHash: null\n  });\n  \n  // Ref to prevent concurrent requests and track timestamps\n  const fetchTimers = useRef({\n    users: 0,\n    paths: 0,\n    usersAlongPath: 0\n  });\n  \n  // Flag to track if requests are in progress\n  const requestInProgress = useRef({\n    users: false,\n    paths: false,\n    usersAlongPath: false\n  });\n\n  // Simple hash function to compare data changes\n  const hashData = (data) => {\n    if (!data) return 'empty';\n    return JSON.stringify(data)\n      .split('')\n      .reduce((a, b) => (((a << 5) - a) + b.charCodeAt(0))|0, 0)\n      .toString();\n  };\n\n  // Update the user's location\n  const updateLocation = async (latitude, longitude) => {\n    if (!user) return;\n    \n    try {\n      console.log(`[2025-04-10 14:23:02] Updating location for user ${user.username || '[unknown]'}: ${latitude}, ${longitude}`);\n      if (!user.username) {\n        console.error('[2025-04-10 14:23:02] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      const response = await api.post('/location/update', { latitude, longitude });\n      setPosition({ latitude, longitude });\n      setLastUpdated(new Date());\n      \n      // Refresh path-related data after updating location\n      fetchUsersAlongPath(true).catch(e => console.warn('Failed to refresh users along path:', e));\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error updating location:', error);\n      setError('Failed to update location');\n      throw error;\n    }\n  };\n\n  // Create a path between source and destination\n  const createPath = async (source, destination) => {\n    if (!user) return;\n    \n    try {\n      console.log(`[2025-04-10 14:23:02] Creating path from [${source.lat}, ${source.lng}] to [${destination.lat}, ${destination.lng}]`);\n      if (!user.username) {\n        console.error('[2025-04-10 14:23:02] Missing username for API operation');\n        setError('Your profile information is incomplete. Please log out and log in again.');\n        return;\n      }\n      \n      setIsLoading(true);\n      \n      const response = await api.post('/path/set', {\n        source,\n        destination\n      });\n      \n      console.log(`[2025-04-10 14:23:02] Path created successfully with ID: ${response.data?.pathId || 'unknown'}`);\n      \n      // Refresh paths to get new path data\n      await fetchLivePaths(true);\n      \n      // Then fetch users along the new path\n      await fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      setIsLoading(false);\n      \n      return response.data;\n    } catch (error) {\n      setIsLoading(false);\n      if (error.response && error.response.status === 403) {\n        console.warn('User is not active enough to create paths');\n        setError('You must have an active location to create paths');\n      } else {\n        console.error('Error creating path:', error);\n        setError('Failed to create path: ' + (error.response?.data?.message || error.message));\n      }\n      throw error;\n    }\n  };\n\n  // Toggle intersection filtering\n  const toggleIntersectionFilter = () => {\n    const newValue = !showIntersectingOnly;\n    setShowIntersectingOnly(newValue);\n    \n    // Refresh paths with the new filter setting\n    fetchLivePaths(true, newValue); // Force refresh with new filter\n    \n    return newValue;\n  };\n\n  // Fetch paths data with improved error handling\n  const fetchLivePaths = async (force = false, intersectOnly = showIntersectingOnly) => {\n    if (!user) return [];\n    \n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.paths && !force) {\n      return livePaths;\n    }\n    \n    const now = Date.now();\n    // Apply throttling for requests\n    if (!force && now - fetchTimers.current.paths < 300) {\n      return livePaths;\n    }\n    \n    try {\n      requestInProgress.current.paths = true;\n      fetchTimers.current.paths = now;\n      \n      // Only show loading if forced - reduces UI flicker\n      if (force) setIsLoading(true);\n      \n      console.log(`[2025-04-10 14:23:02] Fetching paths with intersectOnly=${intersectOnly}`);\n      \n      const response = await api.get(`/path/live?intersectOnly=${intersectOnly}`);\n      const pathsData = response.data.data || [];\n      \n      console.log(`[2025-04-10 14:23:02] Received ${pathsData.length} paths from API`);\n      \n      // Check for and log current user's path\n      if (user && user.id) {\n        const currentUserPath = pathsData.find(path => path.user_id === user.id);\n        if (currentUserPath) {\n          console.log(`[2025-04-10 14:23:02] Found current user's path: ID=${currentUserPath.id}`);\n          setMyPath(currentUserPath);\n        } else {\n          console.log(`[2025-04-10 14:23:02] No path found for current user`);\n          setMyPath(null);\n        }\n      }\n      \n      // Only update UI if data has changed, reducing render cycles\n      const newDataHash = hashData(pathsData);\n      if (force || newDataHash !== dataCache.current.pathsHash) {\n        console.log(`[2025-04-10 14:23:02] Updating paths state with ${pathsData.length} paths`);\n        \n        dataCache.current.pathsHash = newDataHash;\n        setLivePaths(pathsData);\n        setLastUpdated(new Date());\n      }\n      \n      if (force) setIsLoading(false);\n      return pathsData;\n    } catch (error) {\n      console.error('[2025-04-10 14:23:02] Error fetching paths:', error);\n      if (force) {\n        setError('Failed to fetch paths');\n        setIsLoading(false);\n      }\n      return livePaths;\n    } finally {\n      requestInProgress.current.paths = false;\n    }\n  };\n\n  // Fetch users who are physically located along the current user's path\n  const fetchUsersAlongPath = async (force = false) => {\n    if (!user) return [];\n    \n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.usersAlongPath && !force) {\n      return usersAlongPath;\n    }\n    \n    const now = Date.now();\n    // Apply throttling for requests\n    if (!force && now - fetchTimers.current.usersAlongPath < 300) {\n      return usersAlongPath;\n    }\n    \n    try {\n      requestInProgress.current.usersAlongPath = true;\n      fetchTimers.current.usersAlongPath = now;\n      \n      // Only show loading if forced\n      if (force) setIsLoading(true);\n      \n      console.log(`[2025-04-10 14:23:02] Fetching users along path with radius ${proximityRadius}m`);\n      \n      const response = await api.get(`/location/along-my-path?radius=${proximityRadius}`);\n      const usersData = response.data.data || [];\n      \n      console.log(`[2025-04-10 14:23:02] Found ${usersData.length} users along current user's path`);\n      \n      // Only update UI if data has changed\n      const newDataHash = hashData(usersData);\n      if (force || newDataHash !== dataCache.current.usersAlongPathHash) {\n        dataCache.current.usersAlongPathHash = newDataHash;\n        setUsersAlongPath(usersData);\n        setLastUpdated(new Date());\n      }\n      \n      if (force) setIsLoading(false);\n      return usersData;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // No path found for current user is expected in some cases\n        console.log('[2025-04-10 14:23:02] No path found for current user');\n        setUsersAlongPath([]);\n        dataCache.current.usersAlongPathHash = hashData([]);\n        return [];\n      } else {\n        console.error('[2025-04-10 14:23:02] Error fetching users along path:', error);\n        if (force) {\n          setError('Failed to fetch users along path');\n          setIsLoading(false);\n        }\n        return usersAlongPath;\n      }\n    } finally {\n      requestInProgress.current.usersAlongPath = false;\n    }\n  };\n\n  // Fetch all active users' locations\n  const fetchLiveUsers = async (force = false) => {\n    if (!user) return [];\n    \n    // If a request is already in progress, skip this one\n    if (requestInProgress.current.users && !force) {\n      return liveUsers;\n    }\n    \n    const now = Date.now();\n    // Apply throttling for requests\n    if (!force && now - fetchTimers.current.users < 300) {\n      return liveUsers;\n    }\n    \n    try {\n      requestInProgress.current.users = true;\n      fetchTimers.current.users = now;\n      \n      // Only show loading if forced\n      if (force) setIsLoading(true);\n      \n      const response = await api.get('/location/live');\n      const userData = response.data.data || [];\n      \n      // Validate coordinates before setting state\n      const validUsers = userData.filter(u => {\n        const lat = parseFloat(u.latitude);\n        const lng = parseFloat(u.longitude);\n        return !isNaN(lat) && !isNaN(lng) && \n               Math.abs(lat) <= 90 && Math.abs(lng) <= 180;\n      });\n      \n      // Only update UI if data has changed\n      const newDataHash = hashData(validUsers);\n      if (force || newDataHash !== dataCache.current.usersHash) {\n        dataCache.current.usersHash = newDataHash;\n        setLiveUsers(validUsers);\n        setLastUpdated(new Date());\n      }\n      \n      if (force) setIsLoading(false);\n      return validUsers;\n    } catch (error) {\n      console.error('[2025-04-10 14:23:02] Error fetching users:', error);\n      if (force) {\n        setError('Failed to fetch users');\n        setIsLoading(false);\n      }\n      return liveUsers;\n    } finally {\n      requestInProgress.current.users = false;\n    }\n  };\n  \n  // Get browser geolocation - only do this at startup\n  const getCurrentPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setPosition({ latitude, longitude });\n          \n          // Update server with this location\n          if (user) {\n            updateLocation(latitude, longitude)\n              .catch(err => console.error('Failed to update initial location:', err));\n          }\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError('Failed to get location');\n        }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  // Force refresh all data\n  const forceRefreshData = async () => {\n    console.log(\"[2025-04-10 14:23:02] Force refreshing all location data...\");\n    setIsLoading(true);\n    \n    try {\n      // Reset cache to force UI updates\n      dataCache.current = {\n        usersHash: null,\n        pathsHash: null,\n        usersAlongPathHash: null\n      };\n      \n      // Fetch data in sequence to avoid race conditions\n      console.log(\"[2025-04-10 14:23:02] Refreshing paths data\");\n      const pathsData = await fetchLivePaths(true);\n      \n      console.log(\"[2025-04-10 14:23:02] Refreshing users data\");\n      const userData = await fetchLiveUsers(true);\n      \n      console.log(\"[2025-04-10 14:23:02] Refreshing users along path data\");\n      const usersAlongPathData = await fetchUsersAlongPath(true);\n      \n      setLastUpdated(new Date());\n      console.log(\"[2025-04-10 14:23:02] All data refreshed successfully\");\n      \n      return { \n        users: userData, \n        paths: pathsData,\n        usersAlongPath: usersAlongPathData\n      };\n    } catch (error) {\n      console.error(\"[2025-04-10 14:23:02] Error in force refresh:\", error);\n      setError(\"Failed to refresh location data: \" + error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Update proximity radius\n  const updateProximityRadius = (radius) => {\n    console.log(`[2025-04-10 14:23:02] Updating proximity radius to ${radius}m`);\n    setProximityRadius(radius);\n    \n    // Refresh users along path with new radius\n    fetchUsersAlongPath(true);\n  };\n\n  // Initial setup and data refresh\n  useEffect(() => {\n    if (user) {\n      // Get current location first\n      getCurrentPosition();\n      \n      console.log('[2025-04-10 14:23:02] Setting up initial data load and refresh cycle');\n      \n      // Initial load\n      forceRefreshData().catch(e => console.error('Initial data load failed:', e));\n      \n      // Regular refresh cycle\n      const intervalId = setInterval(() => {\n        if (!isLoading) {\n          console.log('[2025-04-10 14:23:02] Running periodic data refresh');\n          \n          // Refresh paths first\n          fetchLivePaths()\n            .then(() => fetchUsersAlongPath())\n            .then(() => fetchLiveUsers())\n            .catch(e => console.error('Periodic refresh failed:', e));\n        }\n      }, 10000); // 10-second refresh interval\n      \n      return () => {\n        console.log('[2025-04-10 14:23:02] Cleaning up refresh interval');\n        clearInterval(intervalId);\n      };\n    }\n  }, [user]);\n\n  return (\n    <LocationContext.Provider\n      value={{\n        position,\n        liveUsers,\n        livePaths,\n        myPath, // Added for easy access to current user's path\n        usersAlongPath,\n        isLoading,\n        error,\n        lastUpdated,\n        showIntersectingOnly,\n        proximityRadius,\n        updateLocation,\n        createPath,\n        fetchLiveUsers,\n        fetchLivePaths,\n        fetchUsersAlongPath,\n        toggleIntersectionFilter,\n        updateProximityRadius,\n        getCurrentPosition,\n        forceRefreshData\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n\nexport default LocationProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}